<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 19:28:46 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-910/HTTPCLIENT-910.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-910] AutoCloseInputStream.read() throws IOException after autoclose</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-910</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                    <description>&lt;p&gt;A customer reported a problem, wherein our product was catching and logging many IOExceptions.  Upon examining the logs I see:&lt;/p&gt;

&lt;p&gt;java.io.IOException: Attempted read on closed stream.&lt;br/&gt;
	at org.apache.commons.httpclient.AutoCloseInputStream.isReadAllowed(AutoCloseInputStream.java:183)&lt;br/&gt;
	at org.apache.commons.httpclient.AutoCloseInputStream.read(AutoCloseInputStream.java:107)&lt;br/&gt;
	at java.io.FilterInputStream.read(FilterInputStream.java:116)&lt;br/&gt;
	at com.acme.DocPusher$BigEmptyDocumentFilterInputStream.read(DocPusher.java:679)&lt;br/&gt;
	at com.acme.CompressedFilterInputStream.fillbuff(CompressedFilterInputStream.java:96)&lt;br/&gt;
	at com.acme.CompressedFilterInputStream.read(CompressedFilterInputStream.java:67)&lt;br/&gt;
	at com.acme.Base64FilterInputStream.fillbuff(Base64FilterInputStream.java:138)&lt;br/&gt;
	at com.acme.Base64FilterInputStream.read(Base64FilterInputStream.java:115)&lt;br/&gt;
	at java.io.FilterInputStream.read(FilterInputStream.java:116)&lt;br/&gt;
	at com.acme.DocPusher$AlternateContentFilterInputStream.read(DocPusher.java:609)&lt;br/&gt;
        ...&lt;/p&gt;

&lt;p&gt;As you can see, this is a pipeline consisting of multiple FilterInputStream segments that process data flowing through the pipeline.  The source of the data is in InputStream provided by a third party plug-in component.  In our customer&apos;s situation, that InputStream is a AutoCloseInputStream returned by a Sharepoint API call.&lt;/p&gt;

&lt;p&gt;When I saw the &quot;Attempted read on closed stream.&quot;, I was incredulous; &quot;Reading from a closed stream - that&apos;s a rookie mistake.&quot;  However, when examining the JavaDoc for AutoCloseInputStream, I read:  &lt;span class=&quot;error&quot;&gt;&amp;#91;emphasis mine&amp;#93;&lt;/span&gt;&lt;br/&gt;
&quot;Proxy stream that closes and discards the underlying stream &lt;b&gt;as soon as the end of input has been reached&lt;/b&gt; or when the stream is explicitly closed.&quot;&lt;/p&gt;

&lt;p&gt;Many of the FilterInputStream processors require a minimum amount of data from its input in order to function, so they typically have a method called fillbuff() that fills an I/O buffer with data from the input:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /**
   * Try to fill up the buffer with data read from the input stream.
   * This is tolerant of &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; reads - returning less than the requested
   * amount of data, even &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; there is more available.
   * 
   * @param b buffer to fill
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; number of bytes written to buffer, or -1 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; EOF
   */
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; fillbuff(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; b[]) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; bytesRead = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (bytesRead &amp;lt; b.length) {
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; val = in.read(b, bytesRead, b.length - bytesRead);
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (val == -1) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (bytesRead &amp;gt; 0) ? bytesRead : val;
      }
      bytesRead += val;
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; bytesRead;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, this code assumes that a read when at end-of-stream will return -1.  Since this is called from a loop, we see that it may actually make two attempts to read from EOF: once after having read the last few bytes of the input stream, but not filling its buffer; and again after processing the partial buffer returned previously.  The second read from EOF then gets propagated upward.  This code (and much more like it) makes the entirely reasonable assumption that a read while at end of stream will return -1.&lt;/p&gt;

&lt;p&gt;I know the InputStream JavaDoc says:&lt;br/&gt;
&quot;If no byte is available because the stream is at end of file, the value -1 is returned; ...&quot;&lt;br/&gt;
and later:&lt;br/&gt;
&quot;If the first byte cannot be read for any reason other than end of file, then an IOException is thrown. In particular, an IOException is thrown if the input stream has been closed.&quot;&lt;/p&gt;

&lt;p&gt;So technically, AutoCloseInputStream is staying within the ambiguous definition of who should be in control of closing a stream.  However, it is behaving very poorly, in a &quot;kick the chair out from under the guy about to sit down&quot; sort of way.&lt;/p&gt;

&lt;p&gt;You are following the letter of the doc, returning IOException because the stream is closed, &lt;b&gt;but the consumer of the stream has no idea that the stream has been closed&lt;/b&gt;, because the consumer did not explicitly close it, and had no real expectation that it would be closed by an outside agent while it was still in use.&lt;/p&gt;

&lt;p&gt;The work-around for our product involved changing dozens of FilterInputStream components, ensuring they do not attempt to read at EOF more than once.  Often it was as simple as:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; atEOF = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
  ...
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; fillbuff(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; b[]) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (atEOF) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
    }
   ...
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (bytesRead &amp;lt; b.length) {
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; val = in.read(b, bytesRead, b.length - bytesRead);
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (val == -1) {
        atEOF = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (bytesRead &amp;gt; 0) ? bytesRead : val;
      }
   ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this added extra processing to every call to read() and read(byte[]...) to handle the possibility of encountering this ill-behaved InputStream.  Plus, I now had to override mark(), and reset() in all of them to clear the EOF state if the stream is rewound.&lt;/p&gt;

&lt;p&gt;I suggest that AutoCloseInputStream.read(...) return -1 if the underlying stream has been automatically closed at EOF.  You still get the advantage of your &quot;helpful&quot; resource management for lazy programmers, but don&apos;t penalize the traditional InputStream consumer with unexpected behaviour.  You should still throw IOException if read() is called after an explicit close(), as that would be a programming error. &lt;/p&gt;</description>
                <environment>Apple Inc. Java HotSpot(TM) 64-Bit Server VM 1.6.0_17; Mac OS X 10.5.8 (x86_64)</environment>
        <key id="12446944">HTTPCLIENT-910</key>
            <summary>AutoCloseInputStream.read() throws IOException after autoclose</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="brettmjohnson">Brett Johnson</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 Jan 2010 19:50:14 +0000</created>
                <updated>Sun, 3 May 2015 14:59:27 +0000</updated>
                            <resolved>Thu, 28 Jan 2010 22:05:52 +0000</resolved>
                                                                    <component>HttpClient (classic)</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12806127" author="olegk" created="Thu, 28 Jan 2010 22:05:52 +0000"  >&lt;p&gt;Brett,&lt;/p&gt;

&lt;p&gt;What you are saying makes good sense. However, AutoCloseInputStream is no longer used in the HttpClient 4.x code line and I see no point in fixing HttpClient 3.x, which is pretty much end of life. &lt;/p&gt;

&lt;p&gt;Please consider upgrading.&lt;/p&gt;

&lt;p&gt;Oleg&lt;/p&gt;</comment>
                            <comment id="14525860" author="veithen" created="Sun, 3 May 2015 14:59:27 +0000"  >&lt;p&gt;I think that the analysis of the OP is incorrect. I had a look at the code in 3.1, and &lt;tt&gt;AutoCloseInputStream&lt;/tt&gt; behaves correctly:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;A necessary condition for the exception to be thrown is that &lt;tt&gt;selfClosed&lt;/tt&gt; is true.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;selfClosed&lt;/tt&gt; only changes to true when &lt;tt&gt;AutoCloseInputStream#close()&lt;/tt&gt; is called.&lt;/li&gt;
	&lt;li&gt;When &lt;tt&gt;AutoCloseInputStream&lt;/tt&gt; automatically closes the underlying stream, it calls &lt;tt&gt;super.close()&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This means that the exception can only occur if the &lt;tt&gt;close&lt;/tt&gt; method on the &lt;tt&gt;AutoCloseInputStream&lt;/tt&gt; has been called explicitly.&lt;/p&gt;

&lt;p&gt;I also wrote some test code to confirm this. Therefore the issue should be considered invalid.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12446943">IO-227</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12668417">HTTPCORE-349</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 28 Jan 2010 22:05:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>133916</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 30 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i08kev:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>47906</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>