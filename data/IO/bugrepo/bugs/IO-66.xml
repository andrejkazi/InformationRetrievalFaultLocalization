<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Nov 20 17:24:14 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/IO-66/IO-66.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[IO-66] [IO] FilenameFilter that uses regular expressions (upload)</title>
                <link>https://issues.apache.org/jira/browse/IO-66</link>
                <project id="12310477" key="IO">Commons IO</project>
                    <description>&lt;p&gt;I was in need of a FilenameFilter that observed case-sensetivity and couldn&apos;t&lt;br/&gt;
find anything in the existing commons-io library to meet this requirement. So,&lt;br/&gt;
I&apos;ve thrown together RegexFileFilter and an accompanying unit test to fill the&lt;br/&gt;
void. Please add/apply to commons-io as necessary.&lt;/p&gt;

&lt;p&gt;-sp&lt;/p&gt;

&lt;p&gt;I don&apos;t see a way to attach files so heres the cut-n-paste:&lt;/p&gt;

&lt;p&gt;================================================================================&lt;br/&gt;
/*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Copyright 2002-2004 The Apache Software Foundation.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&lt;/li&gt;
	&lt;li&gt;you may not use this file except in compliance with the License.&lt;/li&gt;
	&lt;li&gt;You may obtain a copy of the License at&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Unless required by applicable law or agreed to in writing, software&lt;/li&gt;
	&lt;li&gt;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;/li&gt;
	&lt;li&gt;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/li&gt;
	&lt;li&gt;See the License for the specific language governing permissions and&lt;/li&gt;
	&lt;li&gt;limitations under the License.&lt;br/&gt;
 */&lt;br/&gt;
package org.apache.commons.io.filefilter;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;import java.io.File;&lt;br/&gt;
import java.io.IOException;&lt;/p&gt;

&lt;p&gt;import org.apache.commons.io.filefilter.AbstractFileFilter;&lt;br/&gt;
import org.apache.regexp.RE;&lt;br/&gt;
import org.apache.regexp.RESyntaxException;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Filters files based on a regular expression that is matched against the&lt;/li&gt;
	&lt;li&gt;entire filename (including drive, path, and name). Of particular note about&lt;/li&gt;
	&lt;li&gt;this filter is the ability to express case-sensetivity.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;For example, to retrieve and print all files that contain the string&lt;/li&gt;
	&lt;li&gt;&amp;lt;code&amp;gt;&quot;xyz&quot;&amp;lt;/code&amp;gt; in the current directory, the regular expression&lt;/li&gt;
	&lt;li&gt;&amp;lt;code&amp;gt;&quot;.&lt;b&gt;xyz.&lt;/b&gt;&quot;&amp;lt;/code&amp;gt; can be used:&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;File dir = new File(&quot;.&quot;);&lt;/li&gt;
	&lt;li&gt;String[] files = dir.list(new RegexFileFilter(&quot;.&lt;b&gt;xyz.&lt;/b&gt;&quot;, true));&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; files.length; i++) 
{
 *     System.out.println(files[i]);
 * }&lt;/li&gt;
	&lt;li&gt;&amp;lt;/pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;To match using case-insensetivity,&lt;/li&gt;
	&lt;li&gt;&amp;lt;code&amp;gt;new RegexFileFilter(&quot;.&lt;b&gt;xyz.&lt;/b&gt;&quot;, false)&amp;lt;/code&amp;gt; would be appropriate.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@author Semir Patel&lt;br/&gt;
 */&lt;br/&gt;
public class RegexFileFilter extends AbstractFileFilter {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Fields&lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    /** &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Regular expression matcher.&lt;br/&gt;
     */&lt;br/&gt;
    private RE regExp;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Constructors&lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Creates a file filter that applies a regular expression to the entire&lt;/li&gt;
	&lt;li&gt;path + name of a file&apos;s absolute location.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param regExp Regular expression to match.&lt;/li&gt;
	&lt;li&gt;@param matchCase Set to true to match using case sensetivity, false&lt;/li&gt;
	&lt;li&gt;otherwise.&lt;/li&gt;
	&lt;li&gt;@throws RESyntaxException if the regular expression is invalid.&lt;br/&gt;
     */&lt;br/&gt;
    public RegexFileFilter(String regExp, boolean matchCase)&lt;br/&gt;
        throws RESyntaxException 
{
        
        this.regExp = new RE(regExp, 
            matchCase ? RE.MATCH_NORMAL: RE.MATCH_CASEINDEPENDENT);        
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Overrides AbstractFileFilter&lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Accepts by matching the filename against a regular expression.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@throws RuntimeException if an IOException occurs.&lt;/li&gt;
	&lt;li&gt;@see org.apache.commons.io.filefilter.AbstractFileFilter#accept(&lt;/li&gt;
	&lt;li&gt;java.io.File)&lt;br/&gt;
     */&lt;br/&gt;
    public boolean accept(File file) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        try &lt;/p&gt;
{
            return regExp.match(file.getCanonicalPath());
        }
&lt;p&gt;        catch (IOException e) &lt;/p&gt;
{
            
            // TODO: Follow commons-io existing practice...
            throw new RuntimeException(e);
        }
&lt;p&gt;    }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;==========================================================================&lt;br/&gt;
/*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Copyright 2002-2004 The Apache Software Foundation.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&lt;/li&gt;
	&lt;li&gt;you may not use this file except in compliance with the License.&lt;/li&gt;
	&lt;li&gt;You may obtain a copy of the License at&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Unless required by applicable law or agreed to in writing, software&lt;/li&gt;
	&lt;li&gt;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;/li&gt;
	&lt;li&gt;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/li&gt;
	&lt;li&gt;See the License for the specific language governing permissions and&lt;/li&gt;
	&lt;li&gt;limitations under the License.&lt;br/&gt;
 */&lt;br/&gt;
package org.apache.commons.io.filefilter;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;import java.io.File;&lt;/p&gt;

&lt;p&gt;import junit.framework.TestCase;&lt;br/&gt;
import junit.textui.TestRunner;&lt;/p&gt;

&lt;p&gt;import org.apache.commons.io.FileUtils;&lt;br/&gt;
import org.apache.regexp.RESyntaxException;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Unit test for 
{@link RegexFileFilterTest}
&lt;p&gt;.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@author Semir Patel&lt;br/&gt;
 */&lt;br/&gt;
public class RegexFileFilterTest extends TestCase {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Constants&lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Temporary file names that unit tests will use for verification.&lt;br/&gt;
     */&lt;br/&gt;
    private static final String[] FILENAMES = new String[] 
{
        &quot;EVENT.java&quot;,
    }
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Fields&lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    /** &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Test directory for filtering files.&lt;br/&gt;
     */&lt;br/&gt;
    private File testDir;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Main&lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    /** &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Entrypoint.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param args None recognized.&lt;br/&gt;
     */&lt;br/&gt;
    public static void main(String[] args)
    {
        TestRunner.run(RegexFileFilterTest.class);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Overrides TestCase&lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    /** &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Create a temporary directory with files to use for testing.&lt;br/&gt;
     */&lt;br/&gt;
    protected void setUp() throws Exception 
{
        
        File tmpDir = new File(System.getProperty(&quot;java.io.tmpdir&quot;));
        testDir = File.createTempFile(&quot;temp&quot;, &quot;&quot;, tmpDir);
        testDir.delete();
        
        assertTrue(
            &quot;test dir creation failed for &quot; + testDir.getCanonicalPath(), 
            testDir.mkdirs()); 
        
        for (int i = 0; i &amp;lt; FILENAMES.length; i++)
            FileUtils.writeStringToFile(
                new File(testDir, FILENAMES[i]), &quot;testing&quot; + i, &quot;UTF-8&quot;);
    }&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Clean up temporary directory.&lt;br/&gt;
     */&lt;br/&gt;
    protected void tearDown() throws Exception 
{
        FileUtils.forceDelete(testDir);
        super.tearDown();
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Case Insensetive &lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    public void testAccept_CaseInsensetive_NotFound() throws Exception &lt;/p&gt;
{
        IOFileFilter filter = new RegexFileFilter(&quot;bogus&quot;, false);
        
        String matches[] = testDir.list(filter);
        assertEquals(&quot;No matches should have been found&quot;, 0, matches.length);
    }
&lt;p&gt; &lt;/p&gt;


&lt;p&gt;    public void testAccept_CaseInsensetive_CaseMatch() throws Exception &lt;/p&gt;
{
        IOFileFilter filter = new RegexFileFilter(&quot;EVENT&quot;, false);
        
        String matches[] = testDir.list(filter);
        assertEquals(&quot;One match should have been found&quot;, 1, matches.length);
        assertEquals(&quot;One match should have been found&quot;, &quot;EVENT.java&quot;, matches[0]);
    }
&lt;p&gt; &lt;/p&gt;


&lt;p&gt;    public void testAccept_CaseInsensetive_CaseMismatch() throws Exception &lt;/p&gt;
{
        IOFileFilter filter = new RegexFileFilter(&quot;event&quot;, false);
        
        String matches[] = testDir.list(filter);
        assertEquals(&quot;One match should have been found&quot;, 1, matches.length);
        assertEquals(&quot;One match should have been found&quot;, &quot;EVENT.java&quot;, matches[0]);
    }

&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Case Sensetive &lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    public void testAccept_CaseSensetive_NotFound() throws Exception &lt;/p&gt;
{
        IOFileFilter filter = new RegexFileFilter(&quot;bogus&quot;, true);
        
        String matches[] = testDir.list(filter);
        assertEquals(&quot;No matches should have been found&quot;, 0, matches.length);
    }
&lt;p&gt; &lt;/p&gt;


&lt;p&gt;    public void testAccept_CaseSensetive_ExactMatch() throws Exception &lt;/p&gt;
{
        IOFileFilter filter = new RegexFileFilter(&quot;EVENT&quot;, true);
        
        String matches[] = testDir.list(filter);
        assertEquals(&quot;One match should have been found&quot;, 1, matches.length);
        assertEquals(&quot;One match should have been found&quot;, &quot;EVENT.java&quot;, matches[0]);
    }
&lt;p&gt; &lt;/p&gt;


&lt;p&gt;    public void testAccept_CaseSensetive_CaseMismatch() throws Exception &lt;/p&gt;
{
        IOFileFilter filter = new RegexFileFilter(&quot;event&quot;, true);
        
        String matches[] = testDir.list(filter);
        assertEquals(&quot;No matches should have been found&quot;, 0, matches.length);
    }
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;    //--------------------------------------------------------------------------&lt;br/&gt;
    // Negative Unit Tests&lt;br/&gt;
    //--------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Make sure constructor blows up on invalid regular expressions.&lt;br/&gt;
     */&lt;br/&gt;
    public void testConstructor_Invalid_RegExp() {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        try &lt;/p&gt;
{
            RegexFileFilter filter = new RegexFileFilter(&quot;*&quot;, true);
            fail(&quot;Expected exception on invalid regular expression&quot;);
        }
&lt;p&gt;        catch (RESyntaxException rese) &lt;/p&gt;
{
            // Success
        }
&lt;p&gt;    }&lt;br/&gt;
}&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: Windows XP&lt;br/&gt;
Platform: All&lt;/p&gt;</environment>
        <key id="12341952">IO-66</key>
            <summary>[IO] FilenameFilter that uses regular expressions (upload)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="analogue">analogue</reporter>
                        <labels>
                    </labels>
                <created>Sat, 18 Dec 2004 09:09:13 +0000</created>
                <updated>Mon, 28 Jul 2014 11:48:45 +0000</updated>
                            <resolved>Fri, 12 Oct 2007 22:13:25 +0000</resolved>
                                                    <fixVersion>1.4</fixVersion>
                                    <component>Filters</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12420773" author="bayard" created="Thu, 13 Jul 2006 10:13:24 +0000"  >&lt;p&gt;Commonly requested. Would mean moving the JVM version to 1.3 to pick up the regexp, or adding a dependency on ORO.&lt;/p&gt;

&lt;p&gt;I think we&apos;ve reached the point where the JVM we depend on can go to 1.3 (or even 1.4). Either way this&apos;ll get done or WONTFIX&apos;d for IO 1.3 so setting the fixVersion accordingly.&lt;/p&gt;</comment>
                            <comment id="12422797" author="niallp" created="Fri, 21 Jul 2006 23:59:09 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/IO-74&quot; title=&quot;Regular expression file name filter implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;IO-74&quot;&gt;&lt;del&gt;IO-74&lt;/del&gt;&lt;/a&gt; also has a proposed implementation for a regular expresion FileFilter - IMO the one attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/IO-74&quot; title=&quot;Regular expression file name filter implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;IO-74&quot;&gt;&lt;del&gt;IO-74&lt;/del&gt;&lt;/a&gt; is a better implementation and uses the regular expression functionality provided in JDK 1.4+&lt;/p&gt;</comment>
                            <comment id="12442263" author="cote@computer.org" created="Sat, 14 Oct 2006 03:28:38 +0000"  >&lt;p&gt;From the sun website &lt;/p&gt;

&lt;p&gt;J2SE 1.3.1 has begun the Sun End of Life (EOL) process. The EOL transition period is from Oct 25, 2004, until the General Availability (GA) of the next Java version, Java SE 6. With this notice, customers are strongly encouraged to migrate to the current release, J2SE 5.0.  &#187;  Read More&lt;/p&gt;

&lt;p&gt;During this EOL transition period, the products will continue to be supported per existing customer support agreements. After the GA of Java SE 6, post EOL support will be available as follows:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;On Solaris 8:&lt;br/&gt;
      With a valid Sun software support contract, J2SE 1.3.1 will continue to be supported until the end of the Solaris 8 five year Vintage Support Period.&lt;/li&gt;
	&lt;li&gt;On Windows and Linux&lt;br/&gt;
      A paid Java Vintage Support Offering will be available, contact your Sun sales representative for details.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For developer needs, all products that have completed the EOL transition period will be moved to the Archive area.&lt;/p&gt;

&lt;p&gt;from &lt;a href=&quot;http://java.sun.com/j2se/1.3/index.jsp&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.3/index.jsp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I suggest that the project move to version 1.4 after the release Java SE 6, which is already in beta.&lt;/p&gt;</comment>
                            <comment id="12534426" author="niallp" created="Fri, 12 Oct 2007 22:13:25 +0000"  >&lt;p&gt;The regular expression filter implementation from &lt;a href=&quot;https://issues.apache.org/jira/browse/IO-74&quot; title=&quot;Regular expression file name filter implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;IO-74&quot;&gt;&lt;del&gt;IO-74&lt;/del&gt;&lt;/a&gt; has been implemented - see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/viewvc/commons/proper/io/trunk/src/java/org/apache/commons/io/filefilter/RegexFileFilter.java?view=log&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/commons/proper/io/trunk/src/java/org/apache/commons/io/filefilter/RegexFileFilter.java?view=log&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12342877">IO-74</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32761</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Jul 2006 10:13:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>139521</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 7 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0smon:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>165152</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>