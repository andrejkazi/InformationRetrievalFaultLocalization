<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Nov 20 15:26:59 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/IO-356/IO-356.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[IO-356] CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size</title>
                <link>https://issues.apache.org/jira/browse/IO-356</link>
                <project id="12310477" key="IO">Commons IO</project>
                    <description>&lt;p&gt;The size effect happens when buffer size of input stream is not dividable by requested data size. The bug is hidden in &lt;tt&gt;CharSequenceInputStream#reset()&lt;/tt&gt; method which should also call (I think) &lt;tt&gt;bbuf.limit(0)&lt;/tt&gt; otherwise next call to &lt;tt&gt;CharSequenceInputStream#read()&lt;/tt&gt; will return the remaining tail which &lt;tt&gt;bbuf&lt;/tt&gt; has accumulated.&lt;/p&gt;

&lt;p&gt;In the attached test case the test fails, if &lt;tt&gt;dataSize = 13&lt;/tt&gt; (not dividable by 10) and runs OK if &lt;tt&gt;dataSize = 20&lt;/tt&gt; (dividable by 10).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12614986">IO-356</key>
            <summary>CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dma_k">Dmitry Katsubo</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Nov 2012 16:28:54 +0000</created>
                <updated>Tue, 8 Nov 2016 17:59:09 +0000</updated>
                            <resolved>Wed, 24 Apr 2013 00:17:31 +0000</resolved>
                                    <version>2.4</version>
                                    <fixVersion>2.5</fixVersion>
                                    <component>Streams/Writers</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13491621" author="sebb@apache.org" created="Tue, 6 Nov 2012 17:10:58 +0000"  >&lt;p&gt;Thanks for the report; added the test case:&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewvc?rev=1406222&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=1406222&amp;amp;view=rev&lt;/a&gt;&lt;br/&gt;
Log:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/IO-356&quot; title=&quot;CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;IO-356&quot;&gt;&lt;del&gt;IO-356&lt;/del&gt;&lt;/a&gt; CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size&lt;br/&gt;
Add test case showing the issue&lt;/p&gt;

&lt;p&gt;Modified:&lt;br/&gt;
    commons/proper/io/trunk/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java&lt;/p&gt;

&lt;p&gt;If the code &quot;bbuf.limit(0);&quot; is added to the reset() method the tests run OK.&lt;/p&gt;

&lt;p&gt;However I&apos;m not 100% sure that&apos;s the full solution; perhaps others can comment?&lt;/p&gt;</comment>
                            <comment id="13507445" author="garydgregory" created="Fri, 30 Nov 2012 16:53:07 +0000"  >&lt;p&gt;I&apos;ve added tests with @Ignore but the problem seems deeper. The fix above does not work with the tests I added (unless the tests have bugs &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;It&apos;s not clear why we are not simply doing:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    /**
     * {@inheritDoc}
     * @param readlimit max read limit (ignored)
     */
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void mark(@SuppressWarnings(&lt;span class=&quot;code-quote&quot;&gt;&quot;unused&quot;&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; readlimit) {
        &lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.mark = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.cbuf.position();
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.cbuf.mark();
    }

    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void reset() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
&lt;span class=&quot;code-comment&quot;&gt;//        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.mark != NO_MARK) {
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.cbuf.position(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.mark);
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.mark = NO_MARK;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//        }
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.cbuf.reset();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This does not fix anything but it does not break anything else.&lt;/p&gt;

&lt;p&gt;If we need a mark, then we need tests to show why the solution above does not suffice.&lt;/p&gt;

&lt;p&gt;Help wanted.&lt;/p&gt;

&lt;p&gt;Gary&lt;/p&gt;</comment>
                            <comment id="13585387" author="tn" created="Sun, 24 Feb 2013 15:23:59 +0000"  >&lt;p&gt;In the reset method we have to modify also the bbuf variable, as it actually contains the data to be read.&lt;br/&gt;
If you take a look at the fillBuffer method, it actually fills bbuf with as many data from cbuf as bbuf can hold.&lt;/p&gt;

&lt;p&gt;A simple scenario, input string is (AAAAABBBBB), bbuf has a buffer size of 10:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  is.mark();
  byte[] data = new byte[5];
  is.read(data);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;data will contain &quot;AAAAA&quot;, but bbuf will contain the full input string (AAAAABBBBB).&lt;br/&gt;
When we now call:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  is.reset();
  is.read(data);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we just reposition cbuf, but we continue to read from bbuf, thus the result will be &quot;BBBBB&quot;.&lt;br/&gt;
I think calling bbuf.limit(0) is correct and simple, although it might be possible to improve it.&lt;/p&gt;

&lt;p&gt;Regarding the other failing unit tests:&lt;/p&gt;

&lt;p&gt;We do call the encode method with the endOfInput flag always set to true. This means we have to reset the coder the next time we use it (calling also flush is advised according to javadoc of CharsetEncoder):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    private void fillBuffer() throws CharacterCodingException {
        this.bbuf.compact();
        this.encoder.reset();
        final CoderResult result = this.encoder.encode(this.cbuf, this.bbuf, true);
        this.encoder.flush(bbuf);
        if (result.isError()) {
            result.throwException();
        }
        this.bbuf.flip();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was probably introduced as the CharsetEncoder always precedes the data with with the byte-order mark when using UTF-16 charset.&lt;br/&gt;
In that way, the BOM is only output the first time the encoder is called, but it also means that mark/reset will not work with such charsets, as subsequent calls will not generate the BOM again.&lt;/p&gt;

&lt;p&gt;I do not know how to fix this in a clean way atm, but I would consider the CharSequenceInputStream for UTF-16 charset as broken and document it.&lt;/p&gt;</comment>
                            <comment id="13585391" author="tn" created="Sun, 24 Feb 2013 15:47:10 +0000"  >&lt;p&gt;Additional info:&lt;/p&gt;

&lt;p&gt;the infinite loop of testIO_356_Loop_UTF16 is due to the fact that the buffer size is set to 1, while for UTF-16 encoding, each input character requires at least 2 bytes. Thus the input buffer is never consumed as the encoding of the input to the output buffer in fillBuffer never succeeds, leading to the infinite loop.&lt;/p&gt;

&lt;p&gt;We should check the buffer size in the constructor and fail if it is too small for the selected charset.&lt;/p&gt;</comment>
                            <comment id="13586231" author="dma_k" created="Mon, 25 Feb 2013 20:07:01 +0000"  >&lt;p&gt;So, is there any counter-example for &lt;tt&gt;bbuf.limit(0)&lt;/tt&gt; solution? If no then why not to start with it?&lt;/p&gt;</comment>
                            <comment id="13637664" author="sebb@apache.org" created="Sun, 21 Apr 2013 22:20:47 +0000"  >&lt;p&gt;testBufferedRead_RequiredCharset enters an infinite loop if encoder.reset() is called before encoder.encode().&lt;/p&gt;

&lt;p&gt;However, adding it to the reset() method seems to help.&lt;/p&gt;

&lt;p&gt;The testSkip(String) method is broken, as it assumes that each input char produces a single output byte.&lt;br/&gt;
No wonder it works for ASCII and UTF-8 and fails for UTF-16.&lt;/p&gt;</comment>
                            <comment id="13637669" author="sebb@apache.org" created="Sun, 21 Apr 2013 22:32:43 +0000"  >&lt;p&gt;Same applies to testMarkReset(String); it also assumes one byte per char.&lt;/p&gt;</comment>
                            <comment id="13637676" author="sebb@apache.org" created="Sun, 21 Apr 2013 23:16:54 +0000"  >&lt;p&gt;testIO_356 is also broken if readFirst &amp;gt; 0.&lt;br/&gt;
That&apos;s because the initial read fills the byte buffer.&lt;br/&gt;
The mark therefore saves the position after the first n chars have been read from the input.&lt;br/&gt;
data1 gets the initial buffer load; data2 gets the next n chars.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;later&amp;#93;&lt;/span&gt;&lt;br/&gt;
I now think the test does make sense.&lt;br/&gt;
Even though the individual bytes may be part of a multi-byte character, if the class is to support mark, it ought to do so as if it held plain bytes. If the mark is placed mid-character encoding, the returned bytes might not make much sense, but that&apos;s a problem for the application.&lt;/p&gt;

&lt;p&gt;For some cases, it would be possible to support mark/reset purely by adjusting the byte buffer pointers.&lt;br/&gt;
However, if the byte buffer has been refilled, that won&apos;t work, and it becomes necessary to regenerate the byte buffer contents afresh.&lt;br/&gt;
One way to do this would be to keep track of the of where the char buffer was just before the byte buffer was filled, as well as keeping track of the position in the byte buffer. In theory reset can then just re-encode the char buffer and update the byte buffer pointer.&lt;br/&gt;
There may need to be some special processing at the start of the encoding.&lt;/p&gt;</comment>
                            <comment id="13638347" author="dma_k" created="Mon, 22 Apr 2013 19:19:25 +0000"  >&lt;p&gt;Sebb, fixing that for majority of cases is not bad, keeping in mind that now simply does not work at all. Putting/resetting to a mark on the byte in the middle of a character should not be a problem: you can define a contract yourself and describe this very corner case in JavaDoc.&lt;/p&gt;</comment>
                            <comment id="13639888" author="sebb@apache.org" created="Wed, 24 Apr 2013 00:17:31 +0000"  >&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/r1471209&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/r1471209&lt;/a&gt;&lt;br/&gt;
Log:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/IO-356&quot; title=&quot;CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;IO-356&quot;&gt;&lt;del&gt;IO-356&lt;/del&gt;&lt;/a&gt; CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size.&lt;br/&gt;
       Fix code so skip relates to the encoded bytes; reset now re-encodes the data up to the point of the mark&lt;/p&gt;

&lt;p&gt;Modified:&lt;br/&gt;
    commons/proper/io/trunk/src/changes/changes.xml&lt;br/&gt;
    commons/proper/io/trunk/src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java&lt;br/&gt;
    commons/proper/io/trunk/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12552305" name="CharSequenceInputStreamTest.java" size="833" author="dma_k" created="Tue, 6 Nov 2012 16:29:13 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 Nov 2012 17:10:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>255505</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 30 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0ese7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>84364</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>