<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 19:03:34 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/IO-84/IO-84.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[IO-84] Many classes are limited to length of stream &lt; 2 GB, and behave incorrectly on larger streams</title>
                <link>https://issues.apache.org/jira/browse/IO-84</link>
                <project id="12310477" key="IO">Commons IO</project>
                    <description>&lt;p&gt;java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.&lt;/p&gt;

&lt;p&gt;For example, see &lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup&lt;/a&gt;&lt;br/&gt;
Method: int copy(InputStream input, OutputStream output).&lt;/p&gt;

&lt;p&gt;The correct method would be: long copy(InputStream input, OutputStream output).&lt;/p&gt;

&lt;p&gt;This issue may affect many classes and routines.&lt;/p&gt;</description>
                <environment>&lt;p&gt;All&lt;/p&gt;</environment>
        <key id="12345975">IO-84</key>
            <summary>Many classes are limited to length of stream &lt; 2 GB, and behave incorrectly on larger streams</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ephilippov">Evgenii Philippov</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Jul 2006 16:31:49 +0000</created>
                <updated>Fri, 9 Mar 2007 20:38:22 +0000</updated>
                            <resolved>Fri, 13 Oct 2006 04:55:09 +0000</resolved>
                                    <version>1.2</version>
                                    <fixVersion>1.3</fixVersion>
                                    <component>Utilities</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12421835" author="scolebourne" created="Tue, 18 Jul 2006 10:52:23 +0000"  >&lt;p&gt;The method signatures cannot be changed due to backwards compatability, however we should check to see what the impact of this is&lt;/p&gt;</comment>
                            <comment id="12421884" author="ephilippov" created="Tue, 18 Jul 2006 14:54:35 +0000"  >&lt;p&gt;One possible solution would be to add methods like &quot;long copyLongStream()&quot; and mark &quot;int copy()&quot; as deprecated.&lt;/p&gt;

&lt;p&gt;Does not sound attractive though, but the only other solution is to break compatibility.&lt;/p&gt;</comment>
                            <comment id="12440661" author="scolebourne" created="Sat, 7 Oct 2006 12:52:31 +0000"  >&lt;p&gt;This issue only affects &lt;br/&gt;
IOUtils.copy(InputStream,OutputStream)&lt;br/&gt;
IOUtils.copy(Reader, Writer)&lt;/p&gt;

&lt;p&gt;Comment added to these methods&lt;/p&gt;</comment>
                            <comment id="12440740" author="niallp" created="Sun, 8 Oct 2006 08:45:44 +0000"  >&lt;p&gt;CountingInputStream and CountingOutputStream also suffer from the same issue - however they were recently deprecated, although I&apos;m not sure why.&lt;/p&gt;</comment>
                            <comment id="12440741" author="niallp" created="Sun, 8 Oct 2006 08:47:47 +0000"  >&lt;p&gt;One other thought - maybe the affected methods in IOUtils should do something consistent in the event of the files being larger the 2GB:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return a negative value, e.g. -1&lt;/li&gt;
	&lt;li&gt;return the Integer  maximum value&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12440783" author="niallp" created="Sun, 8 Oct 2006 21:38:48 +0000"  >&lt;p&gt;I&apos;ve fixed this issue for CountingInputStream and CountingOutputStream - original getCount() and resetCount() methods have been deprecated and new getByteCount() and resetByteCount() methods added.&lt;/p&gt;</comment>
                            <comment id="12440793" author="niallp" created="Mon, 9 Oct 2006 01:22:54 +0000"  >&lt;p&gt;Attaching patches for IOUtils, CountingInputStream and CountingOutputStream to return Integer.MAX_VALUE if the size is larger than 2GB (plus test cases)&lt;/p&gt;</comment>
                            <comment id="12441471" author="scolebourne" created="Wed, 11 Oct 2006 14:48:03 +0000"  >&lt;p&gt;I&apos;ve changed these from deprecated to throw an exception instead (although I&apos;m open to -1/MIN_VALUE/MAX_VALUE too)&lt;/p&gt;

&lt;p&gt;The reason is that most users will probably only care about smaller files, and inconveniencing the many for the few is too harsh a response to this problem.The javadoc together with an exception would seem to be a safe way to deal with the problem.&lt;/p&gt;

&lt;p&gt;This call is now awaiting feedback or closure.&lt;/p&gt;</comment>
                            <comment id="12441512" author="niallp" created="Wed, 11 Oct 2006 17:42:51 +0000"  >&lt;p&gt;I&apos;m happy with throwing the exception.&lt;/p&gt;

&lt;p&gt;How about the same behaviour in IOUtils - add 2 new copyLarge() methods and throw an ArithmeticException in the original copy() methods if they exceed 2GB?&lt;/p&gt;

&lt;p&gt;I tried to attach a patch for this but got an error  saying:&lt;/p&gt;

&lt;p&gt;&quot;Exception trying to establish attachment directory. Check that the application server and JIRA have permissions to write to it: com.atlassian.jira.web.util.AttachmentException: Cannot write to attachment directory. Check that the application server and JIRA have permissions to write to: /usr/local/tomcat/tomcat-jira/attachments/IO/&lt;a href=&quot;https://issues.apache.org/jira/browse/IO-84&quot; title=&quot;Many classes are limited to length of stream &amp;lt; 2 GB, and behave incorrectly on larger streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;IO-84&quot;&gt;&lt;del&gt;IO-84&lt;/del&gt;&lt;/a&gt;&quot;&lt;/p&gt;

&lt;p&gt;Something along the following lines though:&lt;/p&gt;

&lt;p&gt;    public static int copy(InputStream input, OutputStream output)&lt;br/&gt;
            throws IOException {&lt;br/&gt;
        long count = copyLarge(input, output);&lt;br/&gt;
        if (count &amp;gt; (long)Integer.MAX_VALUE) &lt;/p&gt;
{
            throw new ArithmeticException(&quot;The byte count &quot; + count + &quot; is too large to be converted to an int&quot;);
        }
&lt;p&gt;        return (int)count;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    public static long copyLarge(InputStream input, OutputStream output)&lt;br/&gt;
            throws IOException {&lt;br/&gt;
        byte[] buffer = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;DEFAULT_BUFFER_SIZE&amp;#93;&lt;/span&gt;;&lt;br/&gt;
        long count = 0;&lt;br/&gt;
        int n = 0;&lt;br/&gt;
        while (-1 != (n = input.read(buffer))) &lt;/p&gt;
{
            output.write(buffer, 0, n);
            count += n;
        }
&lt;p&gt;        return count;&lt;br/&gt;
    }&lt;/p&gt;</comment>
                            <comment id="12441575" author="scolebourne" created="Wed, 11 Oct 2006 22:26:57 +0000"  >&lt;p&gt;I&apos;m happy with these IOUtils additions, so feel free to commit if you get a chance.&lt;/p&gt;</comment>
                            <comment id="12441663" author="niallp" created="Thu, 12 Oct 2006 08:28:42 +0000"  >&lt;p&gt;Committed those changes to IOUtils to add copyLarge() methods and throw and ArithmeticException in the original copy() methods.&lt;/p&gt;

&lt;p&gt;I have modifications to the IOUtils unit tests (IOUtilsCopyTestCase) to test the changes, but they use the MockInputStream and MockReader implementations from &lt;a href=&quot;https://issues.apache.org/jira/browse/IO-94&quot; title=&quot;New NullnputStream &amp;amp; NullReader implementations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;IO-94&quot;&gt;&lt;del&gt;IO-94&lt;/del&gt;&lt;/a&gt; - so I&apos;ll hold off committing those until the decison on what to do with those implementations is made.&lt;/p&gt;</comment>
                            <comment id="12441913" author="niallp" created="Fri, 13 Oct 2006 04:55:09 +0000"  >&lt;p&gt;Closing as fixed.&lt;/p&gt;</comment>
                            <comment id="12455191" author="scolebourne" created="Sun, 3 Dec 2006 18:33:12 +0000"  >&lt;p&gt;I&apos;ve changed IOUtils.copy to return -1 rather than an exception. The problem was that copy() was used from lots of other places, which didn&apos;t care about the number of bytes copied. As such, I reason that the most common use case for copy() is to not care about the number of bytes copied.&lt;/p&gt;

&lt;p&gt;By returning -1 from the int copy methods, the bug is dealt with (the result is now consistent and javadocced). The copyLarge() method exists for those that want accurate counts. While copy() itself will never fail to copy, as in previous versions - the most backwards compatible option.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12342529" name="io-84-files-larger-than-2gb.patch" size="9150" author="niallp" created="Mon, 9 Oct 2006 01:22:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 18 Jul 2006 10:52:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>139537</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            10 years, 1 week, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0smkv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>165135</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>