<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Nov 20 15:25:21 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/IO-355/IO-355.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[IO-355] IOUtils copyLarge() and skip() methods are performance hogs</title>
                <link>https://issues.apache.org/jira/browse/IO-355</link>
                <project id="12310477" key="IO">Commons IO</project>
                    <description>&lt;p&gt;IOUtils.skip(InputStream, long) and IOUtils.skip(Reader, long) have the worst possible performance as they always use read() on the input instead of using skip(). In many cases, using skip() from a subclass of InputStream is much faster than read(), as the skip() can be implemented via a disk seek.&lt;/p&gt;

&lt;p&gt;The IOUtils.skip() methods are also used in the copyLarge() methods that involve a skip.&lt;/p&gt;

&lt;p&gt;Case in point: I have observed this performance degradation with Java 7 on Windows 7. A series of consecutive copyLarge() invocations on a large file on disk that involved skips changed my performance from 30 secs as my baseline to 10 minutes after starting to use IOUtils.copyLarge().&lt;/p&gt;</description>
                <environment></environment>
        <key id="12614198">IO-355</key>
            <summary>IOUtils copyLarge() and skip() methods are performance hogs</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="apache.k.ulib@recursor.net">Uli Bubenheimer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 31 Oct 2012 16:25:24 +0000</created>
                <updated>Tue, 8 Nov 2016 17:59:12 +0000</updated>
                            <resolved>Tue, 16 Apr 2013 20:51:05 +0000</resolved>
                                    <version>2.3</version>
                    <version>2.4</version>
                                    <fixVersion>2.5</fixVersion>
                                    <component>Utilities</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13487987" author="garydgregory" created="Wed, 31 Oct 2012 17:26:52 +0000"  >&lt;p&gt;Can you provide a patch?&lt;/p&gt;</comment>
                            <comment id="13488005" author="apache.k.ulib@recursor.net" created="Wed, 31 Oct 2012 17:45:46 +0000"  >&lt;p&gt;Can&apos;t provide one currently, sorry.&lt;/p&gt;</comment>
                            <comment id="13488154" author="sebb@apache.org" created="Wed, 31 Oct 2012 19:44:55 +0000"  >&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/IO-203&quot; title=&quot;Add skipFully() method for InputStreams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;IO-203&quot;&gt;&lt;del&gt;IO-203&lt;/del&gt;&lt;/a&gt; where the skip() methods were added.&lt;/p&gt;

&lt;p&gt;The problem is that some implementations of skip() - e.g. FileInputStream - allow skipping past EOF.&lt;br/&gt;
That is why we use our own implementation using read() rather than delegating to the implementation class.&lt;/p&gt;

&lt;p&gt;Also, in the case of InputStream#skip(), the Javadoc says it throws:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;IOException - if the stream does not support seek or ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;An unconditional change to using skip from the implementation class could break some applications.&lt;/p&gt;</comment>
                            <comment id="13488179" author="apache.k.ulib@recursor.net" created="Wed, 31 Oct 2012 20:06:36 +0000"  >&lt;p&gt;Yes, the API contract is a little different than the original skip. The problem is that it causes skips and reads with skips to be needlessly slow in many cases. Anyone using these general-purpose APIs suddenly has a millstone on their foot without noticing.&lt;/p&gt;</comment>
                            <comment id="13488193" author="sebb@apache.org" created="Wed, 31 Oct 2012 20:25:22 +0000"  >&lt;p&gt;The API change is deliberate.&lt;/p&gt;

&lt;p&gt;I&apos;ve added Javadoc to note that the performance may not be as good as using skip.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure that it is possible to fix the code without breaking the API and existing applications that depend on the guaranteed skip behaviour that the methods provide.&lt;/p&gt;</comment>
                            <comment id="13488207" author="apache.k.ulib@recursor.net" created="Wed, 31 Oct 2012 20:37:11 +0000"  >&lt;p&gt;Make sure to change the javadoc for all the read and readFully methods as well, as a typical user like myself expects reasonable performance from these methods.&lt;/p&gt;

&lt;p&gt;Seems to set a bad precedent for usability of Apache Commons.&lt;/p&gt;
</comment>
                            <comment id="13488214" author="sebb@apache.org" created="Wed, 31 Oct 2012 20:46:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;Make sure to change the javadoc for all the read and readFully methods as well&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Did you mean skip and skipFully?&lt;br/&gt;
The read and readFully methods use the implementation provided, so I don&apos;t see how they can be less performant.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Seems to set a bad precedent for usability of Apache Commons.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The point of the IOUtils#skip() methods is to guarantee that the correct number of bytes/chars is skipped.&lt;br/&gt;
This does not not appear to be possible using the subclass skip() implementations for the reasons already given.&lt;/p&gt;</comment>
                            <comment id="13488250" author="apache.k.ulib@recursor.net" created="Wed, 31 Oct 2012 21:31:11 +0000"  >&lt;p&gt;Was referring to the wrong methods. I meant the copyLarge() methods that call IOUtils.skip() - Javadoc should say that the skip will not do a seek and may be slower than they expect.&lt;/p&gt;

&lt;p&gt;Preferably I hope you will consider changing the methods to have them call the InputStream.skip() or Reader.skip() directly - I bet that 99.99% of the users of these methods are not interested in the redefined skip() contract, but want convenient methods to copy things from an input to an output while skipping some data. They are most likely not interested in getting a bad deal on performance.&lt;/p&gt;

&lt;p&gt;Or add copyLargeFast() methods or something similar.&lt;/p&gt;
</comment>
                            <comment id="13633338" author="sebb@apache.org" created="Tue, 16 Apr 2013 20:51:05 +0000"  >&lt;p&gt;The Javadoc has been updated to mention the possible slowness of the skip methods.&lt;/p&gt;

&lt;p&gt;If the user wants to use the faster (but possibly inaccurate) skip method, they can do so before calling copyLarge.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 31 Oct 2012 17:26:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>253429</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 31 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dngf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>77729</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>