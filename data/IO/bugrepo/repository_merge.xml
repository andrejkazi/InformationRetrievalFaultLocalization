<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="IO">
	<bug id="1" master="181" duplicate="272" opendate="2008-09-08 18:04:35" fixdate="2011-05-11 22:54:40" resolution="Won't Fix">
		<buginformation>
			<summary>LineIterator should implement Iterable  LineIterator could easily support Iterable</summary>
			<description>org.apache.commons.io.LineIterator does not implement Iterable.  This makes
it impossible to use in certain stylized ways, such as in a new-style for
statement.  Such use is not always desirable (it might temporarily leak a
file descriptor, until the finalizer is called), but should be possible in
situations where it is known to be acceptable. It could be useful to make LineIterator support Iterable&amp;lt;String&amp;gt;, which is very easy to add.</description>
			<version>1.4</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.io.LineIterator.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">272</link>
			<link type="Duplicate" description="duplicates">181</link>
		</links>
	</bug>
	<bug id="2" master="466" duplicate="423" opendate="2014-01-30 22:57:15" fixdate="2015-06-23 06:02:09" resolution="Duplicate">
		<buginformation>
			<summary>FileUtils.directoryContains returns wrong response due to startsWith comparison FilenameUtils.directoryContains assumes separator at end of parent path</summary>
			<description>Consider the following:


File fooDir = new File("/temp/foo");
File fooFile = new File("/temp/foo.txt");
FileUtils.directoryContains(fooDir, fooFile); // returns true, should return false


fooFile is a sibling of fooDir.  fooDir does not contain fooFile.
This is due to the way FilenameUtils.directoryContains is implemented in that this method uses a simple &amp;amp;apos;startsWith&amp;amp;apos; comparison.  A related bug is filed for the FilenameUtils method that I believe should be fixed as well. FilenameUtils.directoryContains("/abc", "/abcd") returns true, while FilenameUtils.directoryContains("/abc/", "/abcd") returns false.
The implementation does a simple checkStartsWith() without taking the separator into consideration.</description>
			<version>2.4</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.io.FileUtilsDirectoryContainsTestCase.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">423</link>
			<link type="Duplicate" description="is duplicated by">466</link>
		</links>
	</bug>
	<bug id="3" master="74" duplicate="150" opendate="2006-01-30 20:35:37" fixdate="2007-12-28 11:02:58" resolution="Fixed">
		<buginformation>
			<summary>Regular expression file name filter implementation Add a RegexpFilenameFilter</summary>
			<description>I&amp;amp;apos;ve written a RegexFilter for commons-io. I&amp;amp;apos;d like to share it with other&amp;amp;apos;s.
Hope there&amp;amp;apos;ll be a JDK 1.4+ branch soon, so this can be applied. It&amp;amp;apos;d be nice to have a filter like this:
RegexpFileFilter reff = new RegexpFileFilter("^did
{1,3}
,+");
WildcardFilter is nice but insufficent.</description>
			<version>1.3.2</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.io.filefilter.FileFilterUtils.java</file>
			<file type="D">org.apache.commons.io.filefilter.RegexFilter.java</file>
			<file type="M">org.apache.commons.io.filefilter.FileFilterTestCase.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">150</link>
			<link type="Duplicate" description="is duplicated by">66</link>
			<link type="dependent" description="depends upon">127</link>
			<link type="Duplicate" description="duplicates">74</link>
		</links>
	</bug>
	<bug id="4" master="74" duplicate="66" opendate="2004-12-18 09:09:13" fixdate="2007-10-13 01:37:54" resolution="Fixed">
		<buginformation>
			<summary>Regular expression file name filter implementation [IO] FilenameFilter that uses regular expressions (upload)</summary>
			<description>I&amp;amp;apos;ve written a RegexFilter for commons-io. I&amp;amp;apos;d like to share it with other&amp;amp;apos;s.
Hope there&amp;amp;apos;ll be a JDK 1.4+ branch soon, so this can be applied. I was in need of a FilenameFilter that observed case-sensetivity and couldn&amp;amp;apos;t
find anything in the existing commons-io library to meet this requirement. So,
I&amp;amp;apos;ve thrown together RegexFileFilter and an accompanying unit test to fill the
void. Please add/apply to commons-io as necessary.
-sp
I don&amp;amp;apos;t see a way to attach files so heres the cut-n-paste:
================================================================================
/*

Copyright 2002-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package org.apache.commons.io.filefilter;

import java.io.File;
import java.io.IOException;
import org.apache.commons.io.filefilter.AbstractFileFilter;
import org.apache.regexp.RE;
import org.apache.regexp.RESyntaxException;
/**

Filters files based on a regular expression that is matched against the
entire filename (including drive, path, and name). Of particular note about
this filter is the ability to express case-sensetivity.

&amp;lt;p&amp;gt;
For example, to retrieve and print all files that contain the string
&amp;lt;code&amp;gt;"xyz"&amp;lt;/code&amp;gt; in the current directory, the regular expression
&amp;lt;code&amp;gt;".xyz."&amp;lt;/code&amp;gt; can be used:
 *
&amp;lt;pre&amp;gt;
File dir = new File(".");
String[] files = dir.list(new RegexFileFilter(".xyz.", true));
for (int i = 0; i &amp;lt; files.length; i++) 
{
 *     System.out.println(files[i]);
 * }
&amp;lt;/pre&amp;gt;

To match using case-insensetivity,
&amp;lt;code&amp;gt;new RegexFileFilter(".xyz.", false)&amp;lt;/code&amp;gt; would be appropriate.

@author Semir Patel
 */
public class RegexFileFilter extends AbstractFileFilter {

    //--------------------------------------------------------------------------
    // Fields
    //--------------------------------------------------------------------------
    /** 

Regular expression matcher.
     */
    private RE regExp;

    //--------------------------------------------------------------------------
    // Constructors
    //--------------------------------------------------------------------------
    /**

Creates a file filter that applies a regular expression to the entire
path + name of a file&amp;amp;apos;s absolute location.

@param regExp Regular expression to match.
@param matchCase Set to true to match using case sensetivity, false
otherwise.
@throws RESyntaxException if the regular expression is invalid.
     */
    public RegexFileFilter(String regExp, boolean matchCase)
        throws RESyntaxException 
{
        
        this.regExp = new RE(regExp, 
            matchCase ? RE.MATCH_NORMAL: RE.MATCH_CASEINDEPENDENT);        
    }

    //--------------------------------------------------------------------------
    // Overrides AbstractFileFilter
    //--------------------------------------------------------------------------
    /**

Accepts by matching the filename against a regular expression.

@throws RuntimeException if an IOException occurs.
@see org.apache.commons.io.filefilter.AbstractFileFilter#accept(
java.io.File)
     */
    public boolean accept(File file) {

        try 
{
            return regExp.match(file.getCanonicalPath());
        }
        catch (IOException e) 
{
            
            // TODO: Follow commons-io existing practice...
            throw new RuntimeException(e);
        }
    }
}
==========================================================================
/*

Copyright 2002-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package org.apache.commons.io.filefilter;

import java.io.File;
import junit.framework.TestCase;
import junit.textui.TestRunner;
import org.apache.commons.io.FileUtils;
import org.apache.regexp.RESyntaxException;
/**

Unit test for 
{@link RegexFileFilterTest}
.

@author Semir Patel
 */
public class RegexFileFilterTest extends TestCase {

    //--------------------------------------------------------------------------
    // Constants
    //--------------------------------------------------------------------------
    /**

Temporary file names that unit tests will use for verification.
     */
    private static final String[] FILENAMES = new String[] 
{
        "EVENT.java",
    }
;

    //--------------------------------------------------------------------------
    // Fields
    //--------------------------------------------------------------------------
    /** 

Test directory for filtering files.
     */
    private File testDir;

    //--------------------------------------------------------------------------
    // Main
    //--------------------------------------------------------------------------
    /** 

Entrypoint.

@param args None recognized.
     */
    public static void main(String[] args)
    {
        TestRunner.run(RegexFileFilterTest.class);
    }

    //--------------------------------------------------------------------------
    // Overrides TestCase
    //--------------------------------------------------------------------------
    /** 

Create a temporary directory with files to use for testing.
     */
    protected void setUp() throws Exception 
{
        
        File tmpDir = new File(System.getProperty("java.io.tmpdir"));
        testDir = File.createTempFile("temp", "", tmpDir);
        testDir.delete();
        
        assertTrue(
            "test dir creation failed for " + testDir.getCanonicalPath(), 
            testDir.mkdirs()); 
        
        for (int i = 0; i &amp;lt; FILENAMES.length; i++)
            FileUtils.writeStringToFile(
                new File(testDir, FILENAMES[i]), "testing" + i, "UTF-8");
    }

    /**

Clean up temporary directory.
     */
    protected void tearDown() throws Exception 
{
        FileUtils.forceDelete(testDir);
        super.tearDown();
    }

    //--------------------------------------------------------------------------
    // Case Insensetive 
    //--------------------------------------------------------------------------
    public void testAccept_CaseInsensetive_NotFound() throws Exception 
{
        IOFileFilter filter = new RegexFileFilter("bogus", false);
        
        String matches[] = testDir.list(filter);
        assertEquals("No matches should have been found", 0, matches.length);
    }
 
    public void testAccept_CaseInsensetive_CaseMatch() throws Exception 
{
        IOFileFilter filter = new RegexFileFilter("EVENT", false);
        
        String matches[] = testDir.list(filter);
        assertEquals("One match should have been found", 1, matches.length);
        assertEquals("One match should have been found", "EVENT.java", matches[0]);
    }
 
    public void testAccept_CaseInsensetive_CaseMismatch() throws Exception 
{
        IOFileFilter filter = new RegexFileFilter("event", false);
        
        String matches[] = testDir.list(filter);
        assertEquals("One match should have been found", 1, matches.length);
        assertEquals("One match should have been found", "EVENT.java", matches[0]);
    }

    //--------------------------------------------------------------------------
    // Case Sensetive 
    //--------------------------------------------------------------------------
    public void testAccept_CaseSensetive_NotFound() throws Exception 
{
        IOFileFilter filter = new RegexFileFilter("bogus", true);
        
        String matches[] = testDir.list(filter);
        assertEquals("No matches should have been found", 0, matches.length);
    }
 
    public void testAccept_CaseSensetive_ExactMatch() throws Exception 
{
        IOFileFilter filter = new RegexFileFilter("EVENT", true);
        
        String matches[] = testDir.list(filter);
        assertEquals("One match should have been found", 1, matches.length);
        assertEquals("One match should have been found", "EVENT.java", matches[0]);
    }
 
    public void testAccept_CaseSensetive_CaseMismatch() throws Exception 
{
        IOFileFilter filter = new RegexFileFilter("event", true);
        
        String matches[] = testDir.list(filter);
        assertEquals("No matches should have been found", 0, matches.length);
    }
 
    //--------------------------------------------------------------------------
    // Negative Unit Tests
    //--------------------------------------------------------------------------
    /**

Make sure constructor blows up on invalid regular expressions.
     */
    public void testConstructor_Invalid_RegExp() {

        try 
{
            RegexFileFilter filter = new RegexFileFilter("*", true);
            fail("Expected exception on invalid regular expression");
        }
        catch (RESyntaxException rese) 
{
            // Success
        }
    }
}</description>
			<version>1.3.2</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.io.filefilter.FileFilterUtils.java</file>
			<file type="D">org.apache.commons.io.filefilter.RegexFilter.java</file>
			<file type="M">org.apache.commons.io.filefilter.FileFilterTestCase.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">150</link>
			<link type="Duplicate" description="is duplicated by">66</link>
			<link type="dependent" description="depends upon">127</link>
			<link type="Duplicate" description="duplicates">74</link>
		</links>
	</bug>
	<bug id="5" master="132" duplicate="79" opendate="2006-01-02 20:04:55" fixdate="2008-05-30 15:55:20" resolution="Fixed">
		<buginformation>
			<summary>File Listener/Monitor [IO][PATCH] - file and directory pollers</summary>
			<description>Commons JCI has a "fam" (file alteration monitor) module[1] which provides a listener for file and directory create/change/delete events. I have done some work refactoring the JCI implementation and propose adding to to Commons IO. There is already an existing request/propsal to add similar functionality in IO-79 from Jim Harrington (which includes code).
There are IMO two main differences (IMO improvements) in this implementation over exsiting JCI fam module:
1) It uses a matching array technique to compare previous and current directory contents which minimizes object creation
2) FileFilters can be specified to monitor only portions of the file system, ignoring files/directories of no interest. This is more efficient and reduces the amount of noise from un-wanted file/directory events
From a quick look at IO-79, the above also applies to that proposal. Additionally IMO the solution in IO-79 would benefit from been broken out from the two DirectoryPoller and FilePoller artifacts.
There are also some changes to the API specified in JCI&amp;amp;apos;s fam:
1) FileObserver (FilesystemAlterationObserver in fam) has additional init() and destroy() methods
2) FileMonitor (FilesystemAlterationMonitor in fam) has addObserver/removeObserver methods rather than addListener/removeListener methods. The issue (IMO) with fam is that the monitor is fixed to the FilesystemAlterationObserverImpl implementation, rather than any FilesystemAlterationObserver implementation. Also the ability to specify file filters means that there is a need to be able to add more than one observer for the same root directory.
[1] http://svn.apache.org/repos/asf/commons/proper/jci/trunk/fam/ Add classes that will monitor a file/directory and notify registered observers 
creation, deletion and content change events occur.  Source is in the 
attachement file_directory_poller.jar as they are all new files.</description>
			<version>1.1</version>
			<fixedVersion>2.0</fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.apache.commons.io.monitor.FilesystemObserverTestCase.java</file>
			<file type="D">org.apache.commons.io.monitor.CollectionFilesystemListener.java</file>
			<file type="D">org.apache.commons.io.monitor.FilesystemListenerAdaptor.java</file>
			<file type="D">org.apache.commons.io.monitor.FilesystemEntry.java</file>
			<file type="D">org.apache.commons.io.monitor.FilesystemMonitor.java</file>
			<file type="D">org.apache.commons.io.monitor.FilesystemObserver.java</file>
			<file type="M">org.apache.commons.io.monitor.AbstractMonitorTestCase.java</file>
			<file type="D">org.apache.commons.io.monitor.FilesystemListener.java</file>
			<file type="D">org.apache.commons.io.monitor.FileSystemMonitorTestCase.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">79</link>
			<link type="Reference" description="relates to">55</link>
			<link type="Reference" description="relates to">79</link>
			<link type="Duplicate" description="duplicates">132</link>
			<link type="Reference" description="is related to">132</link>
		</links>
	</bug>
	<bug id="6" master="166" duplicate="252" opendate="2008-04-25 09:47:57" fixdate="2010-10-14 00:58:08" resolution="Fixed">
		<buginformation>
			<summary>Fix URL decoding in FileUtils.toFile() NumberFormatException from FileUtils.toFile method</summary>
			<description>The sequence "%2520" should decode to "%20". Certain strings can cause the org.apache.commons.io.FileUtils.toFile(URL url) method to call Integer.parseInt with an invalid argument and thus throw a NumberFormatException:
Exception in thread "main" java.lang.NumberFormatException: For input string: "%2"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
	at java.lang.Integer.parseInt(Integer.java:449)
	at org.apache.commons.io.FileUtils.toFile(FileUtils.java:476)
One example of such a string: "both%20are%20100%20%25%20true"</description>
			<version>1.4</version>
			<fixedVersion>2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.io.FileUtilsTestCase.java</file>
			<file type="M">org.apache.commons.io.FileUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">252</link>
			<link type="Reference" description="is related to">13</link>
			<link type="Duplicate" description="duplicates">166</link>
		</links>
	</bug>
	<bug id="7" master="197" duplicate="339" opendate="2009-02-20 17:52:34" fixdate="2013-05-16 14:38:59" resolution="Fixed">
		<buginformation>
			<summary>BoundedInputStream MaxBytesInputStream to limit size of bytes read</summary>
			<description>Apache Jackrabbit has an interesting InputStream implementation that reads up to a specified amount of bytes from an underlying stream, and then acts as if the end of the stream was reached:
http://svn.apache.org/repos/asf/jackrabbit/trunk/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/io/BoundedInputStream.java
Similar classes are also found in other projects:
http://svn.mucommander.com/cgi-bin/viewvc.cgi/trunk/source/com/mucommander/io/BoundedInputStream.java?content-type=text%2Fplain&amp;amp;view=co
https://www.sunspotworld.com/docs/Purple/javadoc/com/sun/spot/peripheral/BoundedInputStream.html I wrote an input stream that stops when it reaches a configured size in bytes.  I found it useful for applications that download web pages and images, but want to enforce a max size to avoid memory problems for extremely large pages/images.
I was thinking that this class is generic and useful enough to include in the commons-io distribution.  Please consider it, and if it isn&amp;amp;apos;t appropriate for inclusion here, please recommend a better place to open source and share it.



package org.apache.commons.io.input;

import java.io.IOException;
import java.io.InputStream;

/**
 * An input stream that will end when the amount of bytes read reaches
 * the configured amount of maxBytes.
 * This is useful for preventing OutOfMemoryExceptions when downloading
 * very large files in cases where getting partial content is acceptable.
 * @author Ken Weiner
 */
public class MaxBytesInputStream extends CountingInputStream {
    private long maxBytes;

    public MaxBytesInputStream(InputStream is, long maxBytes) {
        super(is);
        this.maxBytes = maxBytes;
    }

    @Override
    protected void afterRead(int n) {
        super.afterRead((int) Math.min(n, this.maxBytes - getByteCount()));
    }

    @Override
    public int read() throws IOException {
        if (getByteCount() &amp;lt; this.maxBytes) {
            return super.read();
        }
        return -1;
    }

    @Override
    public int read(byte[] b) throws IOException {
        if (getByteCount() &amp;lt; this.maxBytes) {
            return super.read(b);
        }
        return -1;
    }

    @Override
    public int read(byte[] b, int off, int len) throws IOException {
        if (getByteCount() &amp;lt; this.maxBytes) {
            return super.read(b, off, len);
        }
        return -1;
    }
}

</description>
			<version>2.4</version>
			<fixedVersion>2.0</fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.io.input.BoundedInputStream.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">339</link>
			<link type="Reference" description="is related to">236</link>
			<link type="Duplicate" description="duplicates">197</link>
		</links>
	</bug>
</bugrepository>