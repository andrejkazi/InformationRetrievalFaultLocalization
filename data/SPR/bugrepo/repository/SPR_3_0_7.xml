<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SPR">
	<bug id="7931" opendate="2011-02-02 10:18:28" fixdate="2011-06-14 02:52:15" resolution="Fixed">
		<buginformation>
			<summary>Checking for @XmlRootElement annotation should be made optional in Jaxb2Marshaller </summary>
			<description>The Jaxb2Marshaller is only supporting classes annotated with @XmlRootElement currently and there&amp;amp;apos;s no way to override that behaviour as supportsInternal(Class, boolean) is private. There are cases when you want to (un)marshal classes that are @XmlType annotated only. Especially when working with XJC, you get the @XmlRootElement annotation only for classes that have their xsd:simpleType or xsd:complexType nested inside the xsd:element declaration (see this blog entry for why that&amp;amp;apos;s the case). However, if you have a type that can be reused and used as a root element&amp;amp;apos;s type, XJC will not create the @XmlRootElement annotation but rather a factory method inside the ObjectFactory class. To get those classes (un)marshalled, you currently have to copy large parts of Jaxb2Marshaller as there&amp;amp;apos;s no way to disable the check for the annotation. So it would be cool if this was configurable through a bean property or at least changeable so that a subclass could potentially call supportsInternal(clazz, false).</description>
			<version>3.0.7</version>
			<fixedVersion>3.1 RC1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9742</link>
		</links>
	</bug>
	<bug id="8766" opendate="2011-10-12 13:15:51" fixdate="2011-10-17 12:55:57" resolution="Duplicate">
		<buginformation>
			<summary>Impossible to set SimpleMappingExceptionResolver.statusCodes</summary>
			<description>Bean property &amp;amp;apos;statusCodes&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
indeed :
public void setStatusCodes(Properties statusCodes)
Map&amp;lt;String, Integer&amp;gt; getStatusCodes()
Probably a regression due to SPR-8452. Works with 3.1.0.M2. Maybe works on jdk7 as Introspector was modified.
Why not make statusCodes a Map instead of Properties?</description>
			<version>3.1 RC1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.handler.SimpleMappingExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8759</link>
		</links>
	</bug>
	<bug id="8759" opendate="2011-10-12 06:26:46" fixdate="2011-11-02 12:57:11" resolution="Complete">
		<buginformation>
			<summary>SimpleMappingExceptionResolver: setStatusCodes getter return not same as setter. Makes override impossible</summary>
			<description>The getter return type (Map) is not the same as setter (Properties). Since Spring 3.1, this is a problem. I get 
org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;statusCodes&amp;amp;apos; of bean class [nl.project.interceptor.MySimpleExceptionResolver]: Bean property &amp;amp;apos;statusCodes&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1057)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:920)
This makes it impossible to configure properties for &amp;amp;apos;statusCodes&amp;amp;apos; in dispatcher-servlet.xml</description>
			<version>3.1 RC1</version>
			<fixedVersion>3.1 RC2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.handler.SimpleMappingExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8766</link>
		</links>
	</bug>
	<bug id="8808" opendate="2011-10-31 14:11:19" fixdate="2011-11-28 13:39:35" resolution="Complete">
		<buginformation>
			<summary>Allow @Configuration classes to self-@ComponentScan</summary>
			<description>I am using AnnotationConfigWebApplicationContext and XML-free testing support with @ContextConfiguration(classes=...). When pointed @Configuration class contains @ComponentScan with a package containing that class:






package com.example.foo;









@Configuration




@ComponentScan(basePackages = "com.example.foo")




public class Config { }






I get unexpected exception:






org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name &amp;amp;apos;config&amp;amp;apos; for bean class [com.example.foo.Config] conflicts with existing, non-compatible bean definition of same name and class [com.example.foo.Config]






While I understand why it happens, IMHO Spring should handle this case and simply ignore @Configuration found in scanned package if it has already been provided in AnnotationConfigWebApplicationContext.
Test case attached. On branch master you&amp;amp;apos;ll find a test case failing, branch fix fixes the problem by simply @Config to another package.</description>
			<version>3.1 RC1</version>
			<fixedVersion>3.1 RC2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.config.annotation.EnableWebMvc.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8880</link>
			<link type="Relate" description="relates to">8307</link>
		</links>
	</bug>
	<bug id="8880" opendate="2011-11-29 00:38:31" fixdate="2011-11-29 10:40:28" resolution="Duplicate">
		<buginformation>
			<summary>Default @ComponentScan&amp;apos;s exclude filter to exclude @Configuration annotated classes</summary>
			<description>Suppose you have an application with a base package of com.acme with an @Configuration class located in this package. Now suppose you use this configuration class as basePackageClass inside @ComponentScan. This will result in an exception saying the class is registered twice. So you pretty much end up with always adding this exclude.
Would it make sense to default the excludeFilters attribute of the @ComponentScan annotation as follows?






@Filter(type = FilterType.ANNOTATION, value = Configuration.class)





</description>
			<version>3.1 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.config.annotation.EnableWebMvc.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8808</link>
		</links>
	</bug>
	<bug id="8887" opendate="2011-11-30 04:57:20" fixdate="2011-12-21 04:37:11" resolution="Duplicate">
		<buginformation>
			<summary>QuartzJobBean throws IncompatibleClassChangeError when using Quartz 2.x</summary>
			<description>This is the exception we get when using the latest Spring 3.1 RC2 together with Quartz 2.1.1
[ERROR] 2011-11-29 14:33:57 [JobRunShell-scheduler_Worker-1] - Job DEFAULT.deviceIndexerJob threw an unhandled Exception: 
java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
[ERROR] 2011-11-29 14:33:57 [JobRunShell-scheduler_Worker-2] - Job DEFAULT.shortCodeIndexerJob threw an unhandled Exception: 
java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
The source for QuartzJobBean does not seem to indicate any kind of problem. Even though JobExecutionContext was a class in Quartz 1.x and is now an interface in Quartz 2.x, the methods invoked on it are present in both.
The problem is that the Spring binary has been compiled against Quartz 1.x, and changing a class into an interface (or viceversa) is an incompatible change according to the Java spec, so we get IncompatibleClassChangeError even if the source compiles fine against both Quartz versions.
Recompiling QuartzJobBean against Quartz 2.x solves the issue, however this is an undesirable solution. I guess the solution would be to invoke the offending methods using reflection.
Our workaround was simply creating an alternative MethodInvokingJobDetailFactoryBean simplified for our use and compiled directly against Quartz 2.x, but this should be solved for the general public.
BTW, SPR-8435 is somehow related but is clearly a different issue, which in fact has already been solved in 3.1 RC2</description>
			<version>3.1 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.java</file>
			<file type="M">org.springframework.scheduling.quartz.QuartzJobBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8889</link>
		</links>
	</bug>
	<bug id="8986" opendate="2012-01-03 14:53:36" fixdate="2012-01-20 07:28:10" resolution="Fixed">
		<buginformation>
			<summary>Add the ability to Scan Packages for JAXB Marshalling (java example provided)</summary>
			<description>Hi,
In our application we have a rapidly growing number of JAXB2 annotated classes. It is a right pain to add these classes manually to the "classesToBeBound" property in the Jaxb2Marshaller. Given that other components (I&amp;amp;apos;m looking at you Hibernate : AnnotationSessionFactoryBean) have the ability to automatically add classes from packages that match annotations, why not then for the Jaxb2Marshaller (having to key in the classes manually is so old skool).
I&amp;amp;apos;ve extended Jaxb2Marshaller (file attached) that scans on the classpath for appropriately annotated classes. Please do review and I hope that this can be incorporated into the next release. I&amp;amp;apos;m happy to make changes to the codebase if required to bring it up to Spring coding standards.
It&amp;amp;apos;s a pity that afterPropertiesSet is marked as Final in Jaxb2Marshaller since I can&amp;amp;apos;t override that method to set up the setClassesToBeBound before then calling the super afterPropertiesSet. Currently as the code stands, I have to provide a dummy setClassesToBeBound and setLazyInit to be true. This dummy is then replaced by overriding the getJaxbContext. I think this needs rewriting.
An example of use:






&amp;lt;bean id="marshaller" class="foo.bar.AnnotationJaxb2Marshaller"&amp;gt;




    &amp;lt;property name="lazyInit" value="true" /&amp;gt;




    &amp;lt;property name="classesToBeBound"&amp;gt;




       &amp;lt;list&amp;gt;




           &amp;lt;value&amp;gt;foo.bar.Class&amp;lt;/value&amp;gt;




       &amp;lt;/list&amp;gt;




    &amp;lt;/property&amp;gt;




    &amp;lt;property name="packagesToScan"&amp;gt;




        &amp;lt;list&amp;gt;




            &amp;lt;value&amp;gt;foo.bar.jaxb.model&amp;lt;/value&amp;gt;




        &amp;lt;/list&amp;gt;




    &amp;lt;/property&amp;gt;




&amp;lt;/bean&amp;gt;






=david=</description>
			<version>3.1 GA</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.client.HttpComponentsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.SimpleClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.BufferingClientHttpResponseWrapper.java</file>
			<file type="M">org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.java</file>
			<file type="M">org.springframework.http.client.ClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.HttpStatusTests.java</file>
			<file type="M">org.springframework.http.HttpStatus.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9197</link>
			<link type="Duplicate" description="is duplicated by">9206</link>
		</links>
	</bug>
	<bug id="9068" opendate="2012-01-29 09:46:16" fixdate="2012-01-30 06:08:41" resolution="Duplicate">
		<buginformation>
			<summary>Implementation of HttpStatus as an enumeration precludes other status codes</summary>
			<description>I&amp;amp;apos;m trying to implement RFC 2324 but cannot return HTTP response code 418 because it&amp;amp;apos;s not defined in the HttpStatus enumeration.
More generally, the enumeration of specific status values precludes the use of any others.</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.HttpStatus.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6752</link>
		</links>
	</bug>
	<bug id="9074" opendate="2012-01-30 23:00:17" fixdate="2012-02-02 09:01:27" resolution="Duplicate">
		<buginformation>
			<summary>Spring MVC resources handler generates a 500 internal error when accessing a directory resource</summary>
			<description>Would expect a 404 not a 500. Here is an example:






java.io.FileNotFoundException: Could not open ServletContext resource [/static/libs/webshims/1.8.7]




	at org.springframework.web.context.support.ServletContextResource.getInputStream(ServletContextResource.java:118)




	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:240)




	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:141)




	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49)




	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900)





</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.context.support.ServletContextResource.java</file>
			<file type="M">org.springframework.web.portlet.context.PortletContextResource.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">9067</link>
		</links>
	</bug>
	<bug id="9067" opendate="2012-01-29 06:09:07" fixdate="2012-02-07 01:41:50" resolution="Complete">
		<buginformation>
			<summary>ServletContextResource.isReadable() returns "true" for directories</summary>
			<description>Consider this configuration:






&amp;lt;mvc:resources mapping="/static/**" location="/WEB-INF/resources/immutable/"/&amp;gt;






The resource directory /WEB-INF/resources/immutable/ contains several files and subdirectories. One subdirectory is called images.
A browser request to /static/nonexistingfile.png results in a 404 HTTP error. But a request to /static/images (existing directory, without a file name specified) results in a FileNotFoundException:






java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/resources/immutable/images]




        at org.springframework.web.context.support.ServletContextResource.getInputStream(ServletContextResource.java:118) ~[spring-web-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:240) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:141) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) ~[servlet-api.jar:na]




        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) ~[servlet-api.jar:na]






I think the getResource(HttpServletRequest) method in ResourceHttpRequestHandler should also check if the requested resources is a File.
On a high volume website this can cause tons of FileNotFoundExceptions due to robot visits. This is why I classified this issue with major priority.</description>
			<version>3.1 GA</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.context.support.ServletContextResource.java</file>
			<file type="M">org.springframework.web.portlet.context.PortletContextResource.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9074</link>
		</links>
	</bug>
	<bug id="9030" opendate="2012-01-16 07:32:16" fixdate="2012-02-08 07:28:35" resolution="Complete">
		<buginformation>
			<summary>javax.Provider Spring support doesn&amp;apos;t work for collections</summary>
			<description>Let&amp;amp;apos;s have this following class:






@Component




public class TestClass {




    private List&amp;lt;RelatedClass2&amp;gt; propertyRelatedClasses;














    public List&amp;lt;RelatedClass2&amp;gt; getPropertyRelatedClasses() {




        return propertyRelatedClasses;




    }














    @Inject




    public void setPropertyRelatedClasses(Provider&amp;lt;List&amp;lt;RelatedClass2&amp;gt;&amp;gt; propertyRelatedClassesProvider) {




        this.propertyRelatedClasses = propertyRelatedClassesProvider.get();




    }




}









I want to inject a {{List}} of all existing instances of type {{RelatedClass2}} using a Provider. What I get is:











...
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 15: relatedClass1, 2b, 2a, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalRequiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalPersistenceAnnotationProcessor, org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0, environment, systemProperties, systemEnvironment, importRegistry, messageSource, applicationEventMulticaster
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:800)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory.getObject(DefaultListableBeanFactory.java:1023)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProvider.get(DefaultListableBeanFactory.java:1038)
        at com.gooddata.connectors.restapi.controller.springtest.TestClass.setPropertyRelatedClasses(TestClass.java:25)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)











The 





2a





 and 





2b











 beans are of type RelatedClass2.</description>
			<version>3.1 GA</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.MethodParameter.java</file>
			<file type="M">org.springframework.beans.factory.config.DependencyDescriptor.java</file>
			<file type="M">org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.java</file>
			<file type="M">org.springframework.beans.factory.support.DefaultListableBeanFactory.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9092</link>
		</links>
	</bug>
	<bug id="9092" opendate="2012-02-06 03:45:24" fixdate="2012-02-09 06:42:25" resolution="Duplicate">
		<buginformation>
			<summary>Injecting / autowiring collection provider doen&amp;apos;t work</summary>
			<description>I implement contributions for my application and I found inconsistent behaviour for Provider/ObjectFactory. There are defined classes for different contributions:






@Contribute("rest")




@Named("bean-contrib2a")




public class Contrib2A implements ContribRest { ... }









@Contribute("rest")




@Named("bean-contrib2b")




public class Contrib2B { ... }









@Contribute("non-rest")




@Named("bean-contrib3a")




public class Contrib3A implements ContribRest { ... }









@Contribute("non-rest")




@Named("bean-contrib3b")




public class Contrib3B { ... }






Code to show injecting scenario looks like that:






@Named("applicationRest")




public class ApplicationRest extends Application {









    private List&amp;lt;ContribRest&amp;gt; contrib2;




    private List&amp;lt;ContribRest&amp;gt; contrib4;









    private ObjectFactory&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; ofContrib2;




    private ObjectFactory&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; ofContrib4;









    private Provider&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; pvdContrib2;




    private Provider&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; pvdContrib4;









    @Inject




    public void setContrib2(@Contribute("rest") List&amp;lt;ContribRest&amp;gt; contrib2) {




        this.contrib2 = contrib2;




    }









    @Autowired(required = false)




    public void setContrib4(@Contribute("other") List&amp;lt;ContribRest&amp;gt; contrib4) {




        this.contrib4 = contrib4;




    }









    @Inject




    public void setOfContrib2(@Contribute("rest") ObjectFactory&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; ofContrib2) {




        this.ofContrib2 = ofContrib2;




    }









    @Autowired(required = false)




    public void setOfContrib4(@Contribute("other") ObjectFactory&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; ofContrib4) {




        this.ofContrib4 = ofContrib4;




    }









    @Inject




    public void setPvdContrib2(@Contribute("rest") Provider&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; pvdContrib2) {




        this.pvdContrib2 = pvdContrib2;




    }









    @Autowired(required = false)




    public void setPvdContrib4(@Contribute("other") Provider&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; pvdContrib4) {




        this.pvdContrib4 = pvdContrib4;




    }






Injection finish with that result:






INFO contrib2=[Contrib2A@51a19458] -




INFO contrib4=null




ERROR ofContrib2=No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 2: [bean-contrib2b, bean-contrib2a]




INFO ofContrib4=null




ERROR pvdContrib2=No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 2: [bean-contrib2b, bean-contrib2a] - 




INFO pvdContrib4=null











Injecting list looks correct - classes with other contribution and type are filtered and only Contrib2A is injected. 
Unfortunately injecting Provider or ObjectFactory tries to inject List a not all beans for this list and it looks as a bug.
Maybe you can provide alternative way to how can I provide this list with all instances contributed (scanned) without manually defining list in XML.</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.MethodParameter.java</file>
			<file type="M">org.springframework.beans.factory.config.DependencyDescriptor.java</file>
			<file type="M">org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.java</file>
			<file type="M">org.springframework.beans.factory.support.DefaultListableBeanFactory.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">9030</link>
		</links>
	</bug>
	<bug id="8992" opendate="2012-01-04 09:24:44" fixdate="2012-02-09 10:33:21" resolution="Complete">
		<buginformation>
			<summary>@ActiveProfiles are not cascaded down to contexts loaded via @ImportResource</summary>
			<description>Given:






@RunWith(SpringJUnit4ClassRunner.class)




@ActiveProfiles(profiles = "test")




@ContextConfiguration(classes = MyClass.class)




@ImportResource("/appContext.xml")




public class MyClass {




  @Autowired




  private ProfileSpecificResource resource;









  @Bean




  public String aBean() {...}









  @Test




  public void aTest() {...}




}






Spring is not cascading/passing through the active profile(s) down to the imported resource (where profile specific beans are defined).
If the tests are invoked with the -Dspring.profiles.active=test argument, the tests run as expected.</description>
			<version>3.1 GA</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.context.annotation.ConfigurationClassPostProcessor.java</file>
			<file type="M">org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9046</link>
			<link type="Relate" description="relates to">8393</link>
		</links>
	</bug>
	<bug id="8889" opendate="2011-11-30 15:41:04" fixdate="2012-02-14 05:03:55" resolution="Complete">
		<buginformation>
			<summary>QuartzJobBean doesn&amp;apos;t work with Quartz 2.0 at runtime</summary>
			<description>Having put RC2 to work and testing out the fix for SPR-8775 I now realise there&amp;amp;apos;s another problem. When the job I configured fires, I get the following exception2011-11-30 23:30:00,073 ERROR [JobRunShell] Job DEFAULT.job.reload.profiles threw an unhandled Exception: 
java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
        at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
        at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
2011-11-30 23:30:00,075 ERROR [ErrorLogger] Job (DEFAULT.job.reload.profiles threw an exception.
org.quartz.SchedulerException: Job threw an unhandled exception. [See nested exception: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected]
        at org.quartz.core.JobRunShell.run(JobRunShell.java:224)
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
Caused by: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
        at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
        at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
        ... 1 more
Configuration for the job is:&amp;lt;bean id="profileService.schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"&amp;gt;
		&amp;lt;property name="triggers"&amp;gt;
			&amp;lt;list&amp;gt;
                &amp;lt;bean class="org.quartz.impl.triggers.CronTriggerImpl"&amp;gt;
                    &amp;lt;property name="name" value="job.reload.profiles.trigger" /&amp;gt;
                    &amp;lt;property name="jobName" value="job.reload.profiles"/&amp;gt;
                    &amp;lt;property name="jobGroup" value="DEFAULT" /&amp;gt;
                    &amp;lt;!-- run every 10 mins --&amp;gt;
                    &amp;lt;property name="cronExpression" value="0 0,10,20,30,40,50 * * * ?" /&amp;gt;
                &amp;lt;/bean&amp;gt;
			&amp;lt;/list&amp;gt;
		&amp;lt;/property&amp;gt;
        &amp;lt;property name="jobDetails"&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"&amp;gt;
                    &amp;lt;property name="targetObject" ref="profileService"/&amp;gt;
                    &amp;lt;property name="targetMethod" value="reloadProfiles"/&amp;gt;
                    &amp;lt;property name="concurrent" value="false"/&amp;gt;
                    &amp;lt;property name="name" value="job.reload.profiles"/&amp;gt;
                    &amp;lt;property name="group" value="DEFAULT" /&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
	&amp;lt;/bean&amp;gt;
I assume that this is a build issue for the Spring framework? Will there need to be a separate package and so on for Quartz 2, like Hibernate4</description>
			<version>3.1 RC2</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.java</file>
			<file type="M">org.springframework.scheduling.quartz.QuartzJobBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8887</link>
		</links>
	</bug>
	<bug id="9046" opendate="2012-01-23 05:22:36" fixdate="2012-02-20 08:10:46" resolution="Duplicate">
		<buginformation>
			<summary>@ActiveProfiles not taken into account for @ImportResource-imported XML context definitions from an @Configuration context definition</summary>
			<description>When using @ActiveProfiles to activate certain profiles in a test that uses AnnotationConfigContextLoader to load a @Configuration context definition which imports XML application context definitions using @ImportResource, the active profiles are not considered when loading the XML context definition.
See the attached files for a test reproducing the problem. This test fails with the following error:
org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [test.ContextLoadingProblem$Bar] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: 
{@org.springframework.beans.factory.annotation.Autowired(required=true)}

Note that if you use XML throughout (i.e. import one XML context definition from another), the problem does not arise.</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.context.annotation.ConfigurationClassPostProcessor.java</file>
			<file type="M">org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8992</link>
			<link type="Relate" description="relates to">8393</link>
		</links>
	</bug>
	<bug id="9197" opendate="2012-03-04 03:13:44" fixdate="2012-03-08 09:09:53" resolution="Duplicate">
		<buginformation>
			<summary>HTTP response code 308</summary>
			<description>RestTemplate cannot return HTTP response code 308 because it&amp;amp;apos;s not defined in the HttpStatus enumeration.
It&amp;amp;apos;s required for resumable POST/PUT HTTP requests in HTTP/1.0 (http://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal)</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.client.HttpComponentsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.SimpleClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.BufferingClientHttpResponseWrapper.java</file>
			<file type="M">org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.java</file>
			<file type="M">org.springframework.http.client.ClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.HttpStatusTests.java</file>
			<file type="M">org.springframework.http.HttpStatus.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8986</link>
		</links>
	</bug>
	<bug id="9051" opendate="2012-01-24 06:35:33" fixdate="2012-05-11 15:50:06" resolution="Cannot Reproduce">
		<buginformation>
			<summary>spring-test allows you to reference configuration classes that aren&amp;apos;t annotated with @Configuration</summary>
			<description>When a @ContextConfiguration test class references a config class missing a @Configuration annotation, @Bean dependencies are wired successfully but the bean lifecycle is not applied (no init methods are invoked, for example). Adding the missing @Configuration annotation solves the problem, however the problem and solution isn&amp;amp;apos;t obvious since wiring/injection appeared to work.
It would be better if an integration test failed-fast if you reference a config class with no @Configuration annotation.</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.test.context.junit4.profile.importresource.DefaultProfileAnnotationConfigTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9479</link>
			<link type="Relate" description="is related to">9425</link>
			<link type="Relate" description="is related to">10369</link>
			<link type="Relate" description="is related to">10971</link>
			<link type="Supersede" description="is superseded by">9401</link>
		</links>
	</bug>
	<bug id="9742" opendate="2012-08-30 03:05:37" fixdate="2012-09-05 02:52:19" resolution="Duplicate">
		<buginformation>
			<summary>Jaxb2Marshaller should support JaxbElement&lt;T&gt;</summary>
			<description>





private boolean supportsInternal(Class&amp;lt;?&amp;gt; clazz, boolean checkForXmlRootElement) {






requires elements with @XmlRootElement - it should check for JaxbElement/support instances too, which carry the QName which provides the same info as a XmlRootElement.</description>
			<version>3.0.7</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7931</link>
		</links>
	</bug>
	<bug id="10026" opendate="2012-11-24 14:29:05" fixdate="2012-11-26 08:28:25" resolution="Duplicate">
		<buginformation>
			<summary>Spring eats @PathVariable part after last dot</summary>
			<description>@RequestMapping(value = "/
{var}
", method = RequestMethod.GET)
public String show(@PathVariable String var, Model m) {
    System.out.println(var);
}
for url: "/hello.anything" outputs "hello"
for url: "/hello.anything.else" outputs "hello.anything"</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.HeadersRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfo.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6164</link>
		</links>
	</bug>
</bugrepository>