<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SPR">
	<bug id="22" master="6902" duplicate="7190" opendate="2010-02-24 02:46:12" fixdate="2011-01-12 01:33:59" resolution="Fixed">
		<buginformation>
			<summary>@ResponseBody does not work with @ExceptionHandler AnnotationMethodHandlerAdapter and AnnotationMethodHandlerExceptionResolver should supports MappingJacksonHttpMessageConverter by default</summary>
			<description>When this method is executed






@ExceptionHandler




@ResponseBody




public String dummyExceptionHandler(Exception e) {




    return e.getMessage();




}






Spring mvc tries to resolve the view using the method output --&amp;gt; 404.
As the method is annotated with @ResponseBody, it should directly write the method output to the response. The AnnotationMethodHandlerAdapter and AnnotationMethodHandlerExceptionResolver should supports MappingJacksonHttpMessageConverter (and other HttpMessageConverter, such as Jaxb2RootElementHttpMessageConverter etc if the libraries are found in classpath) by default, to make it consistent with the class AnnotationDrivenBeanDefinitionParser that used internally for mvc:annotation-driven / &amp;gt;</description>
			<version>3.0.2</version>
			<fixedVersion>3.1 M1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser.java</file>
			<file type="M">org.springframework.web.servlet.config.MvcNamespaceTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">7190</link>
			<link type="Duplicate" description="is duplicated by">7820</link>
			<link type="Related" description="is related to">6961</link>
			<link type="Duplicate" description="duplicates">6902</link>
		</links>
	</bug>
	<bug id="35" master="7278" duplicate="8124" opendate="2010-06-10 20:05:30" fixdate="2012-06-19 03:18:55" resolution="Won't Fix">
		<buginformation>
			<summary>@ResponseBody usage limitations @ExceptionHandler doesn&amp;apos;t handle exceptions from other controllers</summary>
			<description>The recommended way to develop REST-style webservices is the usage of @ResponseBody annotation and HttpMessageConverter instead of generating a model and a view (ContentNegotiatingViewResolver etc.).
But there are some limitations, that make things hard to handle:

ExceptionResolver support
	
@RequestBody is only supported with @ExceptionHandler annotation. I need a centralized exception handling to generate a special error object as the return value. So I must wrote a method in each controller class to delegate to the centralized exception handler. I think the ExceptionResolver-interface is more like an AOP-approach, with no glue code.
ExceptionResolver also have some nice standard implementations like SimpleMappingExceptionResolver, where I can handle the returned HTTP status code very easy. This is also not supported by @ExceptionHandler out of the box


&amp;amp;apos;useNotAcceptableStatusCode&amp;amp;apos; from ContentNegotiatingViewResolver (so for some features, I must also configure view-handling)
	
simple and easy to use attribute to enable NOT_ACCEPTABLE Http Status code


missing option for enabling global @ResponseBody-like handling instead of annotate all methods (e.g. in AnnotationMethodHandlerAdapter)

I also would recommend the full HttpMessageConverter way (@RequestBody &amp;amp; @ResponseBody) without view handling, so it would be nice, if @ResponseBody has fewer limitations. Additionaly it would be great, if the documentation have some notes about the recommended way for webservice-only REST-style applications (with hints to the limitations above) The fact that a method annotated with @ExceptionHandler can only handle exceptions from the same controller is a restrictive issue. The better behavior would be if the annotated method would be able to handle all exceptions of that particular type, regardless of their source. </description>
			<version>3.0.2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8124</link>
			<link type="Related" description="is related to">7353</link>
			<link type="Duplicate" description="duplicates">7278</link>
			<link type="Duplicate" description="is duplicated by">8178</link>
		</links>
	</bug>
	<bug id="54" master="6184" duplicate="7769" opendate="2008-11-05 19:05:42" fixdate="2011-06-01 09:07:08" resolution="Complete">
		<buginformation>
			<summary>Provide TestContext support for @Configuration classes SpringJUnit4ClassRunner is not compatible with java context configuration</summary>
			<description>Currently, JavaConfig integrates with the TestContext framework via its ContextLoader implementation, JavaConfigContextLoader:






@RunWith(SpringJUnit4ClassRunner.class)




@ContextConfiguration(locations="com.bank.TransferAppConfig",




                      loader=JavaConfigContextLoader.class)




public class TransferServiceTests {




    // @Test methods ...




}






This integration works well enough but is not refactoring-friendly due to the requirement that @ContextConfiguration imposes that locations must be a String[]. It forces the fully-qualified class name to be expressed as a string, when it would clearly be superior to be able to pass it around by Class literal.
Implementing this change would require a change to core, either by adding an attribute to @ContextConfiguration that takes a Class[] (not likely), or otherwise devising a way of proving a customized annotation (e.g., @JavaConfigContextConfiguration). have test:






@RunWith(SpringJUnit4ClassRunner.class)




@Import(SomeTestContext.class)




public class SomeTest {




 ....




}






get exception:






Caused by: java.lang.IllegalArgumentException: Can not load an ApplicationContext with a NULL &amp;amp;apos;contextLoader&amp;amp;apos;. Consider annotating your test class with @ContextConfiguration.




	at org.springframework.util.Assert.notNull(Assert.java:112)




	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:276)




	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304)




	... 24 more





</description>
			<version>3.0.2</version>
			<fixedVersion>3.1 M2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.test.context.testng.AnnotationConfigTransactionalTestNGSpringContextTestsConfig.java</file>
			<file type="M">org.springframework.test.context.testng.AnnotationConfigTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.BeanOverridingDefaultConfigClassesInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.support.AnnotationConfigContextLoader.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.DefaultConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.ExplicitConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.DefaultConfigClassesBaseTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.BeanOverridingDefaultConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.ExplicitConfigClassesBaseTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassesBaseTestsConfig.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.BeanOverridingExplicitConfigClassesInheritedTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassesInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.ContextLoaderUtils.java</file>
			<file type="M">org.springframework.test.context.support.AbstractGenericContextLoader.java</file>
			<file type="M">org.springframework.test.context.ResourceTypeAwareContextLoader.java</file>
			<file type="M">org.springframework.test.context.ContextLoader.java</file>
			<file type="M">org.springframework.test.context.ContextConfiguration.java</file>
			<file type="M">org.springframework.test.context.support.GenericPropertiesContextLoader.java</file>
			<file type="M">org.springframework.test.context.support.GenericXmlContextLoader.java</file>
			<file type="M">org.springframework.test.context.testng.ConcreteTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassBaseTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassInheritedTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4SuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.AnnotationConfigTestSuite.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassBaseTests.java</file>
			<file type="M">org.springframework.test.context.support.AbstractContextLoader.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.AnnotationConfigSuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.PojoAndStringConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassAnnotationConfigTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassAnnotationConfigTestsConfig.java</file>
			<file type="M">org.springframework.test.context.TestContext.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTests.java</file>
			<file type="D">org.springframework.test.context.junit4.ConfigurationClassSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.ConfigurationClassSpringJUnit4ClassRunnerAppCtxTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">8386</link>
			<link type="Depend" description="is depended on by">8240</link>
			<link type="Duplicate" description="is duplicated by">7769</link>
			<link type="Duplicate" description="is duplicated by">6567</link>
			<link type="Duplicate" description="is duplicated by">272</link>
			<link type="Relate" description="relates to">8395</link>
			<link type="Relate" description="is related to">7960</link>
			<link type="Relate" description="is related to">7937</link>
			<link type="Related" description="is related to">5682</link>
			<link type="Related" description="is related to">7420</link>
			<link type="Duplicate" description="duplicates">6184</link>
		</links>
	</bug>
</bugrepository>