<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:20:43 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-10628/SPR-10628.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-10628] Please add a putForEntity and a putForLocation method to RestTemplate</title>
                <link>https://jira.spring.io/browse/SPR-10628</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Hi &lt;/p&gt;

&lt;p&gt;it&apos;s natural to upload files using HTTP PUT. In such a case a RESTful API has a few options: return the representation just uploaded (that&apos;s conventional, but inefficient for a file upload like a photo or a large video) or at a bare minimum an HTTP ACCEPTED and a Location header telling clients where the uploaded resource is accessible at. this is something that i could easily get from ResponseEntity, which a putForEntity( ..) would give me. Once we have a putForEntity it&apos;s trivial to implement the even more convenient putForLocation to obtain access to the Location: response header.&lt;/p&gt;</description>
            <key id="48958">SPR-10628</key>
            <summary>Please add a putForEntity and a putForLocation method to RestTemplate</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="rstoya05-aop">Rossen Stoyanchev</assignee>
                                    <reporter username="joshlong">Josh Long</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Jun 2013 01:43:42 +0000</created>
                <updated>Fri, 19 Sep 2014 14:29:08 +0000</updated>
                            <resolved>Thu, 15 May 2014 06:05:43 +0000</resolved>
                                    <version>3.2.3</version>
                                                    <component>Web:Client</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="90610" author="olivergierke" created="Wed, 5 Jun 2013 01:50:55 +0000"  >&lt;p&gt;Generalizing this a bit more, I think there&apos;s value in being able to access the headers returned from a &lt;tt&gt;PUT&lt;/tt&gt; request. Especially for hypermedia clients, they might want to inspect the headers for links they can follow even if the natural representation of the resource is not hypermedia enabled.&lt;/p&gt;

&lt;p&gt;Jon had an example where a client could upload a profile photo to &lt;tt&gt;/user/21/photo&lt;/tt&gt;. As the client know the URI of the resource it&apos;s trying to manipulate, &lt;tt&gt;PUT&lt;/tt&gt; is the method of choice here. On a successful request, the server might want to return a &lt;tt&gt;next&lt;/tt&gt; or &lt;tt&gt;user&lt;/tt&gt; link in the headers to indicate what the client should look at next. Currently you&apos;re forced into either using &lt;tt&gt;POST&lt;/tt&gt; or fall back to &lt;tt&gt;execute(&#8230;)&lt;/tt&gt; which is a bit verbose to execute.&lt;/p&gt;</comment>
                            <comment id="90839" author="mjustin" created="Wed, 12 Jun 2013 10:34:02 +0000"  >&lt;p&gt;This appears to be mostly a duplicate of &lt;a href=&quot;https://jira.spring.io/browse/SPR-7972&quot; title=&quot;RestTemplate.putFor*&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-7972&quot;&gt;&lt;del&gt;SPR-7972&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="103353" author="bclozel" created="Thu, 15 May 2014 06:05:43 +0000"  >&lt;p&gt;Use of exchange methods is advised for those use cases. &lt;/p&gt;</comment>
                            <comment id="103400" author="mjustin" created="Thu, 15 May 2014 12:31:11 +0000"  >&lt;p&gt;Can you please clarify the position why it&apos;s preferable to use exchange rather than create putFor* methods?&lt;/p&gt;</comment>
                            <comment id="103415" author="bclozel" created="Thu, 15 May 2014 14:53:05 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin&quot; class=&quot;user-hover&quot; rel=&quot;mjustin&quot;&gt;M. Justin&lt;/a&gt;&lt;br/&gt;
This API is already quite crowded, and adding those would result in 6 new methods (if we want to be consistent here).&lt;/p&gt;

&lt;p&gt;More important, putForEntity and putforLocation are supposed to give you back... the exact same information you just sent (either the location you just used or the resource you just sent along your request). &lt;tt&gt;echange&lt;/tt&gt; methods provide the exact feature but don&apos;t convey the &quot;best practice&quot; message that other methods have.&lt;/p&gt;

&lt;p&gt;Feel free to comment this issue to add important use cases.&lt;br/&gt;
You already mentioned CouchDB that returns the revision number of an updated resource. Did you have something else in mind?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="36395">SPR-7972</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="36395">SPR-7972</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="30741">SPR-7037</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        2 years, 32 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 5 Jun 2013 01:50:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>bclozel</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i06ctz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37117</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>