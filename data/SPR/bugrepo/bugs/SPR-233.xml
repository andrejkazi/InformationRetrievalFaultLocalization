<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:08:02 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-233/SPR-233.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-233] Reflection problem instantiating bean</title>
                <link>https://jira.spring.io/browse/SPR-233</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;m trying to wire up an application using netty 1.5.0(&lt;a href=&quot;http://gleamynode.net/dev/projects/netty2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://gleamynode.net/dev/projects/netty2&lt;/a&gt;) and getting an exception when I put the following bean in my application context xml file:&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;eventDispatcher&quot; class=&quot;net.gleamynode.netty2.OrderedEventDispatcher&quot; init-method=&quot;start&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;threadPoolSize&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;The exception I get is:&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;eventDispatcher&apos; defined in file &lt;span class=&quot;error&quot;&gt;&amp;#91;V:\dev\projects\sumup\config\serverContext.xml&amp;#93;&lt;/span&gt;: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: &lt;span class=&quot;error&quot;&gt;&amp;#91;org.springframework.beans.MethodInvocationException: Property &amp;#39;threadPoolSize&amp;#39; threw exception; nested exception is java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class net.gleamynode.netty2.AbstractThreadPooledEventDispatcher with modifiers &amp;quot;public synchronized&amp;quot;&amp;#93;&lt;/span&gt;&lt;br/&gt;
PropertyAccessExceptionsException (1 errors)&lt;br/&gt;
org.springframework.beans.MethodInvocationException: Property &apos;threadPoolSize&apos; threw exception; nested exception is java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class net.gleamynode.netty2.AbstractThreadPooledEventDispatcher with modifiers &quot;public synchronized&quot;&lt;br/&gt;
java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class net.gleamynode.netty2.AbstractThreadPooledEventDispatcher with modifiers &quot;public synchronized&quot;&lt;br/&gt;
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:57)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:317)&lt;br/&gt;
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:718)&lt;br/&gt;
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:624)&lt;br/&gt;
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:755)&lt;br/&gt;
	at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:782)&lt;br/&gt;
	at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:771)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:763)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:604)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:267)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:204)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:136)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:209)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:279)&lt;br/&gt;
	at org.springframework.context.support.FileSystemXmlApplicationContext.&amp;lt;init&amp;gt;(FileSystemXmlApplicationContext.java:83)&lt;br/&gt;
	at org.springframework.context.support.FileSystemXmlApplicationContext.&amp;lt;init&amp;gt;(FileSystemXmlApplicationContext.java:68)&lt;br/&gt;
	at org.springframework.context.support.FileSystemXmlApplicationContext.&amp;lt;init&amp;gt;(FileSystemXmlApplicationContext.java:59)&lt;br/&gt;
	at com.baesystems.etss.etpg.listener.Server.main(Server.java:27)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:324)&lt;/p&gt;


&lt;p&gt;This was working with netty 1.4.0. The only difference that I can see is that the method setThreadPoolSize has been moved to an abstract base class.&lt;/p&gt;</description>
            <key id="10435">SPR-233</key>
            <summary>Reflection problem instantiating bean</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="mikegb92121">Michael Brown</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Jul 2004 02:47:41 +0000</created>
                <updated>Thu, 29 Jul 2004 03:35:23 +0000</updated>
                            <resolved>Thu, 29 Jul 2004 03:10:55 +0000</resolved>
                                    <version>1.1 RC1</version>
                                    <fixVersion>1.1 RC2</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="10701" author="juergen.hoeller" created="Thu, 29 Jul 2004 03:10:54 +0000"  >&lt;p&gt;Actually, that IllegalAccessException is thrown by the JDK reflection mechanism, not by Spring&apos;s BeanWrapper itself.&lt;/p&gt;

&lt;p&gt;I bet that Netty&apos;s AbstractThreadPooledEventDispatcher class is protected, which does not allow any other package to see the class via plain reflection, therefore also not the properties of this class.&lt;/p&gt;

&lt;p&gt;That&apos;s a bit odd, as you can invoke the setter in a conventional programmatic style without issues, but that&apos;s how standard reflection security checks work.&lt;/p&gt;

&lt;p&gt;I&apos;ve just added special checks to CachedIntrospectionResults, explicitly setting read and write methods accessible if the declaring class is not public. This solves the issue for my test case, so should work for Netty&apos;s AbstractThreadPooledEventDispatcher too.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10702" author="mikegb92121" created="Thu, 29 Jul 2004 03:35:23 +0000"  >&lt;p&gt;Jurgen,&lt;br/&gt;
You are correct. I took a look at his code and the abstract base class is not public (package access).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        12 years, 23 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 29 Jul 2004 03:10:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04ycv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28940</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>