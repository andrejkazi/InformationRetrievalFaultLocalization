<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:47:31 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2454/SPR-2454.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2454] isBridgeMethodFor method in BridgeMethodResolver class throws ClassCastException if bridge method has a parameter of type ParameterizedType</title>
                <link>https://jira.spring.io/browse/SPR-2454</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;If the isBridgeMethodFor method in the BridgeMethodResolver class is called with a bridge method which has a parameter of type java.lang.reflect.ParameterizedType (for example Class&amp;lt;T&amp;gt;), a ClassCastException is thrown.&lt;/p&gt;

&lt;p&gt;This issue is due to the fact that in the isBridgeMethodFor method calls the private isResolvedTypeMatch method. In this method, the generic parameter types are extracted from the generic method (i.e. from the generic declaration whose erased signature matches that of the supplied bridge method). Then, each generic parameter is either cast to a java.lang.reflect.TypeVariable if it is an instance of TypeVariable, and then resolved using a type variable map and cast to java.lang.Class, or, if it is not an instance of TypeVariable, it is cast immediately to java.lang.Class. However, if a generic parameter is an instance of java.lang.reflect.ParameterizedType, the isResolvedTypeMatch method tries to cast this parameter immediately to java.lang.Class (since it is not an instance of TypeVariable), which results in a ClassCastException, since the type of this generic parameter (which is for example sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl, an implementation of the ParameterizedType interface) is cast to java.lang.Class.&lt;/p&gt;

&lt;p&gt;The following example demostrates this. If we have the following bridge method: Class&amp;lt;T&amp;gt; getFor(Class&amp;lt;T&amp;gt;), whose parameter is of type ParameterizedTypeImpl, a ClassCastException is thrown, since the isResolvedTypeMatch method tries to cast ParameterizedTypeImpl to java.lang.Class.&lt;/p&gt;

&lt;p&gt;The solution would be to treat the case if a generic type parameter is of type ParameterizedType separately in the isResolvedTypeMatch method of the BridgeMethodResolver class.&lt;/p&gt;</description>
            <key id="14798">SPR-2454</key>
            <summary>isBridgeMethodFor method in BridgeMethodResolver class throws ClassCastException if bridge method has a parameter of type ParameterizedType</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robh">Rob Harrop</assignee>
                                    <reporter username="mathey">Alex Mathey</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Aug 2006 20:17:10 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:34 +0000</updated>
                            <resolved>Sun, 24 Sep 2006 21:41:10 +0000</resolved>
                                    <version>2.0 RC3</version>
                                    <fixVersion>2.0 final</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="19279" author="mathey" created="Tue, 29 Aug 2006 21:31:05 +0000"  >&lt;p&gt;I have created a patch for the BridgeMethodResolver class, which solves the described issue. It can be found in the BridgeMethodResolver_patch_2006_08_30.txt file.&lt;/p&gt;

&lt;p&gt;The solution was to treat the case when a generic type parameter is of type ParameterizedType separately in the isResolvedTypeMatch method of the BridgeMethodResolver class. the following lines had to be added to this method:&lt;/p&gt;

&lt;p&gt;	private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Map 						typeVariableMap) &lt;/p&gt;
{
                    ...

			}
&lt;p&gt; else if (genericParameter instanceof ParameterizedType) &lt;/p&gt;
{
				resolvedTypes[i] = (Class) (((ParameterizedType) genericParameter).getRawType());
			}
&lt;p&gt; &lt;br/&gt;
                    ...&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;Like this, a generic type parameter which is of type ParameterizedType is treated correctly by the method and no ClassCastException will be thrown any more.&lt;/p&gt;</comment>
                            <comment id="19318" author="mathey" created="Wed, 30 Aug 2006 18:31:35 +0000"  >&lt;p&gt;I updated the patch. The new BridgeMethodResolver_patch_2006_08_31.txt file only contains the diff results and not the complete code of the BridgeMethodResolver class.&lt;/p&gt;</comment>
                            <comment id="19321" author="mathey" created="Thu, 31 Aug 2006 00:41:01 +0000"  >&lt;p&gt;I have detected a further bug related to this issue.&lt;/p&gt;

&lt;p&gt;If the findBridgedMethod of the BridgeMethodResolver class is called with a method which is defined in a class that is packaged inside a jar file, this method returns null, even if there exists an original method for the supplied bridge method.&lt;/p&gt;

&lt;p&gt;This is critical, since when looking for annotations of a method, the AnnotationUtils class uses the getAnnotations() method, and inside this method, findBridgedMethod() is called on the method to get the annotations from. Then, the getAnnotations() method is called on the result of this call:&lt;/p&gt;

&lt;p&gt;public static Annotation[] getAnnotations(Method method) {&lt;br/&gt;
		return BridgeMethodResolver.findBridgedMethod(method).getAnnotations();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;This results in a NullPointerException, since findBridgedMethod() will return null.&lt;/p&gt;

&lt;p&gt;To sum up, if a the getAnnotations() method of the AnnotationUtils class is called with a method which is defined in a jar file, a NullPointerException will be thrown.&lt;/p&gt;

&lt;p&gt;The patch I created previously does not solve this issue.&lt;/p&gt;
</comment>
                            <comment id="19330" author="mathey" created="Thu, 31 Aug 2006 18:29:54 +0000"  >&lt;p&gt;I have created a patch that solves the issue described in the previous comment. I have changed the getAnnotations() and getAnnotation() methods of the AnnotationUtils class so that they no longer throw a NullPointerException when the findBridgedMethod() method of the BridgeMethodResolver class, which is called by them, returns null.&lt;/p&gt;</comment>
                            <comment id="19571" author="robh" created="Tue, 12 Sep 2006 20:34:57 +0000"  >&lt;p&gt;Alex,&lt;/p&gt;

&lt;p&gt;Can you post a JAR file that illustrates the secind bug you mention? I cannot see why that should fail - returning null there is not acceptable.&lt;/p&gt;

&lt;p&gt;Other issue is now fixed.&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="19593" author="mathey" created="Wed, 13 Sep 2006 20:42:25 +0000"  >&lt;p&gt;Hi Rob,&lt;/p&gt;

&lt;p&gt;I have looked a bit deeper into the issue I mentioned concerning the NullPointerException, and it does not only occur if the BridgeMethodResolver class is called with a method which is defined in a class that is packaged inside a JAR file, so the issue is not related to the fact that the method has to be in a JAR file.&lt;/p&gt;

&lt;p&gt;Unfortunately, the scenario where the NullPointerException is raised is quite complex . It occurs in a complex project I am working at, and I have tried to create a simple test case which illustrates the issue, but in the simple case, the exception is not raised. Due to lack of time, I cannot look much further into this issue. For the project I am working at, I have found a workaround where the exception is not raised any more.&lt;/p&gt;

&lt;p&gt;Here is the stack trace illustrating the origin of the exception:&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;keywordService&apos; defined in URL &lt;a href=&quot;file:/D:/Projects/el4j_old/external/framework/dist/classes/keyword-core/scenarios/dataaccess/hibernate/keyword-core-repository-hibernate-config.xml&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/D:/Projects/el4j_old/external/framework/dist/classes/keyword-core/scenarios/dataaccess/hibernate/keyword-core-repository-hibernate-config.xml&lt;/a&gt;: Cannot resolve reference to bean &apos;repositoryRegistry&apos; while setting bean property &apos;repositoryRegistry&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;repositoryRegistry&apos; defined in URL &lt;a href=&quot;file:/D:/Projects/el4j_old/external/framework/dist/classes/keyword-core/scenarios/dataaccess/hibernate/keyword-core-repository-hibernate-config.xml&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/D:/Projects/el4j_old/external/framework/dist/classes/keyword-core/scenarios/dataaccess/hibernate/keyword-core-repository-hibernate-config.xml&lt;/a&gt;: Initialization of bean failed; nested exception is java.lang.NullPointerException&lt;br/&gt;
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;repositoryRegistry&apos; defined in URL &lt;a href=&quot;file:/D:/Projects/el4j_old/external/framework/dist/classes/keyword-core/scenarios/dataaccess/hibernate/keyword-core-repository-hibernate-config.xml&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/D:/Projects/el4j_old/external/framework/dist/classes/keyword-core/scenarios/dataaccess/hibernate/keyword-core-repository-hibernate-config.xml&lt;/a&gt;: Initialization of bean failed; nested exception is java.lang.NullPointerException&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
	at org.springframework.core.annotation.AnnotationUtils.getAnnotations(AnnotationUtils.java:41)&lt;br/&gt;
	at org.springframework.transaction.annotation.AnnotationTransactionAttributeSource.findAllAttributes(AnnotationTransactionAttributeSource.java:59)&lt;br/&gt;
	at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.computeTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:138)&lt;br/&gt;
	at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:98)&lt;br/&gt;
	at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.matches(TransactionAttributeSourceAdvisor.java:102)&lt;br/&gt;
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:211)&lt;br/&gt;
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:250)&lt;br/&gt;
	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:275)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:68)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:54)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:247)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:301)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:933)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:851)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:300)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346)&lt;br/&gt;
	at ch.elca.el4j.core.context.ModuleApplicationContext.&amp;lt;init&amp;gt;(ModuleApplicationContext.java:200)&lt;br/&gt;
	at ch.elca.el4j.core.context.ModuleApplicationContext.&amp;lt;init&amp;gt;(ModuleApplicationContext.java:148)&lt;br/&gt;
	at ch.elca.el4j.tests.keyword.AbstractTestCaseBase.getApplicationContext(AbstractTestCaseBase.java:71)&lt;br/&gt;
	at ch.elca.el4j.tests.keyword.AbstractTestCaseBase.getDataSource(AbstractTestCaseBase.java:101)&lt;br/&gt;
	at ch.elca.el4j.tests.keyword.AbstractTestCaseBase.setUp(AbstractTestCaseBase.java:113)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:125)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)&lt;/p&gt;


&lt;p&gt;I have also attached the Spring configuration files used in my project.&lt;/p&gt;

&lt;p&gt;After debugging and by looking at the source code of Spring, it became obvious where the error comes from:&lt;/p&gt;

&lt;p&gt;The getAnnotation() and getAnnotations() methods of the Spring&apos;s AnnotationUtils class call the findBridgedMethod() method of the BridgeMethodResolver class. If a bridge method and more than one candidate methods for the given bridge method are found, the findBridgedMethod() method calls the searchCandidates() method. If the given bridge method is not the bridge for any of the supplied candidate methods, the searchCandidates() method returns null, as can be seen here:&lt;/p&gt;

&lt;p&gt;private static Method searchCandidates(List candidateMethods, Method bridgeMethod) {&lt;br/&gt;
		Map typeParameterMap = createTypeVariableMap(bridgeMethod.getDeclaringClass());&lt;br/&gt;
		for (int i = 0; i &amp;lt; candidateMethods.size(); i++) {&lt;br/&gt;
			Method candidateMethod = (Method) candidateMethods.get&lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/information.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;;&lt;br/&gt;
			if (isBridgeMethodFor(bridgeMethod, candidateMethod, typeParameterMap)) &lt;/p&gt;
{
				return candidateMethod;
			}
&lt;p&gt;		}&lt;br/&gt;
		return null;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;However, the result of the searchCandidates() method is returned by the findBridgedMethod() method, and the result of this method is used in the getAnnotation() and getAnnotations() methods of the AnnotationUtils class, as can be seen here:&lt;/p&gt;

&lt;p&gt;public static Annotation[] getAnnotations(Method method) {&lt;br/&gt;
		return BridgeMethodResolver.findBridgedMethod(method).getAnnotations();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;However, if the returned result of the searchCandidates() method, and therefore of the findBridgedMethod() method is null, a NullPointerException will be thrown by the getAnnotation() and getAnnotations() methods. This is exactly what happened in my scenario. The last patch I created solves this issue.&lt;/p&gt;

&lt;p&gt;I hope this helps, and sorry for not having the time to look much further into this issue and being able to produce a simple scenario illustrating this issue.&lt;/p&gt;

&lt;p&gt;Alex&lt;/p&gt;





</comment>
                            <comment id="19618" author="robh" created="Thu, 14 Sep 2006 01:49:06 +0000"  >&lt;p&gt;Alex,&lt;/p&gt;

&lt;p&gt;The crux of the issue here is that returning null from BMR is not valid. Can you post the class that is causing the problem so I can take a look at the generics being used?&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="19654" author="mathey" created="Thu, 14 Sep 2006 20:51:34 +0000"  >&lt;p&gt;Hi Rob,&lt;/p&gt;

&lt;p&gt;I have posted the classes which are involved in the issue. The problem is caused by the injectInto() method defined in the SettableRepositoryRegistry class and overridden in the HibernateRepositoryRegistry class. This method is recognized as a bridge method, but no candidate method for it is found, so null will be returned by the searchCandidates() method, which causes the NullPointerException.&lt;/p&gt;

&lt;p&gt;And the strange thing is that the NullPointerException is thrown only if the classes are compiled with Sun&apos;s compiler, and not when they are compiled with the Eclipse compiler! I have looked into this issue, and found the following bug submission from Sun&apos;s Bug Database which explains the issue:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6439653&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6439653&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since, according to Sun, Sun&apos;s compiler seems to behave correctly and Eclipse&apos;s compiler seems to be wrong, it seems to be correct that a NullPointerException will be thrown when compiling with Sun&apos;s compiler, and it seems to be wrong that Eclipse accepts the test.&lt;/p&gt;

&lt;p&gt;I have further found out that when compiling with sun&apos;s compiler, the injectInto() method is recognized as being a bridge method, and no corresponding candidate method will be found (which causes a NullPointerException), whereas when compiling with the Eclipse compiler, the injectInto() method is not even recognized as being a bridge method, and therefore, no candidates are being searched for, and so, no NullPointerException will be thrown.&lt;/p&gt;

&lt;p&gt;I hope this information will help you to find out why exactly null will be returned by the searchCandidates() method with the generics used in my case - the problem seems to be rare rare, and also quite tricky.&lt;/p&gt;

&lt;p&gt;Greetings&lt;br/&gt;
Alex&lt;/p&gt;</comment>
                            <comment id="19688" author="rgeorgiev" created="Sat, 16 Sep 2006 23:52:06 +0000"  >&lt;p&gt;Hi Rob and Alex,&lt;/p&gt;

&lt;p&gt;I have the same problem with ClassCastException, but it&apos;s in the BridgeMethodResolver.populateTypeMapFromParameterizedType(Map typeVariableMap, ParameterizedType type)  method. I&apos;ve maded a little quick fix &lt;br/&gt;
and it works now on my project. But I&apos;m not sure is this the only problem with Bridgemethods and generics. So here the fix :&lt;/p&gt;

&lt;p&gt;                            if (bounds.length &amp;gt; 0) {&lt;br/&gt;
					if (bounds&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; instanceof ParameterizedType) &lt;/p&gt;
{
						typeVariableMap.put(typeVariables[i].getName(),
								((ParameterizedType) bounds[0]).getRawType());
					}
&lt;p&gt; else &lt;/p&gt;
{
						typeVariableMap.put(typeVariables[i].getName(),
								(Class) bounds[0]);
					}
&lt;p&gt;				}&lt;/p&gt;

&lt;p&gt;Regards&lt;br/&gt;
    Rostislav&lt;/p&gt;</comment>
                            <comment id="19696" author="rgeorgiev" created="Sun, 17 Sep 2006 18:20:24 +0000"  >&lt;p&gt;Hi again,&lt;/p&gt;

&lt;p&gt;       I have created test to reproduce the bug.&lt;/p&gt;

&lt;p&gt;Regards&lt;br/&gt;
      Rostislav&lt;/p&gt;</comment>
                            <comment id="19718" author="robh" created="Mon, 18 Sep 2006 20:20:29 +0000"  >&lt;p&gt;Rotislav,&lt;/p&gt;

&lt;p&gt;The code you supplied doesn&apos;t compile in javac 1.5.0_06. The YourBoo makes T concrete and YourBoo2 tries to generify it again ending up with unclear erasure. I openedhttp://opensource.atlassian.com/projects/spring/browse/SPR-2603 to track the progress of this - can you post a working code example under that issue.&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="19720" author="robh" created="Mon, 18 Sep 2006 21:08:18 +0000"  >&lt;p&gt;Alex,&lt;/p&gt;

&lt;p&gt;I added testSPR2454 to BMRTests and everything seems fine. I did make some changes for aother issue recently so maybe there was overlap. Can you check against RC4 and also check out tonnights snapshot?&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="19771" author="mathey" created="Wed, 20 Sep 2006 23:05:35 +0000"  >&lt;p&gt;Hi Rob,&lt;/p&gt;

&lt;p&gt;I have checked against RC4 and the latest snapshot, and everything seems to be fine now - the issue does not occur any more in my case.&lt;/p&gt;

&lt;p&gt;Greetings,&lt;br/&gt;
Alex&lt;/p&gt;</comment>
                            <comment id="19787" author="barneyb" created="Thu, 21 Sep 2006 14:29:21 +0000"  >&lt;p&gt;Using a fresh 2.0 RC4, the issue still persists if a superclass is parameterized two-deep (i.e. it&apos;s parameterized by a parameter of it&apos;s subtype, which is parameterized by an actual type).  I&apos;m totally unfamiliar with the BridgeMethodResovler class, but it appears to be running into the exact same issue I ran into while doing some manual type dereferencing and then opted to see if Spring could do for me (because I didn&apos;t want to build a parameter dereferencer).  Here&apos;s some code snippets to illustrate:&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;folderDao&quot;&lt;br/&gt;
		class=&quot;com.piercenter.dao.FolderDao&quot;&lt;br/&gt;
		parent=&quot;abstractDao&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;public class FolderDao extends AbstractNestedSetDao&amp;lt;FolderItem, Folder&amp;gt; { ...&lt;/p&gt;

&lt;p&gt;public class AbstractNestedSetDao&amp;lt;TE extends NestedSetEntity&amp;lt;TE&amp;gt;, E extends TE&amp;gt;&lt;br/&gt;
        extends AbstractDao&amp;lt;E&amp;gt; { ...&lt;/p&gt;

&lt;p&gt;public abstract class AbstractDao&amp;lt;E extends PersistentEntity&amp;gt; extends&lt;br/&gt;
        HibernateDaoSupport&lt;br/&gt;
        implements EntityDao&amp;lt;E&amp;gt; { ...&lt;/p&gt;

&lt;p&gt;public interface NestedSetEntity&amp;lt;TE extends NestedSetEntity&amp;gt;&lt;br/&gt;
        extends PersistentEntity { ...&lt;/p&gt;

&lt;p&gt;public interface PersistentEntity { ...&lt;/p&gt;

&lt;p&gt;If FolderDao is made to extend AbstractDao directly, then no worries, bound&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; in question is successfully converted to &quot;....PersistentEntity&quot;.  However, as it&apos;s written, bound&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; is converted to &quot;TE&quot;, the name of the generic type, which, with one more dereferencing, would be &quot;....NestedSetEntity&quot;.&lt;/p&gt;</comment>
                            <comment id="19799" author="robh" created="Fri, 22 Sep 2006 00:19:49 +0000"  >&lt;p&gt;Barney,&lt;/p&gt;

&lt;p&gt;Can you post those classes along with the method that is causing you problems?&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="19850" author="rgeorgiev" created="Sun, 24 Sep 2006 17:39:36 +0000"  >&lt;p&gt;Rob,&lt;/p&gt;

&lt;p&gt;    I&apos;ve maded changes to the  	&lt;a href=&quot;https://jira.spring.io/browse/SPR-2603&quot; title=&quot;ClassCastException in BMR.populateTypeMapFromParameterizedType&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2603&quot;&gt;&lt;del&gt;SPR-2603&lt;/del&gt;&lt;/a&gt; supported classes to handle the case which  Barney mention. But I posted them in the &lt;a href=&quot;https://jira.spring.io/browse/SPR-2603&quot; title=&quot;ClassCastException in BMR.populateTypeMapFromParameterizedType&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2603&quot;&gt;&lt;del&gt;SPR-2603&lt;/del&gt;&lt;/a&gt; bug.&lt;/p&gt;

&lt;p&gt;Rostislav &lt;/p&gt;</comment>
                            <comment id="19919" author="barneyb" created="Wed, 27 Sep 2006 07:26:12 +0000"  >&lt;p&gt;Rob,&lt;/p&gt;

&lt;p&gt;Sorry for the delay, assumed JIRA would automatically make me a watcher if I commented, but it doesn&apos;t.&lt;/p&gt;

&lt;p&gt;I don&apos;t actually have those classes to share, unfortunately.  I ran into the issue, tried to deal with it, failed, tried to let Spring deal with it for me, it failed, and then I refactored to make it work.  Total time was about an hour, and I didn&apos;t commit any of the non-working code into Subversion.  I can probably gin up a test case though.  Not right this second, but probably this week.&lt;/p&gt;

&lt;p&gt;The net result was that the BMR did it&apos;s dereferencing and arrived at the conclusion that the type of the parameter in question was TE, which is the bound on the parameter.  With the single-level nesting, the bound is guaranteed to be a &quot;real&quot; type, but with multi-level nesting, the bound can itself be a generic type, which would require further dereferencing.  That dereferencing (from my primitive examination before I tried to have Spring do it for me) looked quite nasty, because you had to build a per-class lookup table of generic parameter bounds, cross referencing them across the hierarchy (and using names won&apos;t work, as they can change across the hierarchy).&lt;/p&gt;</comment>
                            <comment id="19944" author="mathey" created="Thu, 28 Sep 2006 00:47:23 +0000"  >&lt;p&gt;Rob,&lt;/p&gt;

&lt;p&gt;I have now changed my code a bit, and another error occurs which is related to the findBridgedMethod() method in the BridgeMethodResolver class.&lt;/p&gt;

&lt;p&gt;The error occurs with Spring 2.0 RC4. The error does however not occur when I use the patched AnnotationUtils class which I have posted some weeks ago.&lt;/p&gt;

&lt;p&gt;Here is the stack trace of the exception which is raised now when the saveOrUpdate() method of the GenericSqlMapReferenceDao class is called:&lt;/p&gt;

&lt;p&gt;-------------------------------------------------------------------------------&lt;br/&gt;
Test set: ch.elca.el4j.tests.refdb.dao.SqlMapsReferenceDaoTest&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
Tests run: 14, Failures: 0, Errors: 14, Skipped: 0, Time elapsed: 4.151 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
testInsertAnnotation(ch.elca.el4j.tests.refdb.dao.SqlMapsReferenceDaoTest)  Time elapsed: 0.47 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!&lt;br/&gt;
java.lang.IllegalStateException: Unable to locate bridged method for bridge method &apos;public volatile java.lang.Object ch.elca.el4j.apps.refdb.dao.impl.ibatis.GenericSqlMapReferenceDao.saveOrUpdate(java.lang.Object) throws org.springframework.dao.DataAccessException,org.springframework.dao.DataIntegrityViolationException,org.springframework.dao.OptimisticLockingFailureException&apos;&lt;br/&gt;
	at org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:90)&lt;br/&gt;
	at org.springframework.core.annotation.AnnotationUtils.getAnnotations(AnnotationUtils.java:41)&lt;br/&gt;
	at org.springframework.transaction.annotation.AnnotationTransactionAttributeSource.findAllAttributes(AnnotationTransactionAttributeSource.java:58)&lt;br/&gt;
	at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.computeTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:145)&lt;br/&gt;
	at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:102)&lt;br/&gt;
	at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.matches(TransactionAttributeSourceAdvisor.java:102)&lt;br/&gt;
	at org.springframework.aop.framework.AdvisorChainFactoryUtils.methodMatches(AdvisorChainFactoryUtils.java:135)&lt;br/&gt;
	at org.springframework.aop.framework.AdvisorChainFactoryUtils.calculateInterceptorsAndDynamicInterceptionAdvice(AdvisorChainFactoryUtils.java:84)&lt;br/&gt;
	at org.springframework.aop.framework.HashMapCachingAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(HashMapCachingAdvisorChainFactory.java:49)&lt;br/&gt;
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:189)&lt;br/&gt;
	at $Proxy36.saveOrUpdate(Unknown Source)&lt;br/&gt;
	at ch.elca.el4j.tests.refdb.AbstractTestCaseBase.addFakeReference(AbstractTestCaseBase.java:175)&lt;br/&gt;
	at ch.elca.el4j.tests.refdb.AbstractTestCaseBase.addDefaultFakeReference(AbstractTestCaseBase.java:185)&lt;br/&gt;
	at ch.elca.el4j.tests.refdb.dao.AbstractReferenceDaoTest.testInsertAnnotation(AbstractReferenceDaoTest.java:72)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)&lt;br/&gt;
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)&lt;br/&gt;
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:122)&lt;br/&gt;
	at org.apache.maven.surefire.Surefire.run(Surefire.java:129)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:265)&lt;br/&gt;
	at org.apache.maven.surefire.booter.SurefireBooter.run(SurefireBooter.java:176)&lt;br/&gt;
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:401)&lt;br/&gt;
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:417)&lt;br/&gt;
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)&lt;br/&gt;
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:475)&lt;br/&gt;
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:454)&lt;br/&gt;
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)&lt;br/&gt;
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)&lt;br/&gt;
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)&lt;br/&gt;
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:393)&lt;br/&gt;
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:182)&lt;br/&gt;
	at org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:747)&lt;br/&gt;
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:380)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)&lt;br/&gt;
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)&lt;br/&gt;
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)&lt;br/&gt;
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)&lt;/p&gt;

&lt;p&gt;Again, the error only occurs when the classes are compiled with Sun&apos;s compiler, and not when they are compiled with the Eclipse compiler.&lt;/p&gt;

&lt;p&gt;The classes which are causing this behaviour are in the attached zip file.&lt;/p&gt;

&lt;p&gt;Greetings&lt;br/&gt;
Alex&lt;/p&gt;</comment>
                            <comment id="19946" author="mathey" created="Thu, 28 Sep 2006 01:18:56 +0000"  >&lt;p&gt;The classes which cause the issue are in the classes20060928.zip file.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11926" name="AnnotationUtils_patch_2006_09_01.txt" size="1581" author="mathey" created="Thu, 31 Aug 2006 18:29:54 +0000"/>
                            <attachment id="11966" name="BridgeMethodResolverClassCastTests.java" size="2605" author="rgeorgiev" created="Sun, 17 Sep 2006 18:20:24 +0000"/>
                            <attachment id="11917" name="BridgeMethodResolver_patch_2006_08_30.txt" size="11653" author="mathey" created="Tue, 29 Aug 2006 21:31:05 +0000"/>
                            <attachment id="11920" name="BridgeMethodResolver_patch_2006_08_31.txt" size="969" author="mathey" created="Wed, 30 Aug 2006 18:31:35 +0000"/>
                            <attachment id="11961" name="classes.zip" size="13772" author="mathey" created="Thu, 14 Sep 2006 20:51:34 +0000"/>
                            <attachment id="11999" name="classes20060928.zip" size="9960" author="mathey" created="Thu, 28 Sep 2006 01:18:56 +0000"/>
                            <attachment id="11956" name="hibernateDatabase.xml" size="4448" author="mathey" created="Wed, 13 Sep 2006 20:48:35 +0000"/>
                            <attachment id="11955" name="keyword-core-repository-hibernate-config.xml" size="1520" author="mathey" created="Wed, 13 Sep 2006 20:47:04 +0000"/>
                            <attachment id="11957" name="transactionJava5Annotations.xml" size="2251" author="mathey" created="Wed, 13 Sep 2006 20:49:12 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 14 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 12 Sep 2006 20:34:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04u9z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28279</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>