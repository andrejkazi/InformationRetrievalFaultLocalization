<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:20:16 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1583/SPR-1583.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1583] batch execute problem with TransactionAwareDataSourceProxy - iBatis integration issue</title>
                <link>https://jira.spring.io/browse/SPR-1583</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;This problem was introduced in 1.1.5 release.&lt;/p&gt;

&lt;p&gt;iBatis SQLMapExecutorDelegate methods (insert, update etc..) have the following structure.&lt;/p&gt;

&lt;p&gt;Transaction trans = getTransaction(session);&lt;br/&gt;
boolean autoStart = trans == null;&lt;/p&gt;

&lt;p&gt;try {&lt;br/&gt;
  trans = autoStartTransaction(session, autoStart, trans);&lt;br/&gt;
....&lt;br/&gt;
...&lt;/p&gt;

&lt;p&gt;  autoCommitTransaction(session, autoStart);&lt;br/&gt;
} finally {&lt;br/&gt;
  autoEndTransaction(session, autoStart);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;If a transaction was started by iBatis (ie. autoStart = true), then autoCommitTransaction will end-up calling the following on the SQLMapExecutorDelegate&lt;/p&gt;

&lt;p&gt;  public void commitTransaction(SessionScope session) throws SQLException {&lt;br/&gt;
    try {&lt;br/&gt;
      // Auto batch execution&lt;br/&gt;
      if (session.isInBatch()) &lt;/p&gt;
{
        executeBatch(session);
      }
&lt;p&gt;      sqlExecutor.cleanup(session);&lt;br/&gt;
      txManager.commit(session);&lt;br/&gt;
    } catch (TransactionException e) &lt;/p&gt;
{
      throw new NestedSQLException(&quot;Could not commit transaction.  Cause: &quot; + e, e);
    }
&lt;p&gt;  }&lt;/p&gt;


&lt;p&gt;The executeBatch method gets called after every call (insert, update, delete etc..), essentially there is no batching of statements. This is only a issue if a TransactionAwareDataSourceProxy is used ( ..which is the default).&lt;/p&gt;

&lt;p&gt;If I set the &apos;useTransactionAwareDataSource&apos; property to false in the SqlMapClientFactoryBean then the following code in SqlMapClientTemplate sets the user connection, which in-turn creates a user provided transaction (...autoStart is now false..and iBatis will not start a transaction..and hence the executeBatch will not be called after every insert/update/delete).&lt;/p&gt;

&lt;p&gt;Connection con = DataSourceUtils.getConnection(getDataSource());&lt;br/&gt;
try {&lt;br/&gt;
    session.setUserConnection(con);&lt;br/&gt;
    return action.doInSqlMapClient(session);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Thoughts ?&lt;/p&gt;</description>
            <key id="13077">SPR-1583</key>
            <summary>batch execute problem with TransactionAwareDataSourceProxy - iBatis integration issue</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="ram_2000">Ram Chidambaram</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Dec 2005 12:29:36 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:25 +0000</updated>
                            <resolved>Tue, 3 Jan 2006 20:37:39 +0000</resolved>
                                    <version>1.1.5</version>
                                    <fixVersion>1.2.7</fixVersion>
                    <fixVersion>2.0 M2</fixVersion>
                                    <component>Data</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="15908" author="juergen.hoeller" created="Sun, 1 Jan 2006 23:52:43 +0000"  >&lt;p&gt;The problem that I see here is not that executeBatch will automatically get called for every single statement in case of a TransactionAwareDataSourceProxy. It&apos;s rather that executeBatch won&apos;t get called &lt;b&gt;at all&lt;/b&gt; if &lt;b&gt;not&lt;/b&gt; operating against a TransactionAwareDataSourceProxy - at least not reliably across all JDBC drivers!&lt;/p&gt;

&lt;p&gt;As far as I see, there is no automatic iBATIS execution of a batch in case of a user-provided Connection. Hence, any batch started by user code will not get executed unless user code explicitly calls executeBatch itself on the given SqlMapExecutor (within a SqlMapClientCallback). A dangling (non-executed) batch is invalid in such a scenario.&lt;/p&gt;

&lt;p&gt;So I would argue that you should not rely on auto-execution of a batch. Instead, always explicitly call startBatch and executeBatch within a SqlMapClientCallback, with all batched statements sent inbetween those two calls. This will work with or without a TransactionAwareDataSourceProxy, as long as it all happens within the same SqlMapClientCallback.&lt;/p&gt;

&lt;p&gt;Let me know if you experience different behavior here...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15921" author="ram_2000" created="Mon, 2 Jan 2006 07:28:31 +0000"  >&lt;p&gt;I&apos;m not relying on the auto-execution of the batch statments. I&apos;m using the callback as suggested.&lt;/p&gt;

&lt;p&gt;getSqlMapClientTemplate().execute(new SqlMapClientCallback() {&lt;br/&gt;
    public Object doInSqlMapClient(SqlMapExecutor executor)&lt;br/&gt;
      throws SQLException &lt;/p&gt;
{
        executor.startBatch();
        // do some iBatis operations like insert, update etc..
        executor.executeBatch();
        return null;
    }
&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;The issue is the &apos;getTransaction()&apos; call in iBatis SQLMapExecutorDelegate. When a user connection is supplied (..by setting the  &apos;useTransactionAwareDataSource&apos; property to &apos;false&apos; in Spring), this returns the user transaction. &apos;autoStart&apos; flag will now be &apos;false&apos;...and hence the &apos;commitTransaction()&apos; method will not be called after every statement (insert, update etc..)....The batch is executed when the &apos;executeBatch()&apos; method is called in the callback. This is the desired behaviour.&lt;/p&gt;

&lt;p&gt;If a TransactionAwareDataSourceProxy is used, then the &apos;getTransaction()&apos; method returns &apos;null&apos; and &apos;autoStart&apos; flag will be &apos;true&apos;. This will cause the &apos;commitTransaction()&apos; method to be called after every DML statement....This in turn calls &apos;executeBatch()&apos;  &lt;b&gt;automatically&lt;/b&gt;....This results in a batch of 1 statement (essentially no batching..)&lt;/p&gt;

&lt;p&gt;I reported a problem in the forum a while ago. But didn&apos;t have the time to investigate further..Manually calling the &apos;startTransaction()&apos; inside the callback is a workaround (though very ugly..)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://forum.springframework.org/showthread.php?t=16142&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/showthread.php?t=16142&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The hard part is you don&apos;t see any errors and you think the batch is working....The only reason i looked further is that i didn&apos;t see the expected performance improvement after using batch.&lt;/p&gt;

&lt;p&gt;I hope this is clear.&lt;/p&gt;

&lt;p&gt;Ram.&lt;/p&gt;</comment>
                            <comment id="15938" author="juergen.hoeller" created="Tue, 3 Jan 2006 07:26:59 +0000"  >&lt;p&gt;I see. So even with a SqlMapClientCallback, it does not work with a TransactionAwareDataSourceProxy. But it does work if you turn SqlMapClientFactoryBean&apos;s &quot;useTransactionAwareDataSource&quot; flag off, I assume?&lt;/p&gt;

&lt;p&gt;Actually, this looks like an iBATIS bug to me. The same problem will arise with plain SqlMapClient usage within an EJB CMT or plain JTA transaction: SqlMapClientDelegate will not detect the existing transaction directly but rather think it begins and commits a transaction, executing the batch before the commit. This is exactly the same scenario as with Spring&apos;s default configuration, where an iBATIS ExternalTransactionConfig does not lead to an actual transaction started but SqlMapClientDelegate still thinks it needs to execute the batch.&lt;/p&gt;

&lt;p&gt;That said, I&apos;m inclined to remove the entire check in Spring&apos;s SqlMapClientTemplate and always explicitly provide a Connection to the SqlMapSession. Turning the &quot;useTransactionAwareDataSource&quot; flag off should help as well, but I guess it&apos;s nevertheless appropriate to work around even for a TransactionAwareDataSourceProxy here. After all, who knows how long it takes the iBATIS team to provide a proper solution for their problem there... They do usually listen, but it will take them a while to get a release out.&lt;/p&gt;

&lt;p&gt;FYI, we are just about to release a 1.2.7 maintenance release and a 2.0 M2 milestone release. I consider addressing the present problem in both of those releases.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15939" author="juergen.hoeller" created="Tue, 3 Jan 2006 07:45:31 +0000"  >&lt;p&gt;If you can verify that the isInBatch/executeBatch call within the iBATIS SqlMapExecutorDelegate is inappropriate in case of an existing external transaction (be it with JtaTransactionConfig or ExternalTransactionConfig), please create a corresponding bug report at the iBATIS JIRA. As this problem seems to affect plain SqlMapClient usage within EJB CMT as well, this should be fixed in the iBATIS codebase, even if we work around it in Spring&apos;s IBATIS support.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15942" author="ram_2000" created="Tue, 3 Jan 2006 12:17:21 +0000"  >&lt;p&gt;see Clinton&apos;s comments here..&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Batch-not-batching!-t419248.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Batch-not-batching!-t419248.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t like the idea of wraping the batch in a transaction...but does work.&lt;/p&gt;

&lt;p&gt;I think the standard coding style for iBatis (without spring) is to wrap everything within a transaction.&lt;/p&gt;

&lt;p&gt;If we always used user supplied connections, then we don&apos;t need to worry about wraping inside a transaction...but now using the &apos;startTransaction()&apos; method will cause an exception in iBatis (TransactionException)...Which i think is better since nobody should be using the iBatis transaction API when using Spring.&lt;/p&gt;

&lt;p&gt;--Ram.&lt;/p&gt;</comment>
                            <comment id="15944" author="juergen.hoeller" created="Tue, 3 Jan 2006 20:37:38 +0000"  >&lt;p&gt;OK, I&apos;ve removed the entire check for Spring 1.2.7 and 2.0 M2: We always execute against a SqlMapSession with explicitly provided Connection now (again), to make iBATIS batch execution work in any case. For the time being, it&apos;s probably simplest to turn SqlMapClientFactoryBean &quot;useTransactionAwareDataSource&quot; off...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15945" author="juergen.hoeller" created="Tue, 3 Jan 2006 20:47:04 +0000"  >&lt;p&gt;I must say I consider the default iBATIS behavior to be unintuitive and generally inappropriate. In particular from the point of view of EJB CMT (a pretty typical usage scenario), there should be absolutely no need for explicit startTransaction/endTransaction calls on the SqlMapSession. Instead, the SqlMapClient should simply participate in the existing transaction right away. What good is that automatic execution of a batch anyway? In my opinion, they should simply drop the entire isInBatch/executeBatch check and be done.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15965" author="ram_2000" created="Wed, 4 Jan 2006 03:42:59 +0000"  >&lt;p&gt;I couldn&apos;t agree more with you on this.&lt;/p&gt;

&lt;p&gt;There maybe some compatibility issue when migrating from a older version to 1.2.7 or 2.0...need to make sure we document this.&lt;/p&gt;

&lt;p&gt;If any code is using &apos;startTransaction() / endTransaction()&apos; they will now get an exception. The &apos;startTransaction()&apos; and &apos;endTransaction()&apos; API cannot be used anymore (with user supplied connection).&lt;/p&gt;

&lt;p&gt;Thanks for all your help on this issue.&lt;/p&gt;

&lt;p&gt;--Ram.&lt;/p&gt;</comment>
                            <comment id="17998" author="borgra" created="Tue, 13 Jun 2006 20:52:40 +0000"  >&lt;p&gt;I think this change has introduced a compatibility issue. I have the following iBatis setup. This code has been working for the last 9 months or so. &lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;sqlMapClient&quot; class=&quot;org.springframework.orm.ibatis.SqlMapClientFactoryBean&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;configLocation&quot; value=&quot;classpath:sqlmap-config.xml&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;lobHandler&quot; ref=&quot;oracleLobHandler&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;tradeData&quot; class=&quot;com.xxxxx.SqlMapTradeData&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;sqlMapClient&quot; ref=&quot;sqlMapClient&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;tradeServiceTarget&quot; class=&quot;com.xxxxx.DataTradeService&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;tradeData&quot; ref=&quot;tradeData&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;tradeService&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;target&quot; ref=&quot;tradeServiceTarget&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;proxyInterfaces&quot; value=&quot;com.xxxxx.TradeService&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;interceptorNames&quot; value=&quot;methodSecurityInterceptor,transactionInterceptor&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;transactionInterceptor&quot; class=&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;transactionAttributeSource&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;value&amp;gt;&lt;br/&gt;
        com.xxxxx.TradeService.get*=PROPAGATION_SUPPORTS,readOnly&lt;br/&gt;
        com.xxxxx.TradeService.search*=PROPAGATION_SUPPORTS,readOnly&lt;br/&gt;
        com.xxxxx.TradeService.save*=PROPAGATION_REQUIRED&lt;br/&gt;
        com.xxxxx.TradeService.delete*=PROPAGATION_REQUIRED&lt;br/&gt;
      &amp;lt;/value&amp;gt;&lt;br/&gt;
    &amp;lt;/property&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;When upgrading to either 1.2.7 or 2.0-m2 iBatis fail when trying to execute resultmaps that have properties that return lists of objects by calling another select statement, like this&lt;/p&gt;

&lt;p&gt;    &amp;lt;result&lt;br/&gt;
      property=&quot;clients&quot;&lt;br/&gt;
      column=&quot;&lt;/p&gt;
{id=id}
&lt;p&gt;&quot;&lt;br/&gt;
      select=&quot;com.xxxxx.getTradeClients&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;It works well for other usages of iBatis. I think this is a common use case though.&lt;/p&gt;

&lt;p&gt;I&apos;ve debugged the code and the issue is in the SqlMapClientTemplate.execute method that is always setting the userConnection. I don&apos;t know why this happens, but it&apos;s clear to me that iBatis does not work well if the userConnection is set by Spring like is there.&lt;/p&gt;

&lt;p&gt;It works avoiding setting the userConnection (i.e. the old code works)&lt;/p&gt;

&lt;p&gt;Please let us know how the setup of iBatis is supposed to be done with the new SqlMapClientTemplate or please provide a way to avoid setting the userConnection.&lt;/p&gt;

&lt;p&gt;Many thanks for this great framework.&lt;/p&gt;</comment>
                            <comment id="18736" author="borgra" created="Mon, 24 Jul 2006 00:13:45 +0000"  >&lt;p&gt;The issue described above has been addressed and fixed here &lt;a href=&quot;http://opensource.atlassian.com/projects/spring/browse/SPR-2153&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource.atlassian.com/projects/spring/browse/SPR-2153&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="39325" author="dede23" created="Sun, 31 Aug 2008 00:03:35 +0000"  >&lt;p&gt;&lt;a href=&quot;http://forum.lycos.co.uk/member.php?u=14064&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.lycos.co.uk/member.php?u=14064&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://forum.lycos.co.uk/member.php?u=14065&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.lycos.co.uk/member.php?u=14065&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://forum.lycos.co.uk/member.php?u=14070&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.lycos.co.uk/member.php?u=14070&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://forum.lycos.co.uk/member.php?u=14071&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.lycos.co.uk/member.php?u=14071&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://forum.lycos.co.uk/member.php?u=14072&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.lycos.co.uk/member.php?u=14072&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://forum.lycos.co.uk/member.php?u=14073&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.lycos.co.uk/member.php?u=14073&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://forum.lycos.co.uk/member.php?u=14074&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.lycos.co.uk/member.php?u=14074&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        8 years, 17 weeks, 4 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 1 Jan 2006 23:52:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01f07:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8308</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>