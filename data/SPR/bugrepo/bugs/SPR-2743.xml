<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:50:20 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2743/SPR-2743.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2743] BeanFactoryUtils.beansOfTypeIncludingAncestors(ListableBeanFactory, Class) performance is an order of magnitude slower than it was in rc3</title>
                <link>https://jira.spring.io/browse/SPR-2743</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;m troubleshooting some performance issues, and i&apos;ve noticed that a call to BeanFactoryUtils.beansOfTypeIncludingAncestors(ListableBeanFactory,Class) in RC3 had a calling stack that is about 1/2 the size that it is in 2.0 final release.  A call to this method in RC3 is taking 60ms, whereby in 2.0 final, it&apos;s taking 2730ms&lt;/p&gt;

&lt;p&gt;There seems to be a ton more checking in the 2.0 final, slowing this down to a nearly unusable speed.&lt;/p&gt;


&lt;p&gt;Here&apos;s the calling stack beneath beansOfTypeIncludingAncestors() in RC3:&lt;/p&gt;

&lt;p&gt;-AbstractApplicationContext.getBeansOfType(Class)&lt;br/&gt;
-DefaultListableBeanFactory.getBeansOfType(Class)&lt;br/&gt;
-DefaultListableBeanFactory.getBeansOfType(Class, bool, bool)&lt;br/&gt;
-DefaultListableBeanFactory.getBeanNamesForType(Class, bool, bool)&lt;br/&gt;
-AbstractBeanFactory.getMergedBeanDefinition(String, bool)&lt;br/&gt;
-AbstractBeanFactory.getMergedBeanDefinition(String, BeanDefinition)&lt;br/&gt;
-HashMap.get(Object)&lt;br/&gt;
-AbstractBeanDefinition.hashCode()&lt;br/&gt;
-ObjectUtils.nullSafeHashCode(Object)&lt;br/&gt;
-ConstructorArgumentValues.hashCode()&lt;br/&gt;
-AbstractMap.hashCode()&lt;/p&gt;

&lt;p&gt;Same unit test, here&apos;s the calling stack under beansOfTypeIncludingAncestors() in the 2.0 final release:&lt;/p&gt;

&lt;p&gt;-AbstractApplicationContext.getBeansOfType(Class)&lt;br/&gt;
-DefaultListableBeanFactory.getBeansOfType(Class)&lt;br/&gt;
-DefaultListableBeanFactory.getBeansOfType(Class, bool, bool)&lt;br/&gt;
-AbstractBeanFactory.getBean(String)&lt;br/&gt;
-DefaultListableBeanFactory.getBeanNamesForType(Class, bool, bool)&lt;br/&gt;
-ClassIsAssignableFrom(Class)&lt;br/&gt;
-AbstractBeanFactory.getMergedBeanDefinition(String, bool)&lt;br/&gt;
-AbstractBeanFactory.getMergedBeanDefinition(String, BeanDefinition)&lt;br/&gt;
-HashMap.get(Object)&lt;br/&gt;
-RootBeanDefinition.equals(Object)&lt;br/&gt;
-AbstractBeanDefinition.equals(Object)&lt;br/&gt;
-AttributeAccessorSupport.equals(Object)&lt;br/&gt;
-AbstractMap.equals(Object)&lt;br/&gt;
-ObjectUtils.nullSafeEquals(Object, Object)&lt;br/&gt;
-String.equals(Object)&lt;br/&gt;
-ConstructorArgumentValues.equals(Object)&lt;br/&gt;
-AbstractSequentialList.iterator()&lt;br/&gt;
-HashMap.get(Object)&lt;br/&gt;
-HashMap$EntryIterator.next()&lt;br/&gt;
ConstructorArgumentValues$Values$ValueHolder.access$000(ConstructorArgumentValues$ValueHolder, ConstructorArgumentValues$ValueHolder)&lt;br/&gt;
-ConstructorArgumentValues$ValueHolder.contentEquals(ConstructorArgumentValues$ValueHolder)&lt;br/&gt;
-ObjectUtils.nullSafeEquals(Object, Object)&lt;br/&gt;
-String.equals(Object)&lt;/p&gt;</description>
            <key id="15312">SPR-2743</key>
            <summary>BeanFactoryUtils.beansOfTypeIncludingAncestors(ListableBeanFactory, Class) performance is an order of magnitude slower than it was in rc3</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="ptomsic">Paul Tomsic</reporter>
                        <labels>
                            <label>performance</label>
                    </labels>
                <created>Mon, 23 Oct 2006 05:37:15 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:59 +0000</updated>
                            <resolved>Thu, 26 Oct 2006 08:43:06 +0000</resolved>
                                    <version>2.0 final</version>
                                    <fixVersion>2.0.1</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="20443" author="bde" created="Wed, 25 Oct 2006 05:29:26 +0000"  >&lt;p&gt;The hashCode computation of AbstractBeanDefinition is not producing useful values.&lt;/p&gt;

&lt;p&gt;Say you have two beans:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;foo&quot; class=&quot;Foo&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;constructor-arg&amp;gt;&amp;lt;value&amp;gt;foo&amp;lt;/value&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;bar&quot; class=&quot;Foo&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;constructor-arg&amp;gt;&amp;lt;value&amp;gt;bar&amp;lt;/value&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;The AbstractBeanDefinition of each will hash to the value in 2.0, but not in 2.0-rc3.  The problem is the change in hash computation of ConstructorArgumentValues, which is now based only on the number of arguments.  As a result, the hash map gets in AbstractBeanFactory.mergedBeanDefinitions.get() take a lot longer if the beans ONLY differ by argument values.  &lt;/p&gt;

&lt;p&gt;I am attaching a unit test that shows the performance difference in 2.0-rc3 over 2.0 final.  The test is supposed to simulate the idea that when the hashCode calculation of AbstractBeanDefinition does not produce good numbers, the java.util.HashMap.get() will utilize the object&apos;s equals() method to resolve the hash collision.  AbstractBeanDefinition.equals() calls ConstructArgumentValues.equals(), which is potentially pretty slow.&lt;/p&gt;

&lt;p&gt;Can the ConstructorArgumentValues.hashCode() be changed back to like it was in 2.0-rc3?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;Brian&lt;/p&gt;</comment>
                            <comment id="20444" author="bde" created="Wed, 25 Oct 2006 05:30:21 +0000"  >&lt;p&gt;Unit test demonstrating the problem.  It is significantly faster when run against 2.0-rc3 than in 2.0 final.  See my comment on the JIRA.&lt;/p&gt;</comment>
                            <comment id="20452" author="costin" created="Wed, 25 Oct 2006 19:35:33 +0000"  >&lt;p&gt;As far as I can tell, the change was done at revision 1.19, the comment being (Fix for &lt;a href=&quot;https://jira.spring.io/browse/SPR-1776&quot; title=&quot;Implement equals() and hashCode() on all bean definition metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-1776&quot;&gt;&lt;del&gt;SPR-1776&lt;/del&gt;&lt;/a&gt; - removed one equals() implementation until strange test failure is fixed.)&lt;br/&gt;
The old, fast hashCode() used genericArgumentValues and indexedArgumentValues hashcode while the new one uses the collections size. Also the equal method has been replaced, the new one parsing all the list elements. This might be the cause of the problem.&lt;/p&gt;
</comment>
                            <comment id="20462" author="bde" created="Thu, 26 Oct 2006 03:08:00 +0000"  >&lt;p&gt;Patch.&lt;/p&gt;</comment>
                            <comment id="20472" author="juergen.hoeller" created="Thu, 26 Oct 2006 08:43:06 +0000"  >&lt;p&gt;Actually, the most effective way of solving this is changing AbstractBeanFactory&apos;s &quot;mergedBeanDefinitions&quot; cache to use the bean name as key instead of the original BeanDefinition instance... This removes this most dominant need for BeanDefinition hashCode/equals checks in the first place.&lt;/p&gt;

&lt;p&gt;Aside from that, I have also refined the hashCode implementation in ConstructorArgumentValues, building a hash code based on the content of the contained ValueHolder objects. We can&apos;t simply use the Collection hashCode there, since ValueHolder &lt;b&gt;does not&lt;/b&gt; implement equals and hashCode based on the content: It rather has separate &quot;contentEquals&quot; and &quot;contentHashCode&quot; methods. The reason for this is that multiple ValueHolder instances with the same content need to be able to live within the same HashSet (in case of multiple generic constructor arguments with the same value).&lt;/p&gt;

&lt;p&gt;In any case, thanks for pointing this out!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12063" name="ConstructorArgValuesTest.java" size="2760" author="bde" created="Wed, 25 Oct 2006 05:30:21 +0000"/>
                            <attachment id="12065" name="SPR-2743.patch" size="1054" author="bde" created="Thu, 26 Oct 2006 03:08:00 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 10 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 25 Oct 2006 05:29:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00vh3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5144</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>