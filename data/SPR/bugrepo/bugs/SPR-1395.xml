<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:31:46 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1395/SPR-1395.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1395] Exception thrown invoking methods on Spring JMX MBeans with Weblogic 8.1 MBeanServer</title>
                <link>https://jira.spring.io/browse/SPR-1395</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Please see that following post for more information.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://forum.springframework.org/viewtopic.php?p=38242#38242&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/viewtopic.php?p=38242#38242&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</description>
            <key id="12578">SPR-1395</key>
            <summary>Exception thrown invoking methods on Spring JMX MBeans with Weblogic 8.1 MBeanServer</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robh">Rob Harrop</assignee>
                                    <reporter username="kbaum">Karl Baum</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Oct 2005 01:07:24 +0000</created>
                <updated>Tue, 19 Jun 2012 03:53:57 +0000</updated>
                            <resolved>Fri, 21 Oct 2005 23:08:59 +0000</resolved>
                                    <version>1.2.5</version>
                                    <fixVersion>1.2.6</fixVersion>
                                    <component>JMX</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="15030" author="kbaum" created="Wed, 19 Oct 2005 01:13:17 +0000"  >&lt;p&gt;To reproduce this issue, deploy the following war file in a weblogic 8.1 sp4 application server using jrocket 1.4.2.&lt;/p&gt;</comment>
                            <comment id="15031" author="kbaum" created="Wed, 19 Oct 2005 01:15:35 +0000"  >&lt;p&gt;The following jmx-example-src.zip file contains the source used to reproduce this issue.&lt;/p&gt;</comment>
                            <comment id="15054" author="robh" created="Thu, 20 Oct 2005 01:47:55 +0000"  >&lt;p&gt;A quick progress report.&lt;/p&gt;

&lt;p&gt;This issue is solvable using a purely configuration-based approach although the solution itself is not ideal.&lt;/p&gt;

&lt;p&gt;Firstly, and most simply, you need to set the exposeClassDescriptor property of our chosen MBeanInfoAssembler implementation to true:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;exporter&quot; class=&quot;org.springframework.jmx.export.MBeanExporter&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;beans&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;map&amp;gt;&lt;br/&gt;
                &amp;lt;entry key=&quot;spring:name=MyBean&quot; value-ref=&quot;myBean&quot; /&amp;gt;&lt;br/&gt;
            &amp;lt;/map&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;server&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;ref bean=&quot;server&quot; /&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;assembler&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;bean class=&quot;org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler&quot;&amp;gt;&lt;br/&gt;
                &amp;lt;property name=&quot;exposeClassDescriptor&quot; value=&quot;true&quot;/&amp;gt;&lt;br/&gt;
            &amp;lt;/bean&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;That is quite easy - however the main problem lies in the fact that your application classes are unaccessible from the RequiredModelMBean class. To get around this you need to put your application classes on the classpath &lt;b&gt;before&lt;/b&gt; any WLS classes. I have raised this issue with the JMX team at BEA to see if there is a better solution - I&apos;ll keep you posted.&lt;/p&gt;</comment>
                            <comment id="15094" author="robh" created="Fri, 21 Oct 2005 23:08:59 +0000"  >&lt;p&gt;I think we have done all we can do on this for 1.2.6. I&apos;ll reopen this issue if BEA are able to come up with a better workaround.&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="17622" author="deki" created="Mon, 15 May 2006 01:32:53 +0000"  >&lt;p&gt;&quot;To get around this you need to put your application classes on the classpath &lt;b&gt;before&lt;/b&gt; any WLS classes.&quot;&lt;/p&gt;

&lt;p&gt;How can I do this?&lt;/p&gt;</comment>
                            <comment id="17655" author="jamesbow" created="Tue, 16 May 2006 23:41:53 +0000"  >&lt;p&gt;This fixed the same problem for us on weblogic.  We are starting weblogic from the command line:&lt;br/&gt;
java -classpath &amp;lt;your server classes&amp;gt;; &amp;lt;path to&amp;gt; weblogic.jar  -Dweblogic.Domain=csldomain -Dweblogic.Name=node1_primary -Dbea.home=c:bea -Djava.security.policy==C:\bea\weblogic81\server/lib/weblogic.policy&lt;br/&gt;
  -Dweblogic.management.discover=false -Dweblogic.ProductionModeEnabled=true  weblogic.Server&lt;/p&gt;

&lt;p&gt;So it was just a case of playing with the &amp;lt;your server classes&amp;gt; classpath&lt;/p&gt;
</comment>
                            <comment id="18702" author="jamesbow" created="Thu, 20 Jul 2006 20:31:39 +0000"  >&lt;p&gt;If you don&apos;t want to set your classes high in the boot classpath for the entire server installation (as it breaks the classloading model of web apps), we have a code workaround:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Make sure your classpath is set up how weblogic would normally setup the classpath&lt;/li&gt;
	&lt;li&gt;Create a subclass of javax.management.modelmbean.RequiredModelMBean, called MyModelMBean&lt;/li&gt;
	&lt;li&gt;Ensure you override the public Object invoke(String opName, Object[] opArgs, String[] sig) method, using your own reflection to invoke the method on the target object&lt;/li&gt;
	&lt;li&gt;package MyModelMBean in with your application&lt;/li&gt;
	&lt;li&gt;When you call mbeanServer.registerMBean pass in an instance of MyModelMBean and the required ObjectName to bind it to&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This works because the MyModelMBean class is loaded by the same classloader as one of your target objects, so that classloader should have access to the class of the target object.&lt;/p&gt;

&lt;p&gt;This can be done in Spring by composing the SimpleReflectiveMBeanInfoAssembler in a new Assembler and wrapping/overriding the method that produces/publishes the MBean&lt;/p&gt;</comment>
                            <comment id="20203" author="q1mu" created="Wed, 11 Oct 2006 21:53:44 +0000"  >&lt;p&gt;This is a problem I have. &lt;/p&gt;

&lt;p&gt;I am trying to invoke methods on Spring JMX MBeans with Weblogic 8.1 MBeanServer. I dont want to change standard classpath. I was reading your suggestion form 21/Jul/06 04:31 AM but&lt;/p&gt;

&lt;p&gt;1)&lt;br/&gt;
I dont exactly undestand how should I override invoke method. The original method has a lot of calls to protected methods and I don&apos;t want to override too much.&lt;/p&gt;

&lt;p&gt;2)&lt;br/&gt;
How can I force Spring to use MyModelMBean? Can I do it in applicationContext.xml ? At the moment it contains:&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;mbeanServer&quot; class=&quot;org.springframework.jmx.support.WebLogicJndiMBeanServerFactoryBean&quot;&amp;gt;&lt;br/&gt;
   &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;exporter&quot; class=&quot;org.springframework.jmx.export.MBeanExporter&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;beans&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;map&amp;gt;&lt;br/&gt;
                &amp;lt;entry key=&quot;bean:name=jmxTestBeanName0&quot; value-ref=&quot;jmxTestBean0&quot;/&amp;gt;&lt;br/&gt;
                &amp;lt;entry key=&quot;bean:name=jmxTestBeanName1&quot; value-ref=&quot;jmxTestBean1&quot;/&amp;gt;&lt;br/&gt;
                &amp;lt;entry key=&quot;bean:name=jmxTestBeanName2&quot; value-ref=&quot;jmxTestBean2&quot;/&amp;gt;&lt;br/&gt;
            &amp;lt;/map&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;server&quot; ref=&quot;mbeanServer&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;assembler&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;bean class=&quot;org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler&quot;&amp;gt;&lt;br/&gt;
                       &amp;lt;property name=&quot;exposeClassDescriptor&quot; value=&quot;true&quot;/&amp;gt;&lt;br/&gt;
             &amp;lt;/bean&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;jmxTestBean0&quot; class=&quot;dk.nykredit.product.pfp.q1mu.JmxTestBean&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;name&quot; value=&quot;TEST&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;age&quot; value=&quot;100&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;jmxTestBean1&quot; class=&quot;dk.nykredit.product.pfp.q1mu.JmxTestBean&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;name&quot; value=&quot;TEST 2&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;age&quot; value=&quot;102&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;


&lt;p&gt;    &amp;lt;bean id=&quot;jmxTestBean2&quot; class=&quot;dk.nykredit.product.pfp.q1mu.JmxTestBean&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;name&quot; value=&quot;TEST 3&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;age&quot; value=&quot;105&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;</comment>
                            <comment id="20209" author="kbaum" created="Wed, 11 Oct 2006 23:31:00 +0000"  >&lt;p&gt;Here&apos;s what worked for me.  I extended MBeanExporter and overrode the createModelMBean method to return the apache commons modeler BaseModelBean implementation of ModelMBean.  The key is that the commons-modeler.jar has to be deployed within the enterprise classloader APP-INF/lib directory.  Here it can see your other enterprise classes and invoke methods on your beans.&lt;/p&gt;

&lt;p&gt;public class CommonsModelerMBeanExporter extends MBeanExporter {&lt;/p&gt;

&lt;p&gt;	protected ModelMBean createModelMBean() throws MBeanException &lt;/p&gt;
{
		return new BaseModelMBean();
	}

&lt;p&gt;} &lt;/p&gt;

&lt;p&gt;In your config above, instead of using Spring&apos;s MBeanExporter, use the CommonsModelerMBeanExporter defined above.&lt;/p&gt;

&lt;p&gt;Let me know if that works for you.&lt;/p&gt;

&lt;p&gt;thx.&lt;/p&gt;

&lt;p&gt;-karl&lt;/p&gt;</comment>
                            <comment id="20213" author="q1mu" created="Thu, 12 Oct 2006 01:08:43 +0000"  >&lt;p&gt;Karl,&lt;/p&gt;

&lt;p&gt;Thanks a lot!&lt;/p&gt;

&lt;p&gt;This is very nice &amp;amp; clean solution AND IT WORKS!&lt;/p&gt;

&lt;p&gt;Lukasz&lt;/p&gt;
</comment>
                            <comment id="20260" author="kbaum" created="Sat, 14 Oct 2006 01:08:07 +0000"  >&lt;p&gt;Is MBeanExporter.setExposeManagedResourceClassLoader meant to solve this issue?  If so it looks like it&apos;s first available in Spring 2.0.&lt;/p&gt;

&lt;p&gt;thx.&lt;/p&gt;

&lt;p&gt;-karl&lt;/p&gt;</comment>
                            <comment id="24573" author="dfauth" created="Wed, 27 Jun 2007 22:27:53 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;This problem still exists in weblogic 8.1.6 with Spring 2.0.3. From my investigations its a bug in the class javax.management.modelmbean.DescriptorSupport which comes in weblogic.jar (although it was written by Sun?). &lt;/p&gt;

&lt;p&gt;In any case, javax.management.modelmbean.RequiredModelMBean invokes a Class.forName(): (This is the code for the 1.1 RI which is not the same as that in weblogic 8.1, but is the closest I could find)&lt;/p&gt;

&lt;p&gt;                                /* Have to use MethodDescriptor of mbeaninfo and strip off last token */&lt;br/&gt;
                                /* note: this means that the opName is the fully qualified class.method name */&lt;br/&gt;
                                /* or it has to have a &quot;class&quot; field in descriptor */&lt;br/&gt;
                                /* or the class of the target object will be used */&lt;br/&gt;
                                Class opClass = null;&lt;br/&gt;
                                try {&lt;br/&gt;
                                    if (tracing()) trace(&quot;invoke(String, Object[], String[])&quot;, &quot;getting class for operation&quot;);&lt;br/&gt;
                                    // get target object class name&lt;br/&gt;
                                    if ((opClassName == null) || opClassName.equals(&quot;&quot;)) {&lt;br/&gt;
                                        opClassName = (String) opDescr.getFieldValue(&quot;class&quot;);&lt;br/&gt;
                                        if ((opClassName == null) || (opClassName.equals(&quot;&quot;))) &lt;/p&gt;
{
                                            opClass = currObj.getClass();
                                        }
&lt;p&gt; else &lt;/p&gt;
{
					    opClass = loadClass(opClassName);
					}
&lt;p&gt;                                    } else &lt;/p&gt;
{
					opClass = loadClass(opClassName);
                                    }
&lt;p&gt;                                    if (opClass == null) &lt;/p&gt;
{
                                        throw new ReflectionException(new ClassNotFoundException(&quot;A valid class could not be found for &quot; + opMethodName),
                                                                      &quot;Exception occured while trying to find class for method of invoke&quot;);
                                    }
&lt;p&gt;                                } catch (ClassNotFoundException cnf) &lt;/p&gt;
{
                                    throw new ReflectionException(cnf, &quot;The target object class &quot; + opClassName + &quot; could not be found&quot;);
                                }

&lt;p&gt;The error message I get is &quot;The target object class class javax.management.modelmbean.ModelMBeanOperationInfo could not be found&quot;&lt;/p&gt;

&lt;p&gt;Note the class name appears to be &quot;class javax.management.modelmbean.ModelMBeanOperationInfo&quot; and not &quot;javax.management.modelmbean.ModelMBeanOperationInfo&quot;, so it appears to me to just be a straight out bug in manipulating or storing the classname.&lt;/p&gt;

&lt;p&gt;One interesting workaround I found is that if your MBean implementation slavishly follows the MBean naming rules  - ie if your class is called &lt;/p&gt;

&lt;p&gt;com.mycompany.project.service.impl.MyServiceImpl and it implements an interface com.mycompany.project.service.impl.MyServiceImplMBean&lt;/p&gt;

&lt;p&gt;spring will register your implementation directly with the MBeanServer, by passing RequiredModelMBean and therefore bypassing this bug also.&lt;/p&gt;

&lt;p&gt;Hope this helps,&lt;/p&gt;

&lt;p&gt;Damian&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11213" name="jmx-example-src.zip" size="4750" author="kbaum" created="Wed, 19 Oct 2005 01:15:35 +0000"/>
                            <attachment id="11212" name="jmx-example.war" size="2652148" author="kbaum" created="Wed, 19 Oct 2005 01:13:17 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 27 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 20 Oct 2005 01:47:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i020nb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11814</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>