<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:08:21 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-3946/SPR-3946.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-3946] @Autowire does not work as expected for Collections based Repository implementation</title>
                <link>https://jira.spring.io/browse/SPR-3946</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Consider the following Repository artifacts:&lt;/p&gt;

&lt;p&gt;    public interface PersonRepository extends Set&amp;lt;Person&amp;gt; {} &lt;/p&gt;

&lt;p&gt;    final class JdoPersonRepository extends AbstractSet&amp;lt;Person&amp;gt; implements PersonRepository &lt;/p&gt;
{
        // ... implementation omitted
    }

&lt;p&gt;And the test that excercises them:&lt;/p&gt;

&lt;p&gt;    @RunWith(SpringJUnit4ClassRunner.class)&lt;br/&gt;
    @ContextConfiguration&lt;br/&gt;
    public class PersonRepositoryTests &lt;/p&gt;
{
	    @Autowired
	    private PersonRepository personRepository;

            // test methods omitted...
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;And finally, the named-by-convention beans XML used by the test (PersonRepositoryTests-context.xml):&lt;/p&gt;

&lt;p&gt;    &amp;lt;beans ...&amp;gt;&lt;br/&gt;
        &amp;lt;bean id=&quot;pmf&quot; class=&quot;org.springframework.orm.jdo.LocalPersistenceManagerFactoryBean&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;property name=&quot;configLocation&quot; value=&quot;classpath:jpox.properties&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;        &amp;lt;bean id=&quot;pmfProxy&quot; class=&quot;org.springframework.orm.jdo.TransactionAwarePersistenceManagerFactoryProxy&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;property name=&quot;targetPersistenceManagerFactory&quot; ref=&quot;pmf&quot; /&amp;gt;&lt;br/&gt;
            &amp;lt;property name=&quot;allowCreate&quot; value=&quot;false&quot; /&amp;gt;&lt;br/&gt;
        &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;        &amp;lt;bean id=&quot;personRepository&quot; class=&quot;com.foo.domain.JdoPersonRepository&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;constructor-arg ref=&quot;pmfProxy&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;        &amp;lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.jdo.JdoTransactionManager&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;property name=&quot;persistenceManagerFactory&quot; ref=&quot;pmf&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;        &amp;lt;tx:annotation-driven/&amp;gt;&lt;br/&gt;
    &amp;lt;/beans&amp;gt;&lt;/p&gt;


&lt;p&gt;Expected behavior when running the test:&lt;/p&gt;

&lt;p&gt;1) Spring bootstraps an ApplicationContext backed by PersonRepositoryTests-context.xml&lt;br/&gt;
2) The @Autowired &apos;personRepository&apos; dependency is detected within my PersonRepositoryTests class&lt;br/&gt;
3) Spring looks up this resource by type and injects it directly at the field level, with no further ado.&lt;/p&gt;


&lt;p&gt;Actual behavior when running the test:&lt;/p&gt;

&lt;p&gt;Steps (1) and (2) execute as expected.&lt;/p&gt;

&lt;p&gt;Step (3) however, gets more complicated.  Because java.util.Collection is assignable from PersonRepository, the logic in AbstractAutowireCapableBeanFactory (fisheye: &lt;a href=&quot;http://tinyurl.com/2utx6u&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://tinyurl.com/2utx6u&lt;/a&gt;) assumes that I want my JdoPersonRepository bean to be autowired with beans of its generic collection parameter type (which is Person in this case).  Furthermore it fails upon being unable to locate at least one such Person beans in the container.  Relevant excepts from the resulting stack trace follow:&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;com.foo.MyTests&apos;: Autowiring of fields failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.foo.domain.PersonRepository com.foo.MyTests.personRepository; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type &lt;span class=&quot;error&quot;&gt;&amp;#91;com.foo.domain.Person&amp;#93;&lt;/span&gt; is defined: Unsatisfied dependency of type &lt;span class=&quot;error&quot;&gt;&amp;#91;com.foo.domain.Person&amp;#93;&lt;/span&gt;: expected at least 1 matching bean&lt;br/&gt;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessAfterInstantiation(AutowiredAnnotationBeanPostProcessor.java:208)&lt;br/&gt;
...&lt;br/&gt;
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type &lt;span class=&quot;error&quot;&gt;&amp;#91;com.foo.domain.Person&amp;#93;&lt;/span&gt; is defined: Unsatisfied dependency of type &lt;span class=&quot;error&quot;&gt;&amp;#91;com.foo.domain.Person&amp;#93;&lt;/span&gt;: expected at least 1 matching bean&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveDependency(AbstractAutowireCapableBeanFactory.java:373)&lt;/p&gt;


&lt;p&gt;Suffice to say this behavior is not what I want or expect to happen.&lt;/p&gt;

&lt;p&gt;But, as the issue type of &apos;Improvement&apos; suggests, I don&apos;t know that I can call this a &apos;bug&apos; either.  I can see that the original design intent is being fulfilled; it&apos;s just that I have a use case for which that design causes problems.&lt;/p&gt;

&lt;p&gt;Could we conceive a way to (configurably) relax this assumption that Collection-based beans must have one or more element beans declared in the container?&lt;/p&gt;

&lt;p&gt;Also note, this issue is somewhat related to &lt;a href=&quot;https://jira.spring.io/browse/SPR-3668&quot; title=&quot;DI with typed collections - NullPointerException on TypeConverterDelegate.convertToTypedCollection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-3668&quot;&gt;&lt;del&gt;SPR-3668&lt;/del&gt;&lt;/a&gt;, where I encountered a similar problem with the container attempting to call size() on beans assignable to Collection.  Juergen relaxed this behavior, and I&apos;m hoping we can do the same here.  (see especially his comment on the issue: &lt;a href=&quot;http://opensource.atlassian.com/projects/spring/browse/SPR-3668#action_24701&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource.atlassian.com/projects/spring/browse/SPR-3668#action_24701&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I do have a workaround in the meantime:  instead of declaring my dependency by interface:&lt;/p&gt;

&lt;p&gt;    @Autowired&lt;br/&gt;
    private PersonRepository personRepository; &lt;/p&gt;

&lt;p&gt;I&apos;m now declaring by concrete type:&lt;/p&gt;

&lt;p&gt;    @Autowired&lt;br/&gt;
    private JdoPersonRepository personRepository; &lt;/p&gt;

&lt;p&gt;This bypasses the &apos;&amp;amp;&amp;amp; type.isInterface()&apos; condition (see fisheye link above), and allows the bean to simply be returned and injected without further complication.&lt;/p&gt;


&lt;p&gt;At any rate, thanks for looking into this.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Chris Beams&lt;/li&gt;
&lt;/ul&gt;

</description>
            <key id="18092">SPR-3946</key>
            <summary>@Autowire does not work as expected for Collections based Repository implementation</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="cbeams">Chris Beams</reporter>
                        <labels>
                    </labels>
                <created>Sat, 29 Sep 2007 11:57:29 +0000</created>
                <updated>Thu, 7 Jul 2011 18:52:31 +0000</updated>
                            <resolved>Thu, 7 Jul 2011 18:51:27 +0000</resolved>
                                    <version>2.1 M4</version>
                                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="26602" author="cbeams" created="Sat, 29 Sep 2007 12:02:58 +0000"  >&lt;p&gt;The fisheye link above was not to the exact line as I had intended (line 362).  Here&apos;s a better link: &lt;a href=&quot;http://tinyurl.com/2w77zv&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://tinyurl.com/2w77zv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The formatting on the test case was a bit off, too.  Here&apos;s a better look at it:&lt;/p&gt;

&lt;p&gt;    @RunWith(SpringJUnit4ClassRunner.class) &lt;br/&gt;
    @ContextConfiguration &lt;br/&gt;
    public class PersonRepositoryTests &lt;/p&gt;
{ 
        @Autowired 
        private PersonRepository personRepository; 

            // test methods omitted... 
    }
&lt;p&gt; &lt;/p&gt;</comment>
                            <comment id="26610" author="sbrannen" created="Sun, 30 Sep 2007 02:31:07 +0000"  >&lt;p&gt;Hi Chris,&lt;/p&gt;

&lt;p&gt;&amp;gt; I do have a workaround in the meantime: instead of declaring my dependency by interface:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;     @Autowired&lt;br/&gt;
&amp;gt;     private PersonRepository personRepository;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I&apos;m now declaring by concrete type:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;     @Autowired&lt;br/&gt;
&amp;gt;     private JdoPersonRepository personRepository;&lt;/p&gt;

&lt;p&gt;There is actually a much simpler solution. Whenever @Autowired semantics do not meet&lt;br/&gt;
your needs, you always have to option of injecting dependencies &quot;by name&quot; using the&lt;br/&gt;
@Resource annotation from JSR 250.&lt;/p&gt;

&lt;p&gt;Try the following instead of your aforementioned work-around:&lt;/p&gt;

&lt;p&gt;    @Resource&lt;br/&gt;
    private PersonRepository personRepository;&lt;/p&gt;

&lt;p&gt;This is 100% in line with @Resource semantics in a Spring container and is therefore&lt;br/&gt;
not even a &quot;work-around&quot;. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;cheers,&lt;/p&gt;

&lt;p&gt;  Sam&lt;/p&gt;</comment>
                            <comment id="26615" author="cbeams" created="Sun, 30 Sep 2007 03:04:46 +0000"  >&lt;p&gt;Good call.  I thought of this originally, but didn&apos;t want to hassle with a dependency on javaee-api just for the @Resource annotation (I&apos;m using JDK5).  It&apos;s clearly worth the hassle at this point &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ve swapped out the usage of @Autowired with @Resource, and everything &apos;just works&apos;.  Thanks.&lt;/p&gt;</comment>
                            <comment id="26616" author="sbrannen" created="Sun, 30 Sep 2007 03:59:22 +0000"  >&lt;p&gt;&amp;gt; Good call. I thought of this originally, but didn&apos;t want to hassle with a&lt;br/&gt;
&amp;gt; dependency on javaee-api just for the @Resource annotation (I&apos;m using JDK5).&lt;/p&gt;

&lt;p&gt;Well, the &quot;Common Annotations for Java&quot; from JSR 250 are actually part of JSE 6.&lt;br/&gt;
So from JDK 1.6 onwards, you don&apos;t even need to do anything special to use these&lt;br/&gt;
annotations. JSR 250 annotations are of course also bundled with JEE 5.&lt;/p&gt;

&lt;p&gt;For JSE 5, however, you only need to include the jsr250-api-1.0.jar (which&lt;br/&gt;
is just 6 KB) in your projects. If you&apos;re using Maven2, you can include the&lt;br/&gt;
following dependency in your POM:&lt;/p&gt;

&lt;p&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;
    &amp;lt;groupId&amp;gt;javax.annotation&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    &amp;lt;artifactId&amp;gt;jsr250-api&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;&lt;br/&gt;
&amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;So in that regard, I consider this a very small dependency for JSE 5, and once&lt;br/&gt;
your projects migrate to Java 6, you&apos;ll get these annotations out-of-the-box.&lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;ve swapped out the usage of @Autowired with @Resource, and everything&lt;br/&gt;
&amp;gt; &apos;just works&apos;. Thanks.&lt;/p&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;Glad to be of service,&lt;/p&gt;

&lt;p&gt; Sam&lt;/p&gt;</comment>
                            <comment id="26617" author="cbeams" created="Sun, 30 Sep 2007 04:12:28 +0000"  >&lt;p&gt;&amp;gt; For JSE 5, however, you only need to include the jsr250-api-1.0.jar&lt;/p&gt;

&lt;p&gt;Perfect.  Thanks for pointing that out.&lt;/p&gt;</comment>
                            <comment id="68199" author="cbeams" created="Thu, 7 Jul 2011 18:51:28 +0000"  >&lt;p&gt;Please see &lt;a href=&quot;https://jira.spring.io/browse/SPR-8519&quot; title=&quot;Support injection of collection-typed beans using @Autowired+@Qualifier or @Inject+@Named &quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-8519&quot;&gt;&lt;del&gt;SPR-8519&lt;/del&gt;&lt;/a&gt;, which aims to address this and a number of other similar issues related to collection autowiring.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10130">
                    <name>Supersede</name>
                                                                <inwardlinks description="is superseded by">
                                        <issuelink>
            <issuekey id="38687">SPR-8519</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        5 years, 25 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 30 Sep 2007 02:31:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i038lb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18934</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>