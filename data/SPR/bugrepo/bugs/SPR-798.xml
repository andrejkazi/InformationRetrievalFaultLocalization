<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:06:56 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-798/SPR-798.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-798] BindException.getFieldValue(String) uses PropertyEditor.getAsText() instead of getValue()</title>
                <link>https://jira.spring.io/browse/SPR-798</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;In one of my beans, I return a Set of Longs. I use this set to populate a multiple select box on a Web.&lt;/p&gt;

&lt;p&gt;I registered an Editor to the field. When doing status.value I expected to get a Set, but I am getting a String. BindStatus reuses the following code from BindException:&lt;/p&gt;

&lt;p&gt;        public Object getFieldValue(String field) {&lt;br/&gt;
                FieldError fe = getFieldError(field);&lt;br/&gt;
                String fixedField = fixedField(field);&lt;br/&gt;
                // use rejected value in case of error, current bean property value else&lt;br/&gt;
                Object value = (fe != null) ? fe.getRejectedValue() : getBeanWrapper().getPropertyValue(fixedField);&lt;br/&gt;
                // apply custom editor, but not on binding failures like type mismatches&lt;br/&gt;
                if (fe == null || !fe.isBindingFailure()) {&lt;br/&gt;
                        PropertyEditor customEditor = getCustomEditor(fixedField);&lt;br/&gt;
                        if (customEditor != null) &lt;/p&gt;
{
                                customEditor.setValue(value);
                                return customEditor.getAsText();
                        }
&lt;p&gt;                }&lt;br/&gt;
                return value;&lt;br/&gt;
        } &lt;/p&gt;


&lt;p&gt;Here one can see that the customEditor is used but the method getAsText() is used, not the getValue().&lt;/p&gt;

&lt;p&gt;I don&apos;t understand this choice. It breaks symetry between displaying and submitting my form.&lt;/p&gt;

&lt;p&gt;Someone else reported the same issue on the devel list back in September 2004.&lt;br/&gt;
&lt;a href=&quot;http://news.gmane.org/find-root.php?message_id=%3c41378671.1090307%40pcedev.com%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://news.gmane.org/find-root.php?message_id=%3c41378671.1090307%40pcedev.com%3e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Workaround is to respecify my field using its path. Ugly.&lt;/p&gt;

&lt;p&gt;Not sure how to fix that. Fixing it would break existing code. Introducing an interface like proposed in the mail in -devel would makes things complex for what is supposed to be normal case to me.&lt;/p&gt;</description>
            <key id="11290">SPR-798</key>
            <summary>BindException.getFieldValue(String) uses PropertyEditor.getAsText() instead of getValue()</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="lacostej">Jerome Lacoste</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Mar 2005 00:33:57 +0000</created>
                <updated>Tue, 5 Apr 2005 22:02:11 +0000</updated>
                            <resolved>Tue, 5 Apr 2005 22:02:11 +0000</resolved>
                                    <version>1.1.5</version>
                                    <fixVersion>1.2 RC2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12640" author="lacostej" created="Mon, 21 Mar 2005 02:39:33 +0000"  >&lt;p&gt;I see this somewhat similar change in the 1.1.5 release notes&lt;/p&gt;

&lt;p&gt;Package org.springframework.web&lt;br/&gt;
changed &quot;spring:transform&quot; tag&apos;s &quot;value&quot; attribute from String to Object, to allow for expressions resolved by JSP 2.0&lt;/p&gt;</comment>
                            <comment id="12656" author="mdond" created="Mon, 21 Mar 2005 19:59:07 +0000"  >&lt;p&gt;I second this issue.&lt;/p&gt;

&lt;p&gt;I want to add an observation regarding this issue in the context of validation of wizard-pages. I added some custom code for validation like springs ValidationUtils. I.e. I implemented a static method to validate a deadline (date should not be empty and not in the past).&lt;br/&gt;
The comment in my sourcecode shows the problem of&lt;br/&gt;
errors.getFieldValue() in this case. I call this code from &lt;br/&gt;
AbstractWizardFormController.validatePage(Object command, Errors errors, int page).&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Maarten&lt;/p&gt;

&lt;p&gt;----------------------------------------------&lt;/p&gt;

&lt;p&gt;public static void rejectIfIllegalDeadline(&lt;br/&gt;
     Errors errors, String fieldDate)&lt;br/&gt;
{&lt;br/&gt;
    rejectIfEmpty(errors, fieldDate);&lt;br/&gt;
    Object value = errors.getFieldValue(fieldDate);&lt;br/&gt;
    if (value == null)&lt;/p&gt;
    {
        return;
    }

&lt;p&gt;   /* &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;For not nested properties, errors.getFieldValue() returns&lt;/li&gt;
	&lt;li&gt;the property value as text. For nested properties&lt;/li&gt;
	&lt;li&gt;errors.getFieldValue() can&apos;t find the type of the property&lt;/li&gt;
	&lt;li&gt;and therefore returns the property value as is.&lt;/li&gt;
	&lt;li&gt;So in some cases here the string is converted back&lt;/li&gt;
	&lt;li&gt;to the original value.&lt;br/&gt;
    */&lt;br/&gt;
    if (!(value instanceof Date) &amp;amp;&amp;amp; &lt;br/&gt;
         (errors instanceof BindException))
    &lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {        BindException bind = (BindException) errors;        PropertyEditor editor = bind.getCustomEditor(fieldDate);        if (editor!=null)        {
            editor.setAsText((String) value);
            value = editor.getValue();
        }    }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;    if (!(value instanceof Date))&lt;/p&gt;
    {
        errors.rejectValue(fieldDate, WRONG_TYPE, null, fieldDate
                + &quot; doesn&apos;t contain Date.class&quot;);
        return;
    }
&lt;p&gt;    Date deadline = (Date) value;&lt;br/&gt;
    Date today = new Date();&lt;br/&gt;
    if (LifeCycle.compareDayTo(deadline, today) &amp;lt; 0)&lt;/p&gt;
    {
        errors.rejectValue(deadline, FROM_IN_PAST, 
            null, fieldDate + &quot; must be in future&quot;);
    }
&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="12659" author="juergen.hoeller" created="Mon, 21 Mar 2005 22:45:42 +0000"  >&lt;p&gt;Well, the idea of that PropertyEditor.getAsText() call is to transform a value back to its human-readable String form, assuming that it came as String value originally. A typical use case is a Date, where the DateFormat should be applied on rendering too, not just on parsing.&lt;/p&gt;

&lt;p&gt;Why do you have a PropertyEditor registered for your properties? I would assume because a String value comes in. Then why do you need the non-String value exposed on rendering?&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="12660" author="juergen.hoeller" created="Mon, 21 Mar 2005 22:58:42 +0000"  >&lt;p&gt;For your Set of Longs, did you register a custom editor for the field with type Long.class, or did you omit the type? To make the editor kick in just for collection elements rather than the collection itself, the element type needs to be specified.&lt;/p&gt;

&lt;p&gt;Or are you transforming from an incoming String value to the entire Set of Longs? Then the editor would have to be registered for the collection itself, which in turn would make it render the collection as a String. This might be surprising.&lt;/p&gt;

&lt;p&gt;Of course, you can always access your field directly, by accessing the corresponding property of your model object through a Java expression or JSP EL expression. That might be better in general if you rely on always accessing the raw value - because in case of a binding error, Errors.getFieldValue will always return the rejected String value, even if the underlying property is a Long or a Set.&lt;/p&gt;

&lt;p&gt;I guess the consequence is: Use Errors.getFieldValue only if you can accept a String value too, be it rendered by a custom PropertyEditor or a rejected user input String. Use direct model object access else, for example through JSP EL.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="12661" author="mdond" created="Tue, 22 Mar 2005 01:31:29 +0000"  >&lt;p&gt;I still think errors.getFieldValue() doesn&apos;t have the right behaviour to use in context of validation.&lt;/p&gt;

&lt;p&gt;When validating a property I don&apos;t want to validate the rendering of the property, but the property itself. I think this is a typical case where I want to use a property-editor. It converts the entered string into the property-value which is validated. This doesn&apos;t work in the case I mentioned in my comment.&lt;/p&gt;

&lt;p&gt;Maybe this isn&apos;t a fault of errors.getFieldValue(). Have I overseen a method to get the property-value from errors without converting it to a string?&lt;/p&gt;

&lt;p&gt;regards,&lt;br/&gt;
Maarten&lt;/p&gt;</comment>
                            <comment id="12662" author="juergen.hoeller" created="Tue, 22 Mar 2005 01:38:46 +0000"  >&lt;p&gt;Errors currently doesn&apos;t have a method for accessing the raw property value. It&apos;s expected that validation code accesses the target object directly in this case. This is also why the &quot;validate&quot; method of the Validator interface takes both the target object and the Errors object as arguments.&lt;/p&gt;

&lt;p&gt;Essentially, &quot;getFieldValue&quot; is a pure convenience on Errors, meant to be used for showing user-readable values. The main purpose of the Errors interface is to serve as validation errors holder, which usually happens to hold the target object underneath but doesn&apos;t necessarily have to do so.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="12669" author="mdond" created="Tue, 22 Mar 2005 03:02:00 +0000"  >&lt;p&gt;Ok. So I should have given my ValidationUtils the target object itself. I took the spring ValidationUtils as a blueprint for my ValidationUtils and therefore thought, the errors-object would be sufficient to validate. I&apos;ll change my design...&lt;br/&gt;
(But it still might be useful to add a method to errors to give the raw property value...)&lt;/p&gt;

&lt;p&gt;regards,&lt;br/&gt;
Maarten&lt;/p&gt;</comment>
                            <comment id="12670" author="lacostej" created="Tue, 22 Mar 2005 03:11:57 +0000"  >&lt;p&gt;Juergen,&lt;/p&gt;

&lt;p&gt;Q: Why do you have a PropertyEditor registered for your properties?&lt;br/&gt;
A: because I want to convert a Set of Long into a multiple select and the only recommended way I found how to do that was to use a specialized PropertyEditor (See &lt;a href=&quot;https://jira.spring.io/browse/SPR-761&quot; title=&quot;Nested Property Editor / Transformer for Collections&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-761&quot;&gt;&lt;del&gt;SPR-761&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Q:  For your Set of Longs, did you register a custom editor for the field with type Long.class, or did you omit the type?&lt;br/&gt;
A: I tried omitting. But now I attach my Editor to Set.class. That&apos;s what I found in the forums. I&apos;ve never tried to attach it to the Long.&lt;br/&gt;
class. Again, my editor is a custom editor based on the one in &lt;a href=&quot;https://jira.spring.io/browse/SPR-761&quot; title=&quot;Nested Property Editor / Transformer for Collections&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-761&quot;&gt;&lt;del&gt;SPR-761&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Q: Or are you transforming from an incoming String value to the entire Set of Longs?&lt;br/&gt;
A: no. My bean has a set of longs. It has a method that returns a Set (not Set&amp;lt;Long&amp;gt; as I am under SDK 1.4)&lt;/p&gt;

&lt;p&gt;Q: by accessing the corresponding property of your model object through a Java expression or JSP EL expression. &lt;br/&gt;
A: it is my understanding that with JSP 1.2, EL is not friendly to Sets&lt;/p&gt;

&lt;p&gt;My understanding was:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;bind to a field&lt;/li&gt;
	&lt;li&gt;then use status.value, status.expression as much as possible, as to not duplicate the path in different places.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Maybe I misunderstood the use case of the bind status object?&lt;/p&gt;


&lt;p&gt;The &lt;a href=&quot;http://www.springframework.org/docs/taglib/tag/BindTag.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/docs/taglib/tag/BindTag.html&lt;/a&gt; documentation states:&lt;/p&gt;

&lt;p&gt;&quot;status.value: the actual value of the bean or property (transformed using registered PropertyEditors)&quot;&lt;/p&gt;

&lt;p&gt;I didn&apos;t understand that PropertyEditors would transform the field into a String, as in &apos;normal&apos; case, the value is the actual value, e.g. a Long or a List, that the BeanWrapper implementation can return from its getPropertyValue(PropertyTokenHolder x) call.&lt;/p&gt;


&lt;p&gt;Now my question. Only the code path that uses the PropertyEditor will return an String. Isn&apos;t it inconsistent to return sometimes an Object sometimes a String? Wouldn&apos;t it be better to let the client decide what to do with it? &lt;/p&gt;


&lt;p&gt;So to summarize I am using a property editor because I want my multiple select to go into a Set of Long. By doing that, I can&apos;t use the status.value consistently as I do with the other fields in my form, as it returns a String representation of my Set instead of the Set itself.&lt;/p&gt;

&lt;p&gt;Sorry, I wasn&apos;t very consise in that post...&lt;/p&gt;</comment>
                            <comment id="12864" author="juergen.hoeller" created="Tue, 5 Apr 2005 22:02:11 +0000"  >&lt;p&gt;I&apos;ve refined BindException&apos;s &quot;getFieldValue&quot; to only return a PropertyEditor&apos;s &quot;getAsText&quot; result when the latter is not null. Standard PropertyEditors usually always return a String representation there, but special PropertyEditors can decide to deliberately return null: for example, CustomCollectionEditor does this now.&lt;/p&gt;

&lt;p&gt;These semantics are actually part of the standard JDK JavaBeans PropertyEditor definition: the javadoc for &quot;getAsText&quot; explicitly says that null may be returned if there is no appropriate text representation. Additionally, a text value returned should always be parsable by setAsText, which isn&apos;t the case for CustomCollectionEditor either.&lt;/p&gt;

&lt;p&gt;Nevertheless, be careful when relying on the return type of &quot;getFieldValue&quot;: if you had a field error with a rejected value or if HTML-escaping is enabled for the field, you&apos;ll still get a String back.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 39 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 21 Mar 2005 19:59:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04x6n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28750</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>