<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:56:00 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1317/SPR-1317.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1317] OracleLobHandler + WebSphereNativeJdbcExtractor doesn&apos;t work on Websphere 6</title>
                <link>https://jira.spring.io/browse/SPR-1317</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;	we are developing application on Websphere 6 with Oracle 9i database. Some LOBs are saved to database using Hibernate 3. We are using Websphere datasource so we need to use WebSphereNativeJdbcExtractor which causes us problems.&lt;br/&gt;
Our configuration:&lt;br/&gt;
	&amp;lt;!-- Lob handler for Oracle 9i and IBM Websphere data source --&amp;gt;&lt;br/&gt;
  &amp;lt;bean id=&quot;lobHandler&quot; class=&quot;org.springframework.jdbc.support.lob.OracleLobHandler&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;nativeJdbcExtractor&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;bean class=&quot;org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/property&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;!-- Hibernate session factory definition --&amp;gt;&lt;br/&gt;
  &amp;lt;bean id=&quot;auditSessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;lobHandler&quot; ref=&quot;lobHandler&quot;/&amp;gt;&lt;br/&gt;
...&lt;/p&gt;

&lt;p&gt;When LOB object is about to be saved exception is thrown: &lt;/p&gt;

&lt;p&gt;org.springframework.dao.DataAccessResourceFailureException: Could not create Oracle LOB; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on &lt;span class=&quot;error&quot;&gt;&amp;#91;oracle.jdbc.OracleConnection&amp;#93;&lt;/span&gt;, not on &lt;span class=&quot;error&quot;&gt;&amp;#91;class oracle.jdbc.driver.OracleConnection&amp;#93;&lt;/span&gt; - specify a corresponding NativeJdbcExtractor&lt;br/&gt;
org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on &lt;span class=&quot;error&quot;&gt;&amp;#91;oracle.jdbc.OracleConnection&amp;#93;&lt;/span&gt;, not on &lt;span class=&quot;error&quot;&gt;&amp;#91;class oracle.jdbc.driver.OracleConnection&amp;#93;&lt;/span&gt; - specify a corresponding NativeJdbcExtractor&lt;br/&gt;
	at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.getOracleConnection(OracleLobHandler.java:360)&lt;br/&gt;
	at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.createLob(OracleLobHandler.java:328)&lt;/p&gt;


&lt;p&gt;return in code below from WebSphereNativeJdbcExtractor returned connection is type of oracle.jdbc.driver.OracleConnection instead of oracle.jdbc.OracleConnection&lt;br/&gt;
	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Retrieve the Connection via WebSphere&apos;s &amp;lt;code&amp;gt;getNativeConnection&amp;lt;/code&amp;gt; method.&lt;br/&gt;
	 */&lt;br/&gt;
	protected Connection doGetNativeConnection(Connection con) throws SQLException {&lt;br/&gt;
		// WebSphere 5 connection?&lt;br/&gt;
		if (this.webSphere5ConnectionClass != null &amp;amp;&amp;amp;&lt;br/&gt;
				this.webSphere5ConnectionClass.isAssignableFrom(con.getClass())) {&lt;br/&gt;
			try 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {				// WebSphere 5&amp;#39;s WSJdbcUtil.getNativeConnection(wsJdbcConnection)				return (Connection) this.webSphere5NativeConnectionMethod.invoke(null, new Object[] {con});			}&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So in org.springframework.jdbc.support.lob.OracleLobHandler in getOracleConnection() conToUse is type of oracle.jdbc.driver.OracleConnection (implements java.sql.Connection) and &lt;br/&gt;
connectionClass is oracle.jdbc.OracleConnection type. Because of that, exception is throwned (as specified in getOracleConnection()). We are using ojdbc14.jar for database connection. &lt;/p&gt;

&lt;p&gt;We hope that you will do some testing on Websphere 6 to resolve this problem.&lt;/p&gt;</description>
            <key id="12411">SPR-1317</key>
            <summary>OracleLobHandler + WebSphereNativeJdbcExtractor doesn&apos;t work on Websphere 6</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="dcengija">Davor Cengija</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Sep 2005 01:28:33 +0000</created>
                <updated>Tue, 19 Jun 2012 03:53:58 +0000</updated>
                            <resolved>Sun, 27 Nov 2005 19:56:20 +0000</resolved>
                                    <version>1.2.4</version>
                                    <fixVersion>1.2.7</fixVersion>
                    <fixVersion>2.0 M1</fixVersion>
                                    <component>Data</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14860" author="juergen.hoeller" created="Sun, 2 Oct 2005 08:41:41 +0000"  >&lt;p&gt;This is likely to be caused by a class loader issue: that is, the Oracle JDBC driver classes being available from multiple class loaders.&lt;/p&gt;

&lt;p&gt;Spring&apos;s OracleLobHandler used a locally loaded OracleConnection class to check whether the given Connection handle is actually an Oracle JDBC connection. That might fail if  the locally loaded OracleConnection class is not the same as the one used at the server level.&lt;/p&gt;

&lt;p&gt;Consequently, we&apos;ve relaxed that check to accept any kind of Connection handle. If a ClassCastException arises within the Oracle driver&apos;s BLOB/CLOB handling (a sign of a non-OracleConnection passed in), we throw an expressive exception that indicates to specify a correct NativeJdbcExtractor.&lt;/p&gt;

&lt;p&gt;Essentially, it&apos;s a post-invocation check rather than a pre-invocation check now, which should avoid any potential class loader issues.&lt;/p&gt;

&lt;p&gt;This change should be available in Monday night&apos;s nightly Spring snapshot. Please give it a try and let us know whether it works for you!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14877" author="mresetar" created="Mon, 3 Oct 2005 07:17:41 +0000"  >&lt;p&gt;Hy,&lt;br/&gt;
 original posting was with my colleague account because at the time I didn&apos;t have mine. I made the effort and created one &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks for fixing and being so active on mailing list. Unfortunately your fix didn&apos;t solve the problem in our case. But you are right that this is classloader issue. We had ojdbc14.jar in our WEB-INF/lib and as server env variable. I removed jar from WEB-INF/lib and everything worked fine with or without your fix.&lt;/p&gt;

&lt;p&gt;The exception that was throwned this time was from createLob method (lines around 350):&lt;/p&gt;

&lt;p&gt;else if (con != null &amp;amp;&amp;amp; ex.getTargetException() instanceof ClassCastException) &lt;/p&gt;
{
					throw new InvalidDataAccessApiUsageException(
							&quot;OracleLobCreator needs to work on [oracle.jdbc.OracleConnection], not on [&quot; +
							con.getClass() + &quot;]: specify a corresponding NativeJdbcExtractor&quot;);
				}
&lt;p&gt;I&apos;m at home now so I&apos;m unable to post whole stack trace. If you need it or any other information I would be glad to provide.&lt;/p&gt;

&lt;p&gt;Thanks, Miroslav Re&#353;etar&lt;/p&gt;</comment>
                            <comment id="15046" author="arimus" created="Wed, 19 Oct 2005 13:47:32 +0000"  >&lt;p&gt;We are running into the same issue while using OracleLobHandler.  We have tried different JDBC extractors and have grabbed the latest build (spring-framework-1.2.6-with-dependencies-build.360-20051020.zip) and still no luck.&lt;/p&gt;

&lt;p&gt;With org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor, the message is:&lt;/p&gt;

&lt;p&gt;org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on &lt;span class=&quot;error&quot;&gt;&amp;#91;oracle.jdbc.OracleConnection&amp;#93;&lt;/span&gt;, not on &lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.tomcat.dbcp.dbcp.PoolableConnection&amp;#93;&lt;/span&gt;: specify a corresponding NativeJdbcExtractor&lt;/p&gt;

&lt;p&gt;With org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor, the message is:&lt;/p&gt;

&lt;p&gt;org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on &lt;span class=&quot;error&quot;&gt;&amp;#91;oracle.jdbc.OracleConnection&amp;#93;&lt;/span&gt;, not on &lt;span class=&quot;error&quot;&gt;&amp;#91;class oracle.jdbc.driver.OracleConnection&amp;#93;&lt;/span&gt;: specify a corresponding NativeJdbcExtractor&lt;/p&gt;

&lt;p&gt;This is using Spring 1.2.6 (latest snapshot), JNDI on Tomcat using DBCP 1.2.1.  I looked in our Oracle driver jar, ojdbc14.jar (9.2.0.x), which contains both &apos;oracle.jdbc.OracleConnection&apos; and &apos;oracle.jdbc.driver.OracleConnection&apos;.  Maybe that is part of the problem?&lt;/p&gt;

&lt;p&gt;Are we supposed to use the DBCP extractor or the Simple one?  It seems like we are closer to the solution when we specify the simple (potentially just a driver class name problem), but I assume we need to use the DBCP extractor to actually be able to get the native Oracle connection object that can be used for large object handling.&lt;/p&gt;

&lt;p&gt;Here is the spring wire-up:&lt;/p&gt;

&lt;p&gt;      &amp;lt;!-- Choose the dialect that matches your &quot;dataSource&quot; definition --&amp;gt;&lt;br/&gt;
      &amp;lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;property name=&quot;dataSource&quot;&amp;gt;&amp;lt;ref bean=&quot;myDataSource&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
            &amp;lt;property name=&quot;lobHandler&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;ref bean=&quot;oracleLobHandler&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;          &lt;br/&gt;
      &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;      &amp;lt;!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) --&amp;gt;&lt;br/&gt;
      &amp;lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;property name=&quot;sessionFactory&quot;&amp;gt;&amp;lt;ref local=&quot;sessionFactory&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
      &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;      &amp;lt;bean id=&quot;oracleLobHandler&quot; class=&quot;org.springframework.jdbc.support.lob.OracleLobHandler&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;nativeJdbcExtractor&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;ref local=&quot;nativeJdbcExtractor&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;br/&gt;
    &amp;lt;bean id=&quot;nativeJdbcExtractor&quot; class=&quot;org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor&quot; lazy-init=&quot;true&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;Maybe this is a different problem, but looks awefully similar to me.  Suggestions?&lt;/p&gt;</comment>
                            <comment id="15295" author="juergen.hoeller" created="Sun, 6 Nov 2005 07:02:55 +0000"  >&lt;p&gt;If you got the &quot;not on ...OracleConnection&quot; error message, the native connection extraction worked. However, there seems to be an issue in the Oracle driver itself hiding here. Essentially, the exception you&apos;re seeing results from a BLOB.createTemporary call, passing in the OracleConnection handle as argument. The implementation of that Oracle-specific JDBC method then throws a ClassCastException, which you&apos;re seeing wrapped in an InvalidDataAccessApiUsageException. I have changed this to include the root ClassCastException for clearness. However, the underlying problem remains: The Oracle driver does not accept its own Connection handle passed into its own BLOB.createTemporary method...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15306" author="reg.skelton" created="Mon, 7 Nov 2005 07:14:38 +0000"  >&lt;p&gt;David: I&apos;m no expert, but for DBCP setups, I think you should be using CommonsDbcpNativeJdbcExtractor. I got it working when I set &quot;accessToUnderlyingConnectionAllowed&quot; to true (for me, that was in the applicationcontext.xml definition of my DBCP datasource).&lt;/p&gt;

&lt;p&gt;Juergen: Having got the native extractor to work, I now see the &quot;not on...OracleConnection&quot; message. You seem to be suggesting this is an Oracle issue - do you know if they are aware of it, or if there&apos;s a workaround? (I&apos;m on Spring 1.2.4, Oracle 9.2.0.5 with classes12.jar). Any suggestions much appreciated...&lt;/p&gt;</comment>
                            <comment id="15307" author="arimus" created="Mon, 7 Nov 2005 07:35:33 +0000"  >&lt;p&gt;We actually found a workaround to the issue.  We are now using org.springframework.jdbc.support.lob.DefaultLobHandler without an extractor explicitly specified and are currently using the Oracle 10g driver (which works for 9i databases as well).  Apparently there is an Oracle driver bug which is causing this and we stumbled accross a solution (which was to upgrade to the 10g driver).  Of course the 10g driver has new bugs that may cause you issues, but it resolved the issue temporarily at least.&lt;/p&gt;</comment>
                            <comment id="15321" author="reg.skelton" created="Mon, 7 Nov 2005 21:22:08 +0000"  >&lt;p&gt;Thanks, David. I&apos;ll give it a go, but I&apos;m not optimistic about (the politics of) upgrading the driver.&lt;/p&gt;</comment>
                            <comment id="15325" author="juergen.hoeller" created="Mon, 7 Nov 2005 22:15:27 +0000"  >&lt;p&gt;Reopening the issue, although I expect this to be an Oracle driver issue...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15326" author="juergen.hoeller" created="Mon, 7 Nov 2005 22:17:50 +0000"  >&lt;p&gt;If you try a very recent nightly 1.2.6 snapshot, you should see the underlying ClassCastException behind the &quot;not on...&quot; message. Could you please post it here, so that we can see where exactly it originates? I would expect this to be within the Oracle driver&apos;s createTemporary implementation...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15501" author="heaven" created="Mon, 21 Nov 2005 00:47:49 +0000"  >&lt;p&gt;I met this problem today , and I think it is a Oracle driver issue.Because when I change  anthoer driver that some older .The problem disapeared.&lt;/p&gt;</comment>
                            <comment id="15509" author="heaven" created="Mon, 21 Nov 2005 14:01:26 +0000"  >&lt;p&gt;We have resolved this problem by replace the getClass().getClassLoader().loadClass() to Thread.currentThread().getContextClassLoader().loadClass().&lt;br/&gt;
We have tested ok  using spring 1.1.4 and oracle 9i.&lt;/p&gt;</comment>
                            <comment id="15510" author="heaven" created="Mon, 21 Nov 2005 14:03:10 +0000"  >&lt;p&gt;ps: We modify the OracleLobHandler .&lt;/p&gt;</comment>
                            <comment id="15575" author="juergen.hoeller" created="Sun, 27 Nov 2005 00:34:15 +0000"  >&lt;p&gt;Do you have multiple versions of the Oracle driver in your classpath? One at the application level, on at the system class loader level? It seems so, since the different ClassLoaders seem to pick up different versions of the OracleConnection class. Or do you have multiple spring.jar at different levels of the class loader hierarchy?&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15577" author="heaven" created="Sun, 27 Nov 2005 15:02:41 +0000"  >&lt;p&gt;yes , we indeed have multiple versions of the Oracle driver in &lt;br/&gt;
our classpath,but some special reasons that we can not resolve this&lt;br/&gt;
problem in the web server.&lt;br/&gt;
So we add a Class modifyed from OracleLobHandler,and it works .&lt;/p&gt;

&lt;p&gt;                     protected Object prepareLob(Connection con, Class lobClass) throws Exception {&lt;/p&gt;

&lt;p&gt;			ClassLoader cl = con.getClass().getClassLoader();&lt;br/&gt;
			if (logger.isDebugEnabled()) &lt;/p&gt;
{
				logger.debug(&quot;&quot; + con + &quot;&#30340;classloader&quot; + cl);
			}

&lt;p&gt;			Class clazz = cl.loadClass(&quot;java.sql.Connection&quot;);&lt;br/&gt;
			.......&lt;br/&gt;
		     }&lt;/p&gt;

&lt;p&gt;We just changed the class loader from getClass().getClassLoader() to con.getClass().getClassLoader() to make&lt;br/&gt;
sure that we use the same classloder.It looks not effective than the original implement,but it just works.&lt;/p&gt;

&lt;p&gt;We hope Hoeller to give us a better implement to resolve this problem  &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15580" author="juergen.hoeller" created="Sun, 27 Nov 2005 19:56:20 +0000"  >&lt;p&gt;OK, thanks for the hint. I&apos;ve refined OracleLobHandler to lazily initializes the Oracle driver classes that is uses via reflection, always loading them via the actual Oracle Connection&apos;s class loader. This should avoid potential class loader issues upfront.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 5 weeks, 4 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 2 Oct 2005 08:41:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01f7b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8340</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>