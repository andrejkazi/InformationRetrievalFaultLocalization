<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:33:05 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-670/SPR-670.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-670] WebSphereNativeJdbcExtractor doesn&apos;t work on Websphere 5 with version 4 datasource</title>
                <link>https://jira.spring.io/browse/SPR-670</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;WebSphereNativeJdbcExtractor failed to extract the native jdbc connection on websphere 5 server that is using datasource type of websphere 4.&lt;/p&gt;

&lt;p&gt;Websphere 5 supports 2 kinds of datasource - version 5 and version 4. The version 4 datasource will be used for backward compatible. I found the above problem when trying to migrate our websphere 4.x app into websphere 5 server - we have to keep using the version 4 datasource because version 5 datasource is not supported in J2EE 1.2 mode and we don&apos;t have time to rebuild all the legacies.&lt;/p&gt;

&lt;p&gt;I therefore modified the implementation of WebSphereNativeJdbcExtractor as following, which works in all situations.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;import java.lang.reflect.Method;&lt;br/&gt;
import java.sql.Connection;&lt;br/&gt;
import java.sql.SQLException;&lt;/p&gt;

&lt;p&gt;import org.apache.commons.logging.Log;&lt;br/&gt;
import org.apache.commons.logging.LogFactory;&lt;br/&gt;
import org.springframework.dao.DataAccessResourceFailureException;&lt;br/&gt;
import org.springframework.dao.InvalidDataAccessApiUsageException;&lt;br/&gt;
import org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Implementation of the NativeJdbcExtractor interface for WebSphere.&lt;/li&gt;
	&lt;li&gt;Returns the underlying native Connection to application code instead&lt;/li&gt;
	&lt;li&gt;of WebSphere&apos;s wrapper implementation; unwraps the Connection for&lt;/li&gt;
	&lt;li&gt;native statements. The returned JDBC classes can then safely be cast,&lt;/li&gt;
	&lt;li&gt;e.g. to OracleConnection.&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;This NativeJdbcExtractor can be set just to &amp;lt;i&amp;gt;allow&amp;lt;/i&amp;gt; working&lt;/li&gt;
	&lt;li&gt;with a WebSphere DataSource: If a given object is not a WebSphere&lt;/li&gt;
	&lt;li&gt;Connection wrapper, it will be returned as-is.&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;Supports both WebSphere 5 and WebSphere 4. Currently just tested with&lt;/li&gt;
	&lt;li&gt;IBM WebSphere 5.1.0 and 4.0.6. Thanks to Dave Keller and Victor for&lt;/li&gt;
	&lt;li&gt;figuring out how to do the unwrapping on WebSphere 5 respectively 4!&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;@author Juergen Hoeller&lt;/li&gt;
	&lt;li&gt;@since 08.06.2004&lt;/li&gt;
	&lt;li&gt;@see com.ibm.ws.rsadapter.jdbc.WSJdbcConnection&lt;/li&gt;
	&lt;li&gt;@see com.ibm.ws.rsadapter.jdbc.WSJdbcUtil#getNativeConnection&lt;/li&gt;
	&lt;li&gt;@see com.ibm.ejs.cm.proxy.ConnectionProxy#getPhysicalConnection&lt;br/&gt;
 */&lt;br/&gt;
public class WebSphereNativeJdbcExtractor extends NativeJdbcExtractorAdapter&lt;br/&gt;
{&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	private static final String JDBC_ADAPTER_CONNECTION_NAME_5 =&lt;br/&gt;
		&quot;com.ibm.ws.rsadapter.jdbc.WSJdbcConnection&quot;;&lt;/p&gt;

&lt;p&gt;	private static final String JDBC_ADAPTER_UTIL_NAME_5 =&lt;br/&gt;
		&quot;com.ibm.ws.rsadapter.jdbc.WSJdbcUtil&quot;;&lt;/p&gt;

&lt;p&gt;	private static final String CONNECTION_PROXY_NAME_4 =&lt;br/&gt;
		&quot;com.ibm.ejs.cm.proxy.ConnectionProxy&quot;;&lt;/p&gt;

&lt;p&gt;	protected final Log logger = LogFactory.getLog(getClass());&lt;/p&gt;

&lt;p&gt;	private Class webSphere5ConnectionClass;&lt;br/&gt;
	private Class webSphere4ConnectionClass;&lt;/p&gt;

&lt;p&gt;	private Method getNative5ConnectionMethod;&lt;br/&gt;
	private Method getNative4ConnectionMethod;&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;This constructor retrieves WebSphere JDBC adapter classes,&lt;/li&gt;
	&lt;li&gt;so we can get the underlying vendor connection using reflection.&lt;br/&gt;
	 */&lt;br/&gt;
	public WebSphereNativeJdbcExtractor()&lt;br/&gt;
		throws InvalidDataAccessApiUsageException&lt;br/&gt;
	{&lt;br/&gt;
		try
		&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {			logger.debug(				&amp;quot;Trying WebSphere 5 Connection}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;		catch (Exception ex)&lt;/p&gt;
		{
			logger.debug(
				&quot;Could not find WebSphere 5 connection pool classes&quot;,
				ex);
		}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;		try&lt;/p&gt;
		{
			logger.debug(
				&quot;Trying WebSphere 4 Connection: &quot; + CONNECTION_PROXY_NAME_4);
			this.webSphere4ConnectionClass =
				getClass().getClassLoader().loadClass(CONNECTION_PROXY_NAME_4);
			this.getNative4ConnectionMethod =
				this.webSphere4ConnectionClass.getMethod(
					&quot;getPhysicalConnection&quot;,
					(Class[]) null);
		}
&lt;p&gt;		catch (Exception ex2)&lt;/p&gt;
		{
			logger.debug(
				&quot;Could not find WebSphere 4 connection pool classes&quot;,
				ex2);
			throw new InvalidDataAccessApiUsageException(&quot;Could neither find WebSphere 5 nor WebSphere 4 connection pool classes&quot;);
		}
&lt;p&gt;	}&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Return true, as WebSphere returns wrapped Statements.&lt;br/&gt;
	 */&lt;br/&gt;
	public boolean isNativeConnectionNecessaryForNativeStatements()
	{
		return true;
	}&lt;br/&gt;
&lt;br/&gt;
	/**&lt;br/&gt;
	 * Return true, as WebSphere returns wrapped PreparedStatements.&lt;br/&gt;
	 */&lt;br/&gt;
	public boolean isNativeConnectionNecessaryForNativePreparedStatements()&lt;br/&gt;
	{		return true;	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Return true, as WebSphere returns wrapped CallableStatements.&lt;br/&gt;
	 */&lt;br/&gt;
	public boolean isNativeConnectionNecessaryForNativeCallableStatements()
	{
		return true;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Retrieve the Connection via WebSphere&apos;s &amp;lt;code&amp;gt;getNativeConnection&amp;lt;/code&amp;gt; method.&lt;br/&gt;
	 */&lt;br/&gt;
	protected Connection doGetNativeConnection(Connection con)&lt;br/&gt;
		throws SQLException&lt;br/&gt;
	{&lt;br/&gt;
		if (this.webSphere5ConnectionClass != null&lt;br/&gt;
			&amp;amp;&amp;amp; this.webSphere5ConnectionClass.isAssignableFrom(con.getClass()))&lt;br/&gt;
		{&lt;br/&gt;
			try
			&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {				return (Connection) this.getNative5ConnectionMethod.invoke(					null,					new Object[] { con });			}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;			catch (Exception ex)&lt;/p&gt;
			{
				throw new DataAccessResourceFailureException(
					&quot;Could not invoke WebSphere5&apos;s getNativeConnection method&quot;,
					ex);
			}
&lt;p&gt;		}&lt;br/&gt;
		else if (&lt;br/&gt;
			this.webSphere4ConnectionClass != null&lt;br/&gt;
				&amp;amp;&amp;amp; this.webSphere4ConnectionClass.isAssignableFrom(&lt;br/&gt;
					con.getClass()))&lt;/p&gt;
		&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {			try			{
				// WebSphere 4&apos;s connectionProxy.getPhysicalConnection()
				return (Connection) this.getNative4ConnectionMethod.invoke(
					con,
					(Object[]) null);
			}			catch (Exception ex)			{
				throw new DataAccessResourceFailureException(
					&quot;Could not invoke WebSphere4&apos;s getPhysicalConnection method&quot;,
					ex);
			}		}&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;		logger.debug(&quot;It&apos;s not a websphere 4/5 connection, return as is.&quot;);&lt;br/&gt;
		return con;&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;</description>
            <key id="11080">SPR-670</key>
            <summary>WebSphereNativeJdbcExtractor doesn&apos;t work on Websphere 5 with version 4 datasource</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="victorwon">Victor</reporter>
                        <labels>
                    </labels>
                <created>Mon, 31 Jan 2005 05:43:33 +0000</created>
                <updated>Mon, 31 Jan 2005 06:11:21 +0000</updated>
                            <resolved>Mon, 31 Jan 2005 06:11:21 +0000</resolved>
                                    <version>1.1.3</version>
                                    <fixVersion>1.1.4</fixVersion>
                                    <component>Data</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12171" author="juergen.hoeller" created="Mon, 31 Jan 2005 06:11:21 +0000"  >&lt;p&gt;Thanks for pointing this out, Victor! I&apos;ve reworked WebSphereNativeJdbcExtractor accordingly - last minute for 1.1.4 &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 48 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 31 Jan 2005 06:11:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01fhz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8388</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>