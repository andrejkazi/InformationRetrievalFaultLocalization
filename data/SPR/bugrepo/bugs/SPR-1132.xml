<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:38:33 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1132/SPR-1132.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1132] Transaction Annotations don&apos;t work for interfaces/classes with more than one method using AOP to apply them</title>
                <link>https://jira.spring.io/browse/SPR-1132</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;If you define an interface/class with more than one method to be transactional, the interface/class is never processed by the TransactionInterceptor when using AOP to apply the transactions.  An interface/class with one method works.&lt;/p&gt;

&lt;p&gt;Here is a snippet of my context file:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean&lt;br/&gt;
		class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot; /&amp;gt;	&lt;br/&gt;
	&amp;lt;bean&lt;br/&gt;
		class=&quot;org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionInterceptor&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;transactionInterceptor&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;	&lt;br/&gt;
	&amp;lt;bean id=&quot;transactionInterceptor&quot;&lt;br/&gt;
		class=&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionManager&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;hibernateTransactionManager&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionAttributeSource&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;bean&lt;br/&gt;
				class=&quot;org.springframework.transaction.annotation.AnnotationTransactionAttributeSource&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;itemService&quot;&lt;br/&gt;
		class=&quot;foo.service.impl.ItemServiceImpl&quot;&amp;gt;&lt;br/&gt;
     ... (just a bunch of properties)&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;ItemServiceImpl implements ItemService which looks like:&lt;/p&gt;

&lt;p&gt;@Transactional(readOnly = true)&lt;br/&gt;
public interface ItemService {&lt;br/&gt;
   ... (14 method definitions with 3 overriding the default for the interface)&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;I reverted to Spring 1.2.1 and everything works again, which is why I figured it must be a bug in version 1.2.2.&lt;/p&gt;</description>
            <key id="11975">SPR-1132</key>
            <summary>Transaction Annotations don&apos;t work for interfaces/classes with more than one method using AOP to apply them</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="atberman">Andrew Berman</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Jul 2005 10:20:30 +0000</created>
                <updated>Mon, 25 Jul 2005 09:39:02 +0000</updated>
                            <resolved>Mon, 25 Jul 2005 08:45:13 +0000</resolved>
                                    <version>1.2.2</version>
                                    <fixVersion>1.2.3</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="14026" author="juergen.hoeller" created="Thu, 21 Jul 2005 06:23:50 +0000"  >&lt;p&gt;I don&apos;t fully understand what works and what doesn&apos;t work in your scenario. Could you elaborate a bit on what &lt;em&gt;exactly&lt;/em&gt; is supposed to work and doesn&apos;t work for you?&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14029" author="atberman" created="Thu, 21 Jul 2005 06:51:54 +0000"  >&lt;p&gt;Ok,&lt;/p&gt;

&lt;p&gt;   Here is the problem I am having with 1.2.2.&lt;/p&gt;

&lt;p&gt;1.  Define an interface or class with more than one method.&lt;br/&gt;
2.  Add the @Transactional annotation to the interface or class&lt;/p&gt;

&lt;p&gt;Since I am using Hibernate it&apos;s easy for me to see that this doesn&apos;t work.  I set one of my save methods to be readOnly.  It should throw an error, but there is no error thrown.  Another way to test is to try to do multiple saves within one supposed trx and it will error out claiming that the object exists in multiple sessions.&lt;/p&gt;

&lt;p&gt;Once I moved back to 1.2.1 I got the expected results.  The interesting thing about 1.2.2 is that if you have an interface with just one method a trx is used, so the problem occurs when the interface has multiple definitions.  Hope I explained it better.  If not, please let me know.&lt;/p&gt;</comment>
                            <comment id="14051" author="juergen.hoeller" created="Thu, 21 Jul 2005 20:10:02 +0000"  >&lt;p&gt;Thanks for the explanation. Weird behavior of the transaction annotation, though. Do you happen to use bean definitions with &quot;factory-method&quot;? 1.2.2 had some side effects there.&lt;/p&gt;

&lt;p&gt;Do you have a chance to verify this against a recent nighly 1.2.3 snapshot? It would be great to know whether some of the other fixes in 1.2.3 have an influence on this behavior.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14058" author="atberman" created="Fri, 22 Jul 2005 04:25:29 +0000"  >&lt;p&gt;Juergen,&lt;/p&gt;

&lt;p&gt;   I am not using factory-method on any of my bean definitions.  I downloaded spring-framework-1.2.3-build.313-20050722.zip and tried to use its spring.jar file.  Same issue, a trx is not being used.  Once I reverted back to spring-1.2.1 everything worked perfectly again.&lt;/p&gt;</comment>
                            <comment id="14076" author="juergen.hoeller" created="Sun, 24 Jul 2005 19:36:12 +0000"  >&lt;p&gt;Unfortunately, we are unable to reproduce this. We have even added a completely new set of test cases for AnnotationTransactionAttributeSource in combination with TransactionInterceptor (called AnnotationTransactionInterceptorTests, residing in the &quot;transaction.annotation&quot; package). Everything works for us nicely, including method-level overrides etc.&lt;/p&gt;

&lt;p&gt;Consequently, we are finally gonna proceed with releasing Spring 1.2.3 later today. We have already delayed it for 3 days, mainly because of this issue still being open. If there is any last-minute feedback you can give today, please do so!&lt;/p&gt;

&lt;p&gt;If the issue persists for you on Spring 1.2.3 (which it seems that it does), please try to create a minimal unit test that verifies the issue. Feel free to extend AnnotationTransactionInterceptorTests accordingly, for example. As a last resort, send us a slice of your application that reproduces this issue (ideally in the form of an automated integration test).&lt;/p&gt;

&lt;p&gt;Also, please turn debug logging on and see whether you spot something unusual - both during startup and during call of your transactional methods. The debug log should clearly indicate whether transactional proxies are being created and when they create transactions.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14082" author="atberman" created="Mon, 25 Jul 2005 04:53:31 +0000"  >&lt;p&gt;Juergen,&lt;/p&gt;

&lt;p&gt;I did a couple of things today to further test this.  I wrote a quick application from scratch first using Spring 1.2.3 nightly.  Everything ran correctly.  Then I went back to my application, wrote a test class and ran one method that I know doesn&apos;t work without transactions, and it worked as expected using Spring 1.2.3 nightly.  So, it looks like things are working when I run tests.  &lt;/p&gt;

&lt;p&gt;However, all of my service methods are called from within a web application.  I am using the full Spring stack and am using org.springframework.orm.hibernate3.support.OpenSessionInViewFilter with singleSession = false.  Perhaps something on the web side is conflicting with the transactions?  &lt;/p&gt;

&lt;p&gt;I also turned on Spring debugging in my log files to see what is going on during the call of my method from within the web app and there is no reference to the TransactionSynchronizationManager or HibernateTransactionManager with Spring 1.2.3.  Instead I get the &quot;Hibernate error: org.hibernate.HibernateException: Illegal attempt to associate a collection with two open sessions.&quot;  But, when I switch back to Spring 1.2.1, I see the TransactionSynchronizationManager and HibernateTransactionManager being used.  Also of note is that, as I mentioned before with Spring 1.2.2 and 1.2.3, I do see the TRXSynchManager and HibernateTRXManager being used when a transactional class with only one method is being called.  &lt;/p&gt;

&lt;p&gt;Andrew&lt;/p&gt;</comment>
                            <comment id="14085" author="juergen.hoeller" created="Mon, 25 Jul 2005 07:10:01 +0000"  >&lt;p&gt;You obviously don&apos;t get any transactions on Spring 1.2.3. The 1.2.1 logs clearly show an active transactions, while the 1.2.3 logs indicate non-transactional HibernateTemplate execution, with one Session per opeation. This is really weird...&lt;/p&gt;

&lt;p&gt;Can you maybe put a breakpoint right before your web controller calls into your service layer, and see whether the service layer facade object actually is a proxy (and not your plain target class)? You could then step in and see whether you end up in Spring&apos;s TransactionInterceptor (you could put a breakpoint there too, right at the &quot;invoke&quot; method).&lt;/p&gt;

&lt;p&gt;Drop me a private email to discuss this in detail, if you want. I&apos;d really like to solve this issue, weird as it is, without much further delay.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14086" author="juergen.hoeller" created="Mon, 25 Jul 2005 07:22:13 +0000"  >&lt;p&gt;Andrew,&lt;/p&gt;

&lt;p&gt;Can you please look at the startup part of your log files and search for entries like the following:&lt;/p&gt;

&lt;p&gt;2005-07-25 22:17:02,734 INFO Bean &apos;transactionManager&apos; is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)&lt;/p&gt;

&lt;p&gt;Do you notice any differences there between 1.2.1 and 1.2.3? In particular, do you get &lt;em&gt;more&lt;/em&gt; such entries on 1.2.3, with your service beans being listed as &quot;not eligible&quot;?&lt;/p&gt;

&lt;p&gt;If yes, what happens right before that log? Which bean has been created right before that, and what log do you get from the factory there?&lt;/p&gt;

&lt;p&gt;If your service beans would accidentally be considered as &quot;not eligible&quot; there, they wouldn&apos;t get wrapped by a transactional proxy. However, I wonder how that could happen...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14090" author="juergen.hoeller" created="Mon, 25 Jul 2005 08:45:13 +0000"  >&lt;p&gt;Got it!! It&apos;s a change in DefaultAdvisorAutoProxyCreator, where a call to the deprecated &quot;beanNamesIncludingAncestors&quot; method was replaced with &quot;beanNamesForTypeIncludingAncestors&quot; - but the latter initializes FactoryBeans to check their type, which in turn leads to creation of too many beans too soon during startup. The solution is to use the overloaded &quot;beanNamesForTypeIncludingAncestors&quot; version with the &quot;includeFactoryBeans&quot; flag turned off.&lt;/p&gt;

&lt;p&gt;Argh, we should have thought about the potential for &quot;bean not eligible for post-processing&quot; earlier. This doesn&apos;t have anything to do with transaction annotations in particular, just with the core auto-proxying machinery... At least we have intensified our transaction annotation tests as well now &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14091" author="juergen.hoeller" created="Mon, 25 Jul 2005 08:46:34 +0000"  >&lt;p&gt;P.S.: Andrew, thanks for pointing this out, and for your help in tracking this down! It&apos;s great to get this fix into Spring 1.2.3.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14092" author="atberman" created="Mon, 25 Jul 2005 08:59:41 +0000"  >&lt;p&gt;No problem.  Just glad to help with such an amazing project.  Keep up the great work!&lt;/p&gt;

&lt;p&gt;Andrew&lt;/p&gt;</comment>
                            <comment id="14093" author="juergen.hoeller" created="Mon, 25 Jul 2005 09:00:50 +0000"  >&lt;p&gt;If you want to patch your local 1.2.2/1.2.3-dev snapshot: change line ~105 in DefaultAdvisorAutoProxyCreator from:&lt;/p&gt;

&lt;p&gt;  String[] adviceNames =&lt;br/&gt;
      BeanFactoryUtils.beanNamesForTypeIncludingAncestors(owningFactory, Advisor.class);&lt;/p&gt;

&lt;p&gt;to &lt;/p&gt;

&lt;p&gt;  String[] adviceNames =&lt;br/&gt;
      BeanFactoryUtils.beanNamesForTypeIncludingAncestors(owningFactory, Advisor.class, true, false);&lt;/p&gt;

&lt;p&gt;and rebuild Spring (&quot;build alljars&quot; in the root of the distribution). That should result in jars that address your issue properly.&lt;/p&gt;

&lt;p&gt;Spring 1.2.3, to be released tomorrow morning, will contain that fix, of course. I guess the CVS commit has not been in time for this night&apos;s snapshot, though, so the only way to give it an early try is the patch above.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14094" author="juergen.hoeller" created="Mon, 25 Jul 2005 09:02:06 +0000"  >&lt;p&gt;If you have the chance to give the fix an early try, please let me know whether it works for you!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14095" author="atberman" created="Mon, 25 Jul 2005 09:39:02 +0000"  >&lt;p&gt;Good news, it works perfectly now!&lt;/p&gt;

&lt;p&gt;Thanks again,&lt;/p&gt;

&lt;p&gt;Andrew&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 23 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 21 Jul 2005 06:23:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00zv3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5855</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>