<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:16:54 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1484/SPR-1484.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1484] Maven 2 support (POMs)</title>
                <link>https://jira.spring.io/browse/SPR-1484</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Maven 2 POMs with dependencies is missing for Spring. It&apos;s a lot of extra job for maven 2 users to find out which dependencies Spring needs, and to have to include them manually.&lt;/p&gt;</description>
            <key id="12770">SPR-1484</key>
            <summary>Maven 2 support (POMs)</summary>
                <type id="2" iconUrl="https://jira.spring.io/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nebhale">nebhale</assignee>
                                    <reporter username="aleksabl">Aleksander Blomsk&#248;ld</reporter>
                        <labels>
                    </labels>
                <created>Sat, 19 Nov 2005 18:35:01 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:15 +0000</updated>
                            <resolved>Thu, 8 Mar 2007 09:55:22 +0000</resolved>
                                                    <fixVersion>1.2.9</fixVersion>
                                        <due></due>
                            <votes>121</votes>
                                    <watches>60</watches>
                                                                <comments>
                            <comment id="15498" author="aleksabl" created="Sun, 20 Nov 2005 06:50:37 +0000"  >&lt;p&gt;Doh! Just found that the poms I was looking for were at &lt;a href=&quot;http://www.ibiblio.org/maven2/org/springframework/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.ibiblio.org/maven2/org/springframework/&lt;/a&gt; and not &lt;a href=&quot;http://www.ibiblio.org/maven2/springframework/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.ibiblio.org/maven2/springframework/&lt;/a&gt;. Anyway, poms for 1.2.6 seems to be missng..&lt;/p&gt;</comment>
                            <comment id="18025" author="goonie" created="Thu, 15 Jun 2006 03:57:06 +0000"  >&lt;p&gt;This issue is still present for the 2.0 milestones. Those are also missing the sources (and javadocs).&lt;/p&gt;</comment>
                            <comment id="18081" author="carlos" created="Mon, 19 Jun 2006 09:26:33 +0000"  >&lt;p&gt;Lastest poms i&apos;ve working with&lt;/p&gt;</comment>
                            <comment id="18129" author="wesslan" created="Tue, 20 Jun 2006 19:19:57 +0000"  >&lt;p&gt;Does someone have POM&apos;s for 2.0-RC1 (sp I don&apos;t have to make them myself &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; yet?&lt;/p&gt;</comment>
                            <comment id="18145" author="goonie" created="Wed, 21 Jun 2006 04:11:08 +0000"  >&lt;p&gt;And sources, and javadocs?&lt;/p&gt;</comment>
                            <comment id="18146" author="wesslan" created="Wed, 21 Jun 2006 04:41:18 +0000"  >&lt;p&gt;Sources and JavaDocs are included in the &quot;official&quot; (IE not snapshots) releases but maybe you already knew that. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="18147" author="goonie" created="Wed, 21 Jun 2006 07:40:31 +0000"  >&lt;p&gt;I&apos;m afraid this is not true. See for example Spring 1.2.8&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibiblio.org/maven2/org/springframework/spring-beans/1.2.8/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.ibiblio.org/maven2/org/springframework/spring-beans/1.2.8/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This also only contains the jars.&lt;/p&gt;</comment>
                            <comment id="18280" author="wesslan" created="Wed, 28 Jun 2006 04:31:33 +0000"  >&lt;p&gt;You&apos;re certainly right Andreas, my mistake.&lt;br/&gt;
On the other hand, should releases in Ibiblio (or some other Maven-repo) contain sources and docs? I should vote no to that. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
If I want sources and/or docs for a project, I&apos;d go to their site and get it. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Cheers&lt;/p&gt;</comment>
                            <comment id="18281" author="goonie" created="Wed, 28 Jun 2006 04:51:12 +0000"  >&lt;p&gt;I vote for yes, at least the sources (JavaDocs are debatable, as they can be generated from the sources on the fly).&lt;/p&gt;

&lt;p&gt;The reason is that you can do &quot;mvn -DdownloadSources=true eclipse:eclipse&quot; in your project, and the sources of all dependencies (and transitive dependencies) are automatically downloaded and attached to the binary jars. This is extremely convenient and can save hours of work.&lt;/p&gt;</comment>
                            <comment id="18282" author="arikkfir" created="Wed, 28 Jun 2006 04:58:23 +0000"  >&lt;p&gt;Actually they &lt;b&gt;should&lt;/b&gt; contain sources+javadocs, as the maven IDE plugins know to fetch them automatically and create the appropriate IDE project files with links to the downloaded sources/javadocs. This is very useful for maven users, as all you need to do is run &quot;mvn idea&quot; and violla! -&amp;gt; you have a working IDEA project file with spring libraries defined, &lt;b&gt;and&lt;/b&gt; linked to the spring binaries....&lt;/p&gt;</comment>
                            <comment id="18291" author="wesslan" created="Wed, 28 Jun 2006 18:53:41 +0000"  >&lt;p&gt;You convinced me guys. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="18398" author="npeeters" created="Wed, 5 Jul 2006 00:24:53 +0000"  >&lt;p&gt;Does anybody know when this is going to be available on ibiblio (or any other mirror)?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="18406" author="colin.sampaleanu" created="Wed, 5 Jul 2006 01:40:59 +0000"  >&lt;p&gt;I&apos;ve checked in the last set of POMs from Carlos.&lt;/p&gt;

&lt;p&gt;I&apos;ve done a bit of tweaking to get spring-beans building including tests, but at this point there are still issues as early as spring-aop, since there is a cyclical dependency between aop and context at the test class level.&lt;/p&gt;

&lt;p&gt;This will probably only be resolved by moving that code to be tested as part of context. That&apos;s not incredibly lean now, but would be even less clean when/if the build is actually properly split up with different projects and source trees.&lt;/p&gt;

&lt;p&gt;Colin&lt;/p&gt;</comment>
                            <comment id="18408" author="carlos" created="Wed, 5 Jul 2006 02:42:17 +0000"  >&lt;p&gt;I worked around that issues excluding them in the module they are and including them in a higher level one.&lt;br/&gt;
eg. that aop test can be excluded in spring-aop and included in spring-context&lt;/p&gt;</comment>
                            <comment id="18437" author="colin.sampaleanu" created="Thu, 6 Jul 2006 10:46:00 +0000"  >&lt;p&gt;In this case I&apos;ve talked to Mark F. and he&apos;ll just redo that test to not use the context (it can use an XmlBeanFactory). For sure though for some pieces of code it will just be easier to do some tests as part of another module than what they are theoretically in by area of functionality.&lt;/p&gt;</comment>
                            <comment id="18954" author="matthewadams" created="Tue, 8 Aug 2006 10:54:06 +0000"  >&lt;p&gt;What&apos;s the latest status of this issue?  I noticed that as of today, things still aren&apos;t quite up to snuff on ibiblio.org &amp;#8211; no POMs for 2.0-rc2, 2.0-rc1, or 2.0-m5.  I&apos;m assuming the official groupId is org.springframework now &amp;#8211; is that not correct?&lt;/p&gt;</comment>
                            <comment id="18955" author="carlos" created="Tue, 8 Aug 2006 10:57:18 +0000"  >&lt;p&gt;right, official groupId is org.springframework&lt;/p&gt;</comment>
                            <comment id="19070" author="jacob robertson" created="Tue, 15 Aug 2006 23:46:32 +0000"  >&lt;p&gt;My team is currently on spring 1.2.5, and we would like to migrate to 1.2.8, but if this issue isn&apos;t resolved we may just go up to 1.2.7 &lt;/p&gt;

&lt;p&gt;P.S has anyone noticed this issue has been spammed by a sex-bot?&lt;/p&gt;</comment>
                            <comment id="19074" author="davidkarlsen" created="Wed, 16 Aug 2006 07:43:52 +0000"  >&lt;p&gt;Still a problem, even for the 2.x series. Don&apos;t think they&apos;ll ever fix it - it&apos;s been an outstanding issue for quite some time now... &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/sad.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="19075" author="julien.dubois" created="Wed, 16 Aug 2006 08:03:03 +0000"  >&lt;p&gt;Yes David, one can wonder if this will ever be fixed. I&apos;ve made some pom.xml at the begining of the 2.x series :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jira.codehaus.org/browse/MEV-339&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MEV-339&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jira.codehaus.org/browse/MEV-358&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MEV-358&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jira.codehaus.org/browse/MEV-379&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MEV-379&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jira.codehaus.org/browse/MEV-407&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MEV-407&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jira.codehaus.org/browse/MEV-408&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MEV-408&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ve been (quite frankly) fed up with this. The easiest way to get Spring working with Maven 2 is to use the &quot;org.springframework:spring&quot; dependency :&lt;/p&gt;

&lt;p&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;
 &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
 &amp;lt;artifactId&amp;gt;spring&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
 &amp;lt;version&amp;gt;2.0-rc2&amp;lt;/version&amp;gt;&lt;br/&gt;
 &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;&lt;br/&gt;
&amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;This jars includes all the other Spring jars, excepted the &quot;org.springframework:spring-mock&quot; jar.&lt;/p&gt;

&lt;p&gt;You&apos;ll get an error telling you the pom.xml is missing, and you (obviously) won&apos;t be able to get any transitive dependency. Welcome back to Maven 1 &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;But it&apos;ll work OK!&lt;/p&gt;</comment>
                            <comment id="19162" author="ojs" created="Mon, 21 Aug 2006 04:30:38 +0000"  >&lt;p&gt;Does this prerelease (spring-maven.tgz) work for rc3? I currently have to use the m4 poms from ibiblio and get more and more problems due to bugs in that version (as well as many others out there, I guess). Couldn&apos;t someone put this on ibiblio? An imperfect rc3-version is better than those aged m4 poms!&lt;/p&gt;</comment>
                            <comment id="19191" author="deraj123" created="Thu, 24 Aug 2006 07:52:30 +0000"  >&lt;p&gt;Is anyone working on poms for 1.2.8?  If not, I&apos;m attaching what I managed to put together.  I basically used the zip uploaded here for 1.2.7:&lt;br/&gt;
&lt;a href=&quot;http://jira.codehaus.org/browse/MEV-363&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MEV-363&lt;/a&gt;&lt;br/&gt;
which is linked to here:&lt;br/&gt;
&lt;a href=&quot;http://opensource.atlassian.com/projects/spring/browse/SPR-1810&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource.atlassian.com/projects/spring/browse/SPR-1810&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I changed all spring version references from 1.2.7 to 1.2.8.  As far as other dependencies, I couldn&apos;t find a list of the changes, but I compared the 1.2.7 and 1.2.8 &quot;with-dependencies&quot; packages and the only difference I found was an  upgrade to the quartz library from 1.5.1 to 1.5.2.&lt;/p&gt;

&lt;p&gt;Carlos, can you upload these to the repository  (after any required verification of course.)  Also, I&apos;m not sure if maven is still using the subversion repository at &lt;a href=&quot;https://svn.codehaus.org/maven/repository/org/springframework/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.codehaus.org/maven/repository/org/springframework/&lt;/a&gt; for this, but if so, I&apos;m noticing that 1.2.7 doesn&apos;t appear to be there, even though they exist on ibiblio.&lt;/p&gt;

&lt;p&gt;Any issues, or questions, etc, let me know.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Jared&lt;/p&gt;</comment>
                            <comment id="19192" author="deraj123" created="Thu, 24 Aug 2006 07:53:41 +0000"  >&lt;p&gt;Attaching proposed updated poms for 1.2.8.&lt;/p&gt;</comment>
                            <comment id="19223" author="topping" created="Sun, 27 Aug 2006 18:36:16 +0000"  >&lt;p&gt;Is it too early to commit to a &quot;fix version&quot; on this issue?  It would be wonderful if it were a part of the 2.0 release!  But any expectation would be helpful for planning &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="19226" author="matthewadams" created="Mon, 28 Aug 2006 02:40:20 +0000"  >&lt;p&gt;I second the sentiment for this to be part of the 2.0 release.  It would be even nicer if the latest 1.2.x release process could also include POMs!&lt;/p&gt;</comment>
                            <comment id="19311" author="tmeighen" created="Wed, 30 Aug 2006 08:26:36 +0000"  >&lt;p&gt;Can someone please comment on when this will be done?  We are stuck on 2.0-m5 and want to move to 2.0-rc3 to take advantage of bean scopes.  If this isn&apos;t going to be fixed soon, I&apos;ll have to find some sort of workaround (probably manually install in our local repo).  Thanks!&lt;/p&gt;</comment>
                            <comment id="19338" author="deraj123" created="Fri, 1 Sep 2006 01:26:03 +0000"  >&lt;p&gt;Is there something else that needs to be done to get poms actually uploaded to ibiblio?  If there is something else, please let me know, I&apos;ll be happy to do it.  A quick comment on whether or not these poms will be uploaded, or if there is something I can do to help speed up the process, would be much appreciated.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="19341" author="carlos" created="Fri, 1 Sep 2006 03:41:06 +0000"  >&lt;p&gt;The 1.2.8 poms have been uploaded, will be in ibiblio in some hours. Thanks.&lt;/p&gt;</comment>
                            <comment id="19343" author="deraj123" created="Fri, 1 Sep 2006 03:57:14 +0000"  >&lt;p&gt;Awesome!  Thanks Carlos!&lt;/p&gt;</comment>
                            <comment id="19344" author="goonie" created="Fri, 1 Sep 2006 04:40:09 +0000"  >&lt;p&gt;What about the sources? 1.2.7 contained sources, 1.2.8 not.&lt;/p&gt;</comment>
                            <comment id="19348" author="tquach" created="Fri, 1 Sep 2006 08:48:52 +0000"  >&lt;p&gt;What needs to be done for the 2.0-rc3 poms? Is this the right JIRA issue for commenting on this? &lt;/p&gt;</comment>
                            <comment id="19349" author="mraible" created="Fri, 1 Sep 2006 08:53:38 +0000"  >&lt;p&gt;I created a bundle for spring-2.0-rc3 and spring-mock-2.0-rc3: &lt;a href=&quot;http://jira.codehaus.org/browse/MAVENUPLOAD-1108&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MAVENUPLOAD-1108&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="19412" author="topping" created="Wed, 6 Sep 2006 06:16:16 +0000"  >&lt;p&gt;This issue has 5x the votes of the next closest open issue, all the &quot;code&quot; for this is checked in and just needs minor updates, and jeez, what else is there?  Maybe someone needs to classify this as &quot;will not fix&quot;.&lt;/p&gt;</comment>
                            <comment id="19487" author="nebhale" created="Sat, 9 Sep 2006 13:15:05 +0000"  >&lt;p&gt;We&apos;re not marking it as do not fix because we do plan to fix it.  It probably won&apos;t be as part of 2.0 (I may be corrected on this) but as part of 2.1.  We felt that it would be too big a change to overhaul the build system as part of the 2.0 release.&lt;/p&gt;

&lt;p&gt;In regards to the code being checked in, we&apos;ve tried what&apos;s there.  At one point we were going to use the POMs in parallel to our build system, but it wasn&apos;t just some minor updates to make it work.  In the end we decided that it&apos;d be better to spend the time getting the 2.0 release out and then actually converting the system over to Maven completely.&lt;/p&gt;

&lt;p&gt;Hope this answers some of the questions out there.&lt;/p&gt;</comment>
                            <comment id="19488" author="colin.sampaleanu" created="Sat, 9 Sep 2006 13:24:04 +0000"  >&lt;p&gt;All the code for this is &lt;em&gt;not&lt;/em&gt; checked in. What we have right now is a Maven build (in a subdirectory) which produces a (quite) different set of jar files (and related poms) than the main build system via ant.&lt;/p&gt;

&lt;p&gt;Short of doing some radical surgey on the existing source code structure and existing 1800+ line ant build script, it&apos;s not like we can use this Maven build right now, we can&apos;t put out one set of jars from ant, and a completely different set and POMs, from Maven.&lt;/p&gt;

&lt;p&gt;The Maven build is very important to us. There is a large amount of interest in it, it is needed for the OSGI work as well, but we also need to get Spring 2.0 out, which is already a cupel of months past the original due date. There is no free lunch here, and as for any feature, we need to prioritize...&lt;/p&gt;</comment>
                            <comment id="19500" author="ge0ffrey" created="Sun, 10 Sep 2006 01:56:07 +0000"  >&lt;p&gt;Good to hear you&apos;re recognize the issue.&lt;/p&gt;

&lt;p&gt;Are there plans to make upload bundles for the 2.0 release that:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;seperate a pom for each module (the 2.0-RC3 upload currently is only the full blown spring jar)&lt;/li&gt;
	&lt;li&gt;use &amp;lt;optional&amp;gt; where needed&lt;br/&gt;
?&lt;br/&gt;
That would make our lives a lot easier.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="19501" author="nebhale" created="Sun, 10 Sep 2006 02:17:22 +0000"  >&lt;p&gt;Yup, in fact I&apos;ve got a task to update the POMs a bit this week.  I don&apos;t think we&apos;ll be putting up bundles for 2.0-rc4, but for the final 2.0 release I&apos;ll probably create the POMs by hand and upload them.  If you&apos;ve taken a look at the source tree and the build.xml for Spring, you&apos;ll notice that it isn&apos;t very Maven friendly.  The POMs that are in source control, for various reasons, don&apos;t quite make the same jars that the build.xml does.  So... I&apos;ll probably take the 2.0 final jars, hand craft some POMs and that&apos;ll be that.  After 2.0 (in the 2.1 timeframe) we&apos;re aiming to convert the whole spring structure to a maven build and then the problem will simply be solved for everyone.&lt;/p&gt;

&lt;p&gt;I&apos;ve had these tickets for a while and probably should have posted an update before.  I&apos;ll try and keep everyone up to date more on this as time goes on.&lt;/p&gt;</comment>
                            <comment id="19504" author="olle.hallin" created="Sun, 10 Sep 2006 03:21:59 +0000"  >&lt;p&gt;You don&apos;t have to build with Maven2 in order to make it usable for us Maven2 users!&lt;/p&gt;

&lt;p&gt;Just uploading the proper POMs describing the transitive dependencies would be a tremendous help! The actual jars could be produced with the current build system.&lt;/p&gt;

&lt;p&gt;Of course, if the build system is converted to Maven2, producing the poms is no extra work. Before conversion, it is.&lt;/p&gt;

&lt;p&gt;I would guess that it takes less than an hour to produce minimal poms only containing a &amp;lt;dependency&amp;gt; section.&lt;/p&gt;

&lt;p&gt;Just my 2c...&lt;/p&gt;

&lt;p&gt;Olle&lt;/p&gt;</comment>
                            <comment id="19506" author="nebhale" created="Sun, 10 Sep 2006 04:43:58 +0000"  >&lt;p&gt;Not quite less than an hour (there are a bunch of dependencies that require &amp;lt;optional&amp;gt; that I need to setup) but the point is taken.&lt;/p&gt;</comment>
                            <comment id="19772" author="nebhale" created="Thu, 21 Sep 2006 05:28:19 +0000"  >&lt;p&gt;For anyone out there still lurking on this issue:  Is there any demand for a POM for the full spring jar?  Specifically you&apos;d end up with a POM that had all optional dependencies (except commons-logging).  This would be in addition to all of the modularized jar POMs.&lt;/p&gt;</comment>
                            <comment id="19773" author="mraible" created="Thu, 21 Sep 2006 05:43:28 +0000"  >&lt;p&gt;+1 for a POM for the full spring jar.  I use this in my applications because it allows a project to grow and use more and more Spring features w/o adding new dependencies.&lt;/p&gt;</comment>
                            <comment id="19776" author="carlos" created="Thu, 21 Sep 2006 05:51:30 +0000"  >&lt;p&gt;In the current poms there was somewhere how to define all versions in a pom (spring-parent IIRC) and extent it from spring and other poms to avoid repeating the versions.&lt;/p&gt;</comment>
                            <comment id="19777" author="ge0ffrey" created="Thu, 21 Sep 2006 06:40:43 +0000"  >&lt;p&gt;At spring-rich-c.sf.net we depend on the modules and use a&lt;br/&gt;
&amp;lt;properties&amp;gt;&lt;br/&gt;
&amp;lt;spring.version&amp;gt;1.2.8&amp;lt;/spring.version&amp;gt;&lt;br/&gt;
&amp;lt;/properties&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;
...&lt;br/&gt;
&amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
&amp;lt;version&amp;gt;$&lt;/p&gt;
{spring.version}
&lt;p&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;
&amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;to avoid repeating the overall used spring version.&lt;/p&gt;</comment>
                            <comment id="19782" author="nebhale" created="Thu, 21 Sep 2006 08:21:09 +0000"  >&lt;p&gt;This is actually aimed mostly at Matt, but everyone feel free to chime in.  Where my hesitancy is that I&apos;m marking every single dependency in a spring-full (not an official name BTW) POM as optional.  So you&apos;d be able to use more Spring features without adding more &lt;b&gt;Spring&lt;/b&gt; dependencies, but those features may require they&apos;re own dependencies.  In addition to that, you&apos;d essentially have to parse the POM file by hand to determine what to include explicitly in your own POM.&lt;/p&gt;

&lt;p&gt;Matt (and everyone else), is that useful still even with those kind of restrictions?&lt;/p&gt;</comment>
                            <comment id="19786" author="mraible" created="Thu, 21 Sep 2006 09:43:29 +0000"  >&lt;p&gt;That&apos;s fine with me - you could even remove all the &quot;optional&quot; dependency listings if you like.  &lt;/p&gt;

&lt;p&gt;I tend to think of Spring as a library+another library.  For example, Spring + Hibernate instead of simply Spring that brings in Hibernate.  Since the 2nd dependency often has a different release cycle than Spring, it&apos;s nice to explicitly specify it as a dependency (as well as its version).&lt;/p&gt;</comment>
                            <comment id="19788" author="thomasvdv" created="Thu, 21 Sep 2006 16:58:03 +0000"  >&lt;p&gt;I disgree.  Optional dependencies should not be removed.  For traceability it is good to know versions of the compile dependencies for Spring.  Anyways, I don&apos;t recommend using spring-full. It&apos;s better to use specialized packages such as spring-hibernate.  If not, you&apos;re loosing all the value of transitive dependencies.&lt;/p&gt;</comment>
                            <comment id="19803" author="deraj123" created="Fri, 22 Sep 2006 00:48:07 +0000"  >&lt;p&gt;I have to agree with Thomas - Optional dependencies should not be removed.  However, I see no issue with making MOST of the dependencies in a spring-full jar optional.  However, things that spring inherently requires (perhaps commons-lang, commons-collections, i&apos;m not 100% sure of how Spring uses these) should not be optional.  But then again, I also agree with Thomas on using specialized packages - I don&apos;t see the point of packaging Spring&apos;s ORM code with my application if I&apos;m not using it at all - and if I suddenly decide to start using Spring ORM facilities, I want to explicitly declare that I want to use it.&lt;/p&gt;</comment>
                            <comment id="19804" author="nebhale" created="Fri, 22 Sep 2006 00:53:02 +0000"  >&lt;p&gt;Let me clarify a bit.  I&apos;m not removing any of the optional dependencies from the full spring POM, but since they&apos;re marked as optional, you won&apos;t get them transitively.  That of course leads to my question about whether the full jar is still useful when there is one required dependency and 50 optional ones.  Matt has answered my question and I will be creating a full Spring POM as well.&lt;/p&gt;

&lt;p&gt;That said, I realize that the finer jars are the preferred way to go and they&apos;re almost ready for testing.  I was just checking on whether anyone wanted the full jar or not.&lt;/p&gt;</comment>
                            <comment id="19992" author="nebhale" created="Fri, 29 Sep 2006 06:50:58 +0000"  >&lt;p&gt;I just wanted to let everyone know that I&apos;ve got a set of test POMs posted up at the Spring private Maven repository.  The POMs should not be used for production at this time, but I&apos;d love to have some help testing them.  The repository is located at &apos;https://svn.sourceforge.net/svnroot/springframework/repos/repo-snapshots/&apos; and should have all of the module jars as well as the full spring jar.  &lt;/p&gt;

&lt;p&gt;It should be noted that some of Spring&apos;s dependencies do not exist in the main maven repo.  Some of these will never exist there due to their licensing restrictions, others just haven&apos;t been updated to the versions that Spring depends on.  I&apos;ll include the list at the bottom of this comment, but if you need these dependencies, just go ahead and install them locally via the standard maven mechanisms.&lt;/p&gt;

&lt;p&gt;If the testing goes well, this should pave the way for a rapid release of the POMs in the maven Ibiblio repository shortly after the release of Spring 2.0.&lt;/p&gt;

&lt;p&gt;Dependencies missing from Ibiblio:&lt;br/&gt;
    com.ibatis/ibatis2-common/2.2.0.638&lt;br/&gt;
    com.oracle/toplink-essentials/2.16&lt;br/&gt;
    com.oracle/oc4j/1.0&lt;br/&gt;
    hessian/hessian/3.0.20&lt;br/&gt;
    java.transaction/jta/1.0.1B (POM only)&lt;br/&gt;
    jexcelapi/jxl/2.5.7&lt;br/&gt;
    org.hibernate/hibernate-entitymanager/3.2.0.cr2&lt;br/&gt;
    tomcat/catalina/5.5.17&lt;/p&gt;</comment>
                            <comment id="19998" author="ijuma" created="Fri, 29 Sep 2006 20:36:49 +0000"  >&lt;p&gt;I tried the module jars in my project and they worked fine as soon as I added the asm/asm-commons dependency manually. Is this intentional? The module dependencies I set in my pom were: spring-core, spring-context, spring-beans, spring-aop, spring-aspects, spring-dao, spring-jpa, spring-agent, spring-mock.&lt;/p&gt;

&lt;p&gt;Also, regarding com.oracle/toplink-essentials, I wonder what the correct name is. Ibiblio has it with the name javax/persistence/toplink-essentials.bak, while the java.net repository&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; has it with name javax/persistence/toplink-essentials. Both only have version 1.0 though.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://maven-repository.dev.java.net/repository/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://maven-repository.dev.java.net/repository/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="20002" author="nebhale" created="Sat, 30 Sep 2006 04:56:42 +0000"  >&lt;p&gt;Ismael, the asm jars are listed as optional dependencies for spring-core.  Therefore if you&apos;re using a configuration that requires them, yes you should have to put them in manually.  What I would like confirmation of is whether they&apos;re actually optional.  My understanding is that asm is optional unless you&apos;re using an AspectJ based AOP proxy where you are doing argument binding based on the debug metadata for names of arguments.  Is there any chance that you&apos;re using this setup causing your dependency on asm?&lt;/p&gt;</comment>
                            <comment id="20003" author="ijuma" created="Sat, 30 Sep 2006 05:52:15 +0000"  >&lt;p&gt;I am not totally sure, so I will describe the situation and hopefully you will be able to arrive at a conclusion. I have something like the following (based on section 6.3.3.3 of the reference manual):&lt;/p&gt;

&lt;p&gt;	&amp;lt;aop:config&amp;gt;&lt;br/&gt;
		&amp;lt;aop:aspect id=&quot;methodSecurityExceptionTranslationAspect&quot;&lt;br/&gt;
			ref=&quot;methodSecurityExceptionTranslator&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;aop:after-throwing&lt;br/&gt;
				pointcut=&quot;execution(* com.mycompany.service.&lt;b&gt;.&lt;/b&gt;(..))&quot;&lt;br/&gt;
				method=&quot;translateException&quot; throwing=&quot;exception&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/aop:aspect&amp;gt;&lt;br/&gt;
	&amp;lt;/aop:config&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;methodSecurityExceptionTranslator&quot;&lt;br/&gt;
		class=&quot;com.mycompany.web.security.MethodSecurityExceptionTranslator&quot;&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;In the reference manual, it does not mention that debug metadata is required for this to work, but when debugging an exception sometime ago, it did seem that ASM was being used to match the argument name in the throwing attribute. To test whether debug metadata was required, I configured eclipse not to include it and everything still worked as expected.&lt;/p&gt;</comment>
                            <comment id="20009" author="nebhale" created="Sun, 1 Oct 2006 06:18:48 +0000"  >&lt;p&gt;The use of the AspectJ pointcut that binds the exception to the &apos;exception&apos; argument is where you&apos;re getting the need for ASM.  It appears that the POM is working as expected for this case.  If you run into any other problems, go ahead and leave a comment on this issue.&lt;/p&gt;</comment>
                            <comment id="20034" author="nebhale" created="Tue, 3 Oct 2006 11:45:37 +0000"  >&lt;p&gt;I&apos;m pleased to announce that the 2.0 final POMs have been uploaded to the Spring private repository.  They are located at &apos;https://svn.sourceforge.net/svnroot/springframework/repos/repo/&apos; and I hope to have the main and snapshot repositories syncing with the main ibiblio repository in the next couple of days.&lt;/p&gt;</comment>
                            <comment id="20035" author="swamp_ig" created="Tue, 3 Oct 2006 12:17:49 +0000"  >&lt;p&gt;Is there any chance that the javadocs and sources for the component jars could be uploaded as well?&lt;/p&gt;

&lt;p&gt;Generating the sources jar should be pretty straightforward, I&apos;m gonna do this right now by writing a little shell script, I&apos;ll attach it in a few mins.&lt;/p&gt;</comment>
                            <comment id="20036" author="nebhale" created="Tue, 3 Oct 2006 12:26:32 +0000"  >&lt;p&gt;The source and javadoc jars may not be out for a little while.  We need to actually build them out of a couple of trees in the source code and Juergen is going to have to update the build script to do that.  If we can get them for 2.0, we&apos;ll try but it may be like 2.0.1 before we see the builds generating those files.&lt;/p&gt;</comment>
                            <comment id="20037" author="swamp_ig" created="Tue, 3 Oct 2006 13:14:50 +0000"  >&lt;p&gt;No need to add to your build process, this batch script that I just attached will build and checksum all the requisite sources files for the repository. This is sufficient to get source display out of eclipse + either the eclipse plugin, or the &quot;mvn eclipse:eclipse -DdownloadSources=true&quot; command.&lt;/p&gt;

&lt;p&gt;Just CD to the repository directory, and then run it.&lt;/p&gt;

&lt;p&gt;It works for all the jars, except for spring-aspects which doesn&apos;t have matching sources in the spring core jar, you might want to build that one by hand&lt;/p&gt;</comment>
                            <comment id="20050" author="jdigger" created="Wed, 4 Oct 2006 05:29:19 +0000"  >&lt;p&gt;Is there some reason the standard &quot;source&quot; plugin wouldn&apos;t work?&lt;/p&gt;

&lt;p&gt;      &amp;lt;plugin&amp;gt;&lt;br/&gt;
        &amp;lt;artifactId&amp;gt;maven-source-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
        &amp;lt;executions&amp;gt;&lt;br/&gt;
          &amp;lt;execution&amp;gt;&lt;br/&gt;
            &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&lt;br/&gt;
            &amp;lt;goals&amp;gt;&lt;br/&gt;
              &amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt;&lt;br/&gt;
            &amp;lt;/goals&amp;gt;&lt;br/&gt;
          &amp;lt;/execution&amp;gt;&lt;br/&gt;
        &amp;lt;/executions&amp;gt;&lt;br/&gt;
      &amp;lt;/plugin&amp;gt;&lt;/p&gt;

&lt;p&gt;That way it&apos;s also automaticly added to the list of things to deploy when copying out to the server.&lt;/p&gt;</comment>
                            <comment id="20051" author="jhannes" created="Wed, 4 Oct 2006 06:18:49 +0000"  >&lt;p&gt;It would be nice to have the POMs be a little less aggressive with their dependencies. Especially:&lt;/p&gt;

&lt;p&gt;Spring-Mock should have optional dependencies on pretty much everything (using it for just AbstractTransactionalSpringContextTests should not require spring-webmvc, which requires struts &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/warning.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, which requires the world).&lt;/p&gt;

&lt;p&gt;Spring-Webmvc should not require Struts (?!)&lt;/p&gt;

&lt;p&gt;Spring-Hibernate should use a release version of Hibernate. Or even better: How about a version range?&lt;/p&gt;</comment>
                            <comment id="20053" author="nebhale" created="Wed, 4 Oct 2006 08:07:15 +0000"  >&lt;p&gt;The reason that the source plugin isn&apos;t going to work for us (right now) is that we don&apos;t actually build with Maven.  We craft these POMs by hand to ensure such high quality.  Wait, that last part wasn&apos;t quite right.  We do create the POMs by hand, and we don&apos;t build with Maven directly.  That may or may not change in the future, but as of right now we build with ant.&lt;/p&gt;</comment>
                            <comment id="20054" author="nebhale" created="Wed, 4 Oct 2006 08:15:46 +0000"  >&lt;p&gt;Johannes, you&apos;re dead on about the mock jar.  It was my mistake with the Spring dependencies.  They should have all been optional (I got all the rest of them correct though).  I can&apos;t remember the details about why the Struts jar was required, but I think I had a reason.  We&apos;ll try to get that cleaned up for the next release in a couple of weeks as well as the mocks and that&apos;ll remove the struts dependency.  It didn&apos;t seem like many people tested the 2.0-rc4 POMs while they were up, so keep checking and let me know if there are any more issues that come up.  Thanks for the input.&lt;/p&gt;</comment>
                            <comment id="20055" author="mraible" created="Wed, 4 Oct 2006 10:00:52 +0000"  >&lt;p&gt;Ben - first of all, thanks for taking the time to do this.  Secondly, can&apos;t the spring-mock.pom be fixed for the 2.0 release?  There&apos;s nothing set in stone that says the POMs can only be uploaded once.  They get modified all the time to remove invalid dependencies and such.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Matt&lt;/p&gt;</comment>
                            <comment id="20056" author="colin.sampaleanu" created="Wed, 4 Oct 2006 10:07:13 +0000"  >&lt;p&gt;Matt, are you sure? There are lots of broken POMs up there, and stuff like commons-logging 1.1 which has a comment in there saying they know it&apos;s broken, but they won&apos;t fix it because it might break stuff that depends on it. And I just saw a comment from Carlos saying that stuff only gets put on there once, so it needs to be right the first time...&lt;/p&gt;</comment>
                            <comment id="20057" author="mpilquist" created="Wed, 4 Oct 2006 10:13:02 +0000"  >&lt;p&gt;Another note about aggressive dependencies &amp;#8211; Jakarta Commons Logging 1.1 has non-optional dependencies on the Avalon Framework, servlet API, logkit, and log4j.  There is a JIRA issue for this problem at &lt;a href=&quot;http://jira.codehaus.org/browse/MEV-392&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MEV-392&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In lieu of the JCL POM getting fixed, it may be worth adding exclusions for each of these dependencies to the JCL dependency.  Otherwise, Spring users are forced to either add the exclusions to each Spring dependency or depend directly on JCL and add the exclusions to it.&lt;/p&gt;</comment>
                            <comment id="20058" author="goonie" created="Wed, 4 Oct 2006 10:55:59 +0000"  >&lt;p&gt;Regarding updating POMs: As far as I know, on a non-snapshot dependency, Maven regularly checks for the POM but will never again download the artifact itself (.jar), unless you delete it from the local repo.&lt;/p&gt;

&lt;p&gt;Ergo: Feel free to update the POM, but get the JAR right on the first time!&lt;/p&gt;</comment>
                            <comment id="20059" author="mraible" created="Wed, 4 Oct 2006 11:02:31 +0000"  >&lt;p&gt;Colin - I&apos;m certain.  I&apos;ve submitted many bugs against invalid POMs (&lt;a href=&quot;http://jira.codehaus.org/browse/MEV&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MEV&lt;/a&gt;) and had them fixed.  Andreas is correct though - end users will need to &quot;rm -r ~/.m2/repository/org/springframework/spring-mock/2.0/spring-mock-2.0.pom&quot; in order to get the updated POM.&lt;/p&gt;</comment>
                            <comment id="20060" author="jrduncans" created="Wed, 4 Oct 2006 12:05:37 +0000"  >&lt;p&gt;Matt: that is no longer the case.  Updates to POMs that have made it into the repository are not allowed.  See: &lt;a href=&quot;http://www.nabble.com/Repository-Policy-tf2306302.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Repository-Policy-tf2306302.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current policy is that a new version must be made for a new POM.&lt;/p&gt;</comment>
                            <comment id="20061" author="mraible" created="Wed, 4 Oct 2006 13:09:01 +0000"  >&lt;p&gt;That sucks they changed the policy.  I guess I&apos;ll go with the following until the next version:&lt;/p&gt;

&lt;p&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
            &amp;lt;artifactId&amp;gt;spring-mock&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
            &amp;lt;version&amp;gt;$&lt;/p&gt;
{spring.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br/&gt;
            &amp;lt;exclusions&amp;gt;&lt;br/&gt;
                &amp;lt;exclusion&amp;gt;&lt;br/&gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
                    &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
                &amp;lt;/exclusion&amp;gt;&lt;br/&gt;
                &amp;lt;exclusion&amp;gt;&lt;br/&gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
                    &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
                &amp;lt;/exclusion&amp;gt;&lt;br/&gt;
                &amp;lt;exclusion&amp;gt;&lt;br/&gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
                    &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
                &amp;lt;/exclusion&amp;gt;&lt;br/&gt;
                &amp;lt;exclusion&amp;gt;&lt;br/&gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
                    &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
                &amp;lt;/exclusion&amp;gt;&lt;br/&gt;
                &amp;lt;exclusion&amp;gt;&lt;br/&gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
                    &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
                &amp;lt;/exclusion&amp;gt;&lt;br/&gt;
                &amp;lt;exclusion&amp;gt;&lt;br/&gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
                    &amp;lt;artifactId&amp;gt;spring-jpa&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
                &amp;lt;/exclusion&amp;gt;&lt;br/&gt;
                &amp;lt;exclusion&amp;gt;&lt;br/&gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
                    &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
                &amp;lt;/exclusion&amp;gt;&lt;br/&gt;
            &amp;lt;/exclusions&amp;gt;&lt;br/&gt;
        &amp;lt;/dependency&amp;gt;&lt;br/&gt;
&lt;br/&gt;
Too bad it&apos;s not possible to do wildcards:&lt;br/&gt;
&lt;br/&gt;
        &amp;lt;dependency&amp;gt;&lt;br/&gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
            &amp;lt;artifactId&amp;gt;spring-mock&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
            &amp;lt;version&amp;gt;${spring.version}
&lt;p&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br/&gt;
            &amp;lt;exclusions&amp;gt;&lt;br/&gt;
                &amp;lt;exclusion&amp;gt;&lt;br/&gt;
                    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br/&gt;
                    &amp;lt;artifactId&amp;gt;spring-*&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
                &amp;lt;/exclusion&amp;gt;&lt;br/&gt;
            &amp;lt;/exclusions&amp;gt;&lt;br/&gt;
        &amp;lt;/dependency&amp;gt;&lt;/p&gt;</comment>
                            <comment id="20062" author="ojs" created="Wed, 4 Oct 2006 17:27:34 +0000"  >&lt;p&gt;What about making the commons-logging dependency optional? I prefer using slf4j (simple logging facade for java) and its &quot;commons-logging-bridge&quot;.&lt;/p&gt;</comment>
                            <comment id="20064" author="carlos" created="Wed, 4 Oct 2006 18:40:28 +0000"  >&lt;p&gt;No pom updates. You don&apos;t republish a jar changing it, right? you don&apos;t know how many people already has it or how many mirrors.&lt;/p&gt;

&lt;p&gt;re: commons-logging vs. slf4j and related issues, Spring guys are providing the poms they &quot;use&quot; which means they use commons-logging and for they it&apos;s not optional. If you want to use another implementation, cool, exclude commons-logging and and yours.&lt;br/&gt;
Same for versions of dependencies, if they have tested hibernate x and you want to use hibernate y, just add it to your pom, they are providing you the &quot;official&quot; version they have used to build/test the release.&lt;br/&gt;
Don&apos;t expect them to provide all possible combinations of dependencies.&lt;/p&gt;</comment>
                            <comment id="20070" author="scesbron" created="Wed, 4 Oct 2006 21:05:46 +0000"  >&lt;p&gt;I am using spring-remoting to do remoting but to configure it I need DispatcherServlet. This class is in spring-webmvc but spring-remoting does not depends on spring-webmvc. Althought I don&apos;t want to depend on spring-webmvc because it also depends on struts that I don&apos;t need and I also don&apos;t need mvc framework.&lt;br/&gt;
Would it be possible to add DispatcherServlet inside spring-web instead of spring-webmvc ?&lt;/p&gt;</comment>
                            <comment id="20076" author="juergen.hoeller" created="Thu, 5 Oct 2006 00:17:28 +0000"  >&lt;p&gt;Note that spring-webmvc does &lt;b&gt;not&lt;/b&gt; depend on Struts itself; only spring-struts does. spring-webmvc just happens to include Tiles support, which in turn happens to be shipped as part of Struts. spring-webmvc essentially includes Spring&apos;s DispatcherServlet plus supporting classes (like for specific view technologies), just like spring-portlet includes Spring&apos;s DispatcherPortlet plus supporting classes. As a consequence, spring-webmvc has a lot of &lt;b&gt;optional&lt;/b&gt; dependencies, which you can happily ignore unless you want to use the respective third-party technology.&lt;/p&gt;

&lt;p&gt;Note that Spring&apos;s notion of web MVC is much more general than that of other frameworks. Spring builds on a generic dispatching infrastructure there, with HTML pages essentially being a specific use case only: The infrastructure itself is generic enough to handle for example the generation of binary reports as well as the generation of protocol responses. The latter is what happens in case of HTTP-based remoting: It&apos;s simply Spring&apos;s dispatching infrastructure used to expose HTTP request handlers that happen to process a specific remoting protocol.&lt;/p&gt;

&lt;p&gt;Hence, I would argue that it is perfectly fine if you include spring-webmvc in your application, even if just for handling remoting protocols. Think about it as HTTP request dispatching infrastructure, which you use for processing a specific form of HTTP request. This is an intended use case that comes without any disadvantages, other than having a few further classes on the classpath.&lt;/p&gt;

&lt;p&gt;That said, there is actually an alternative in Spring 2.0: You can use Spring&apos;s HttpRequestHandlerServlet; check out its javadoc. Since all of Spring&apos;s remoting protocol handlers are HttpRequestHandlers, you can simply define them in your main application context and export them through corresponding HttpRequestHandlerServlet definitions (with the servlet-name matching the target bean name) in your web.xml. This is another way of exposing an HTTP request handler, as alternative to using the DispatcherServlet. HttpRequestHandlerServlet is in spring-web, not in spring-webmvc, so has less dependencies.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20164" author="jhannes" created="Sun, 8 Oct 2006 09:39:30 +0000"  >&lt;p&gt;Ben, thanks for the responses and for the good work so far. While waiting for official Spring 2.0 source jars, I built my own. I am not certain that they all are correct (I used jar.exe instead of the source-plugin), but if you&apos;d like them as a stop-gap measure, you can get the full set of source jars from my web site at: &lt;a href=&quot;http://brodwall.com/johannes/dist/maven-src.zip&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://brodwall.com/johannes/dist/maven-src.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think the lesson learned from Matt is that it is better to have too many things be optional (in the beginning) than too few. As a maven user, I accept adding more dependencies much better than having to exclude them.&lt;/p&gt;</comment>
                            <comment id="20581" author="brondsem" created="Wed, 1 Nov 2006 04:50:29 +0000"  >&lt;p&gt;The spring-portlet dependency on spring-webmvc should be optional.&lt;/p&gt;

&lt;p&gt;Could &quot;subreleases&quot; (or whatever you want to call them) be made that only modify the pom files?  E.g. spring-portlet-2.0-r1.pom&lt;/p&gt;</comment>
                            <comment id="22627" author="nebhale" created="Thu, 8 Mar 2007 09:55:22 +0000"  >&lt;p&gt;POMs and jars uploaded for Spring 1.2.9.  Please create new issues for any further POM related issues.  Take note that at this time there is no plan to create javadoc and source jars for each spring module.  That effort will be worked in the 2.0.x branch.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12825">SPR-1510</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13652">SPR-1839</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12005" name="buildsources.sh" size="590" author="swamp_ig" created="Tue, 3 Oct 2006 13:14:50 +0000"/>
                            <attachment id="11714" name="spring-maven.tgz" size="11062" author="carlos" created="Mon, 19 Jun 2006 09:26:33 +0000"/>
                            <attachment id="11912" name="spring-poms-1.2.8.zip" size="22935" author="deraj123" created="Thu, 24 Aug 2006 07:53:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 43 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 15 Jun 2006 03:57:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04tpr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28188</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>