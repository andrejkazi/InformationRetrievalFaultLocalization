<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:29:30 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-7940/SPR-7940.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-7940] Update documentation regarding scoped-proxy and singleton beans</title>
                <link>https://jira.spring.io/browse/SPR-7940</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;One of my beans (using the @Component annotation) implements the ApplicationListener interface. The bean is also proxied (uses the @Transaction annotation on a few methods). After initializing the context my AbstractApplicationEventMulticaster defaultRetriever contains the bean instance in the applicationListener set, and the name of the bean in the applicationListenerBeans set. &lt;/p&gt;

&lt;p&gt;This causes a problem when the listeners are retrieved (AbstractApplicationEventMulticaster getApplicationListeners):&lt;br/&gt;
for (ApplicationListener listener : this.defaultRetriever.applicationListeners) {&lt;br/&gt;
	if (supportsEvent(listener, eventType, sourceType)) &lt;/p&gt;
{
		retriever.applicationListeners.add(listener);
		allListeners.add(listener);
	}
&lt;p&gt;}&lt;br/&gt;
if (!this.defaultRetriever.applicationListenerBeans.isEmpty()) {&lt;br/&gt;
	BeanFactory beanFactory = getBeanFactory();&lt;br/&gt;
	for (String listenerBeanName : this.defaultRetriever.applicationListenerBeans) {&lt;br/&gt;
		ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class);&lt;br/&gt;
		if (!allListeners.contains(listener) &amp;amp;&amp;amp; supportsEvent(listener, eventType, sourceType)) &lt;/p&gt;
{
			retriever.applicationListenerBeans.add(listenerBeanName);
			allListeners.add(listener);
		}
&lt;p&gt;	}&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;First all the listener bean instances are added to the list. Then the beans are retrieved from the beanfactory via the name. However, the bean factory will return the proxy rather than the bean itself. End result will be that both the bean and the proxy surrounding the bean are added to the allListeners list, which results in the onApplicationEvent being called twice for every event.&lt;/p&gt;

&lt;p&gt;Ideally the proxy would be the only one added to the list.&lt;/p&gt;</description>
            <key id="36179">SPR-7940</key>
            <summary>Update documentation regarding scoped-proxy and singleton beans</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="5" iconUrl="https://jira.spring.io/images/icons/priorities/trivial.png">Trivial</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="cbeams">Chris Beams</assignee>
                                    <reporter username="jacorob">Bob Jacoby</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Feb 2011 15:18:00 +0000</created>
                <updated>Tue, 18 Feb 2014 03:15:36 +0000</updated>
                            <resolved>Thu, 1 Mar 2012 03:34:56 +0000</resolved>
                                    <version>3.0.5</version>
                                    <fixVersion>3.2 M1</fixVersion>
                                    <component>[Documentation]</component>
                    <component>Core</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="63319" author="werdex" created="Fri, 11 Feb 2011 07:38:33 +0000"  >&lt;p&gt;I am having the same issue. It is very similar as described at comment to &lt;a href=&quot;http://jira.codehaus.org/browse/GRAILS-6466:&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/GRAILS-6466:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So i have a @transactional attribute in listener class which causes event to be fired twice: service class and proxy .I workaround this by splitting listener into two classes.&lt;br/&gt;
Please fix it in next release.&lt;/p&gt;</comment>
                            <comment id="76295" author="sslavic" created="Mon, 27 Feb 2012 17:42:32 +0000"  >&lt;p&gt;I couldn&apos;t reproduce this one (see attached &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://jira.spring.io/secure/attachment/19458/19458_SPR-7940.zip&quot; title=&quot;SPR-7940.zip attached to SPR-7940&quot;&gt;SPR-7940.zip&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://jira.spring.io/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Apache Maven built project).&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;onApplicationEvent&lt;/tt&gt; would get called  only once in both cases&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;when additional method in custom &lt;tt&gt;ApplicationListener&lt;/tt&gt; was part of the implemented interface and was &lt;tt&gt;@Transactional&lt;/tt&gt;,&lt;/li&gt;
	&lt;li&gt;and in case when additional method in custom &lt;tt&gt;ApplicationListener&lt;/tt&gt; was declared and implemented only in custom &lt;tt&gt;ApplicationListener&lt;/tt&gt; class while being annotated with &lt;tt&gt;@Transactional&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In second case, for all &lt;tt&gt;@Transactional&lt;/tt&gt; methods to be proxied, cglib has to be added to the classpath and proxy-target-class has to be enabled.&lt;/p&gt;

&lt;p&gt;In the loop through listener bean names that Bob mentioned, check that &lt;tt&gt;allListeners.contains(listener)&lt;/tt&gt; was true, and &lt;tt&gt;allListeners&lt;/tt&gt; would end up containing same listener only once.&lt;/p&gt;

&lt;p&gt;Bob and Paul, can you please help reproducing the issue? See this guide on contributing Spring framework issue reproduction projects: &lt;a href=&quot;https://github.com/SpringSource/spring-framework-issues#readme&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/SpringSource/spring-framework-issues#readme&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="76300" author="werdex" created="Tue, 28 Feb 2012 03:14:33 +0000"  >&lt;p&gt;Hi Stevo,&lt;br/&gt;
Thanks for the attachment! It&apos;s seems it works fine when proxy target class is used (i.e CGLIB), however it fails when using interface proxy mode(i prefer this mode). To reproduce the issue add @Scope(proxyMode = ScopedProxyMode.INTERFACES) to DefaultDummyListener and assertion will fail in Spr7940Test&lt;/p&gt;</comment>
                            <comment id="76307" author="cbeams" created="Tue, 28 Feb 2012 04:29:41 +0000"  >&lt;p&gt;@Stevo, can you verify?  Take a shot at a fix and pull request if you see fit; otherwise if you can reproduce, I&apos;ll take it from there.&lt;/p&gt;</comment>
                            <comment id="76352" author="sslavic" created="Tue, 28 Feb 2012 20:02:01 +0000"  >&lt;p&gt;Thanks Paul for the hint, with that change I could reproduce issue. Debugged, but didn&apos;t get to the bottom of it, yet.&lt;/p&gt;

&lt;p&gt;In example, where &lt;tt&gt;DefaultDummyListener&lt;/tt&gt; is annotated with &lt;tt&gt;@Scope(proxyMode = ScopedProxyMode.INTERFACES)&lt;/tt&gt;, a scoped proxy gets defined for the target singleton scoped listener bean.&lt;/p&gt;

&lt;p&gt;Because &lt;tt&gt;DefaultDummyListener&lt;/tt&gt; also has &lt;tt&gt;@Transactional&lt;/tt&gt; method (inherited from &lt;tt&gt;DummyListener&lt;/tt&gt; interface) and we have &lt;tt&gt;&amp;lt;tx:annotation-driven proxy-target-class=&quot;true&quot; mode=&quot;proxy&quot;/&amp;gt;&lt;/tt&gt; tag and cglib on classpath, cglib class based Spring AOP proxy will also be defined for target bean.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure what would be the purpose of configuring scoped proxy for singleton scoped listener bean - if I&apos;m not mistaken that will not configure proxy type (JDK dynamic proxy or cglib) of Spring infrastructure aspects like transactional and security aspect (use &lt;tt&gt;&amp;lt;tx:annotation-driven/&amp;gt;&lt;/tt&gt; tag attributes for that), it just configures proxy type for scoped proxy of that single target bean.&lt;/p&gt;

&lt;p&gt;Spring reference docs also mentions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you try to create a scoped proxy for a singleton bean, the &lt;tt&gt;BeanCreationException&lt;/tt&gt; is raised.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;IMO this exception should be raised when bean is annotated with &lt;tt&gt;@Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.INTERFACES)&lt;/tt&gt; as in this case but that doesn&apos;t happen currently - maybe that&apos;s the root cause, and rest is just consequences.&lt;/p&gt;


&lt;p&gt;Anyway, current behaviour is that &lt;tt&gt;GenericApplicationContext.registerListeners&lt;/tt&gt; will register a single application listener - one with bean name &quot;scopedTarget.dummyListener&quot; (so target listener bean name only).&lt;/p&gt;

&lt;p&gt;Eventually upon instantiation of the proxies, target listener bean will get registered twice with event multicaster, via reference to two proxy bean instances. This registration of singleton bean instances as listeners is handled by &lt;tt&gt;ApplicationListenerDetector&lt;/tt&gt; (inner class in &lt;tt&gt;AbstractApplicationContext&lt;/tt&gt;).&lt;/p&gt;

&lt;p&gt;Lookup for beans of &lt;tt&gt;DummyListener&lt;/tt&gt; type returns &lt;tt&gt;Map&lt;/tt&gt; with keys &lt;span class=&quot;error&quot;&gt;&amp;#91;scopedTarget.dummyListener, dummyListener&amp;#93;&lt;/span&gt;, referencing two different proxies to same target bean instance. When single event is published, multicaster retrives event listeners, first two proxy objects are found (registered previously by ApplicationListenerDetector), and then scoped proxy gets found by name (&quot;scopedTarget.dummyListener&quot;) but it&apos;s already among collected listeners, so event is published to the two proxies separately, and same target listener bean gets called twice.&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;</comment>
                            <comment id="76360" author="werdex" created="Wed, 29 Feb 2012 02:14:23 +0000"  >&lt;p&gt;Hi Stevo,&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;IMO this exception should be raised when bean is annotated with @Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.INTERFACES) as in this case but that doesn&apos;t happen currently - maybe that&apos;s the root cause, and rest is just consequences.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hmm... What is wrong with interface mode for singletone beans &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;?&lt;br/&gt;
I have always used beans with interfaces and interface proxy mode( also had some problems when CGLIB proxies beans are not deserialized properly in cluster).&lt;br/&gt;
Also spring documentation states:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;JDK dynamic proxies are preferred whenever you have a choice&lt;br/&gt;
&lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch08s06.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch08s06.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="76362" author="werdex" created="Wed, 29 Feb 2012 02:40:03 +0000"  >&lt;p&gt;I looked to the sources of AbstractApplicationEventMulticaster and found out why interface proxy bean is added twice.&lt;/p&gt;

&lt;p&gt;So the root of the cause is described by Bob:&lt;br/&gt;
&amp;#8212;&lt;br/&gt;
First all the listener bean instances are added to the list. Then the beans are retrieved from the beanfactory via the name. However, the bean factory will return the proxy rather than the bean itself. &lt;br/&gt;
&amp;#8212;&lt;/p&gt;

&lt;p&gt;When CGLIB proxy mode is used  (proxy class extends from bean class) then:&lt;br/&gt;
context.getBeanNamesForType(DummyListener.class):&lt;br/&gt;
dummyListener&lt;/p&gt;

&lt;p&gt;When interface proxy mode is used then&lt;br/&gt;
context.getBeanNamesForType(DummyListener.class):&lt;br/&gt;
dummyListener&lt;br/&gt;
scopedTarget.dummyListener&lt;/p&gt;


&lt;p&gt;So allListeners.contains(listener) in AbstractApplicationEventMulticaster will correctly filter out duplicate proxy when CGLIB is used , but allListeners.contains(listener) will return false when interface proxy mode is used (proxy.getClass()!=bean.getClass())&lt;/p&gt;</comment>
                            <comment id="76363" author="sslavic" created="Wed, 29 Feb 2012 03:04:06 +0000"  >&lt;p&gt;With @Scope one can specify scope for the Spring managed bean but also whether scoped proxy should be created for that bean. By default scope is singleton and no scoped proxy should be created. In xml when defining a bean one had to set &lt;tt&gt;scope&lt;/tt&gt; attribute and use nested &lt;tt&gt;&amp;lt;aop:scoped-proxy/&amp;gt;&lt;/tt&gt; tag for same configuration options - now it&apos;s all in one annotation.&lt;/p&gt;

&lt;p&gt;You can find more info about scoped proxy concept in Spring ref docs (see &lt;a href=&quot;http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-factory-scopes-other-injection&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;). There is a clear note there:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You do not need to use the &amp;lt;aop:scoped-proxy/&amp;gt; in conjunction with beans that are scoped as singletons or prototypes. If you try to create a scoped proxy for a singleton bean, the BeanCreationException is raised.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So problem is that rules which were (and still should be) applied for xml configuration are not applied for equivalent &lt;tt&gt;@Scope&lt;/tt&gt; annotation configuration - one can define singleton bean and a scoped proxy for it without getting BeanCreationException thrown.&lt;/p&gt;

&lt;p&gt;Paul, what you are trying to achieve should be accomplished by configuring &lt;tt&gt;&amp;lt;tx:annotation-driven/&amp;gt;&lt;/tt&gt; tag itself - by setting &lt;tt&gt;mode&lt;/tt&gt; and &lt;tt&gt;proxy-target-class&lt;/tt&gt; attributes. You can find documentation for those attributes in &lt;a href=&quot;http://www.springframework.org/schema/tx/spring-tx.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;tx namespace xsd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;ve debugged, and behavior Bob described by analyzing source is not happening. My previous comment contains details on what is current behavior in such invalid and wrongly allowed state - to sum up, event multicaster has collection of listener bean names and collection of references to listener bean object, when event is published a collection of listeners that should handle event is assembled from these two collections; in this case first collection will contain two references to each of the two proxy objects (cglib, and scoped JDK dynamic proxy), and second collection will contain a name of scoped target bean (listener itself) which on lookup will resolve to scoped proxy object, so final collection will contain the two proxy objects; multicaster then publishes event to each of them, but since both of them point to same target bean, listener gets called twice.&lt;/p&gt;</comment>
                            <comment id="76367" author="werdex" created="Wed, 29 Feb 2012 05:07:15 +0000"  >&lt;p&gt;Hi Stevo,&lt;br/&gt;
Yes, you are right. It&apos;s the problem when mixing CGLIB and JDK interfaces for the same bean. In this sample i have added @Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.INTERFACES) assuming that it will OVERRIDE proxy mode for this bean. Adding proxy-target-class=&quot;false&quot; to tx:annotation-driven fixed the problem with interface mode.&lt;/p&gt;

&lt;p&gt;However, i didn&apos;t use this annotation in my previous project where listener was fired twice, but i believe the problem was the same: 2 proxies were created for some reason on the same bean.&lt;br/&gt;
So i think spring should throw an exception when 2 proxies are created on the same bean.&lt;/p&gt;</comment>
                            <comment id="76372" author="sslavic" created="Wed, 29 Feb 2012 06:07:27 +0000"  >&lt;p&gt;AFAICT that part works as designed, Spring will not do it on its own if it isn&apos;t configured to do that - if it is configured to do that, then it&apos;s developer&apos;s responsibility.&lt;/p&gt;

&lt;p&gt;Only thing that is inconsistent is docs stating BeanCreationException will be raised on creation of a scoped proxy for a singleton bean, and BeanCreationException not actually being raised when scoped proxy is configured via annotations and with aop:scoped-proxy in XML (just checked, and found &lt;a href=&quot;http://stackoverflow.com/a/9019562/381140&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;one more external confirmation&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;@Chris, should docs be changed or implementation?&lt;/p&gt;</comment>
                            <comment id="76377" author="cbeams" created="Wed, 29 Feb 2012 06:41:04 +0000"  >&lt;p&gt;Stevo, you can yank that text from the documentation and issue a PR if you like.  It&apos;s no longer true that a &lt;tt&gt;BeanCreationException&lt;/tt&gt; is thrown, and we probably won&apos;t re-implement this in case people are depending on the behavior.  Paul, it sounds like you&apos;ve got what you need, and that this is basically a documentation issue in the end as opposed to a bug.&lt;/p&gt;</comment>
                            <comment id="76378" author="werdex" created="Wed, 29 Feb 2012 07:07:38 +0000"  >&lt;p&gt;Hi Chris and Steve,&lt;br/&gt;
So i can&apos;t reproduce this issue anymore using spring 3.0.5+ without the usage of Scoped annotation. If i face with this issue again, i will attach the test case. Please close this issue.&lt;/p&gt;</comment>
                            <comment id="76379" author="sslavic" created="Wed, 29 Feb 2012 07:10:48 +0000"  >&lt;p&gt;Will update docs and create pull request.&lt;/p&gt;</comment>
                            <comment id="76399" author="sslavic" created="Wed, 29 Feb 2012 14:43:01 +0000"  >&lt;p&gt;&lt;a href=&quot;https://github.com/SpringSource/spring-framework/pull/45&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Pull request&lt;/a&gt; created.&lt;/p&gt;</comment>
                            <comment id="76425" author="cbeams" created="Thu, 1 Mar 2012 03:34:56 +0000"  >&lt;p&gt;Thanks, Stevo for the pull request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;commit 924c869b8adeaf8fe3da047d0bbf0137ffa9ddce&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;Author:     Stevo Slavic &amp;lt;sslavic@gmail.com&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;AuthorDate: Wed Feb 29 23:27:49 2012 +0100&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;Commit:     Chris Beams &amp;lt;cbeams@vmware.com&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;CommitDate: Thu Mar 1 12:29:40 2012 +0100&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    Remove note on singleton-scoped proxy raising BCE&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    Before this change bean scopes chapter in Spring reference documentation&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    had a note which mentioned that creating a scoped proxy for singleton-&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    or prototype-scoped beans will throw BeanCreationException.&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    This is no longer the case and this change removes the mentioned note.&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    Issue: SPR-7940&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;&lt;/blockquote&gt;</comment>
                            <comment id="98988" author="pranav.tiwary" created="Tue, 18 Feb 2014 03:15:36 +0000"  >&lt;p&gt;I am having same issue, Any immediate help will be appreciated.&lt;/p&gt;

&lt;p&gt;I have service class, this has @transaction annotation on another methods&lt;/p&gt;

&lt;p&gt;@Service(PBSTaskService.BEAN_NAME)&lt;br/&gt;
public class  PBSTaskServiceImpl extends StandardServiceImpl&amp;lt;ITask&amp;gt;  implements PBSTaskService,&lt;br/&gt;
      ApplicationListener&amp;lt;SurveyDefinitionPublishedEvent&amp;gt; {&lt;/p&gt;

&lt;p&gt;   @Autowired&lt;br/&gt;
   private AutoSelectTaskSliceRouteSyncService autoSelectTaskSliceRouteSyncService;  // CYCLIC Dependency&lt;/p&gt;

&lt;p&gt; @Override&lt;br/&gt;
   public void onApplicationEvent(SurveyDefinitionPublishedEvent event) &lt;/p&gt;
{
      System.out.println(&quot;PBSTSImpl&quot;);   // THIS IS CALLED TWICE
   }

&lt;p&gt;... Other method with @Transaction Annotation&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;@Service(AutoSelectTaskSliceRouteSyncService.BEAN_NAME)&lt;br/&gt;
public class AutoSelectTaskSliceRouteSyncServiceImpl implements AutoSelectTaskSliceRouteSyncService &lt;/p&gt;
{

@Autowired
private PBSTaskService pbsTaskService;  // CYCLIC dependency

}

&lt;p&gt;Now If I remove AutoSelectTaskSliceRouteSyncService dependency from First Class, OnApplicationEvent is called once, else twice.&lt;/p&gt;

&lt;p&gt;I debugged and found out that &lt;br/&gt;
SimpleApplicationEventMulticaster.getApplicationListeners(myEvent) : Has two proxy object, one wrapped with Cglib and another default one. But it has two only in case if it has cyclic dependency. If I remove Cyclic dependency, it has only one proxy object and that one is enahnces by CGLIB.&lt;/p&gt;

&lt;p&gt;my Tx annotation : &amp;lt;!-- enable the configuration of transactional behavior based on annotations --&amp;gt;&lt;br/&gt;
    &amp;lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&amp;gt; I had tried it with proxy-target-class=&quot;true or false&quot; but no luck.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="46006">SPR-9963</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="19458" name="SPR-7940.zip" size="6097" author="sslavic" created="Mon, 27 Feb 2012 17:42:32 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        2 years, 44 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 11 Feb 2011 07:38:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>pranav.tiwary</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00h6v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2830</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>