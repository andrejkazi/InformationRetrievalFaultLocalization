<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:48:03 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2415/SPR-2415.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2415] Circular reference w/proxy backwards compatibility issue</title>
                <link>https://jira.spring.io/browse/SPR-2415</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;ve attached an Eclipse project containing a bean configuration + JUnit test that demonstrates a backwards compatibility issue with 2.0-rc3 and 1.2.8.  If you run the test w/ the 1.2.8 JARs, everything works fine.  If you try it with the 2.0-rc3 JARs, you get the stack trace below.&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &apos;manager&apos;: Bean with name &apos;manager&apos; has been injected into other beans &lt;span class=&quot;error&quot;&gt;&amp;#91;subscriber&amp;#93;&lt;/span&gt; in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:418)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:92)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:77)&lt;br/&gt;
	at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:130)&lt;br/&gt;
	at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:238)&lt;br/&gt;
	at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:110)&lt;br/&gt;
	at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:194)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:125)&lt;br/&gt;
	at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)&lt;/p&gt;
</description>
            <key id="14741">SPR-2415</key>
            <summary>Circular reference w/proxy backwards compatibility issue</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="jmays">Joe Mays</reporter>
                        <labels>
                    </labels>
                <created>Fri, 11 Aug 2006 07:56:55 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:56 +0000</updated>
                            <resolved>Thu, 21 Sep 2006 23:56:59 +0000</resolved>
                                    <version>2.0 RC3</version>
                                    <fixVersion>2.0 final</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="19017" author="jmays" created="Fri, 11 Aug 2006 07:57:17 +0000"  >&lt;p&gt;Please let me know if you guys have any questions...&lt;/p&gt;</comment>
                            <comment id="19160" author="juergen.hoeller" created="Mon, 21 Aug 2006 02:33:09 +0000"  >&lt;p&gt;This is actually an intended effect: In Spring 2.0, we apply a stronger consistency check for circular references now.&lt;/p&gt;

&lt;p&gt;Previously, a circular reference could lead to a non-proxied object getting injected despite the exposed object being proxied. In your case, this applies to the &quot;manager&quot; bean: The exposed one will be proxied, but the one injected into the &quot;subscriber&quot; bean will not! Since the latter is not in the intent of the expressed configuration, an exception gets thrown - which we consider as better than just silently injecting a raw (non-proxied) object there.&lt;/p&gt;

&lt;p&gt;Hence, I would argue that Spring 2.0 simply enforces stricter rules here - with Spring 1.2 having been wrong in accepting such a circular reference configuration in the first place.&lt;/p&gt;

&lt;p&gt;As a general solution, I would recommend to get rid of this circular reference between your beans there: Factor out the common logic that both Manager and Subscriber need into some new object, define that new object as a separate bean and delegate to it from Managed and Subscriber.&lt;/p&gt;

&lt;p&gt;As a more specific solution, you could also consider using TransactionProxyFactoryBean definitions instead of an auto-proxy creator, which your Manager being proxied that way and Subscriber receiving an explicit reference to the target Manager object (which will be visible when using a TransactionProxyFactoryBean, but not when using auto-proxy creation).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="19163" author="jmays" created="Mon, 21 Aug 2006 05:00:00 +0000"  >&lt;p&gt;Thanks, Juergen.&lt;/p&gt;

&lt;p&gt;I agree that Spring 2.0&apos;s behavior is better than 1.2 in throwing an exception instead of silently injecting the non-proxied object.  Also, your suggestion about factoring out common logic is usually good, except here I really do want the circular relationship.  What&apos;s bothering me, however, is that the proxying/injection behavior is different when using a proxy factory bean vs. auto-proxy creation.  I would think there should be no difference (from an API perspective) what method is used to create the proxies - whether it be XML or annotations - both should result in proxied objects injected into all beans.&lt;/p&gt;</comment>
                            <comment id="19386" author="rjanovski" created="Mon, 4 Sep 2006 19:04:26 +0000"  >&lt;p&gt;Juergen, &lt;/p&gt;

&lt;p&gt;I&apos;ve been having the same problem here at EMC while trying to upgrade to Spring 2.0.&lt;br/&gt;
In our case we have over 200 spring-managed beans, and we use auto-proxy-creator for top-level wrapping; we don&apos;t care too much that some internal references are not wrapped as a side effect.&lt;/p&gt;

&lt;p&gt;removing the auto-proxy-creator is an option that we prefer not to take due to our large objects base maintenance cost.&lt;/p&gt;

&lt;p&gt;I still didn&apos;t understand if you are going to provide a &quot;backwards-compatible&quot; flag fix in RC4, and if so how and where do I set it? (I can live with nightly build for now, but I do need this fast...)&lt;/p&gt;

&lt;p&gt;thanks in advance &lt;br/&gt;
-ram&lt;/p&gt;</comment>
                            <comment id="19796" author="juergen.hoeller" created="Thu, 21 Sep 2006 21:30:36 +0000"  >&lt;p&gt;FWIW, the injection behavior shouldn&apos;t actually differ between auto-proxying and proxy factory bean usage: It&apos;s simply that the raw target object is explicitly available in the latter case but not in the former. Hence, you only have the option of explicitly wiring in a raw target object when using proxy factory beans. It&apos;s simply a natural consequence of the difference in approach.&lt;/p&gt;

&lt;p&gt;I do consider adding a flag that makes the bean factory accept such injection of raw objects despite them getting proxied. However, even if it&apos;s introduced, it&apos;s not recommended by any means; it would mainly serve for backwards compatibility with the unclean behavior of Spring 1.2.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="19797" author="juergen.hoeller" created="Thu, 21 Sep 2006 23:56:59 +0000"  >&lt;p&gt;I&apos;ve introduced a &quot;setAllowRawInjectionDespiteWrapping&quot; config method on DefaultListableBeanFactory, which defaults to &quot;false&quot;. This flag can be switched to &quot;true&quot; to allow the injection of raw bean instances even in case of eventual wrapping, similar to Spring 1.2&apos;s default behavior.&lt;/p&gt;

&lt;p&gt;However, note that this needs to be configured at the BeanFactory level. In an ApplicationContext, the actual BeanFactory effectively sits inside the context. So for example, in a web environment, you need to create your own WebApplicationContext class like as follows:&lt;/p&gt;

&lt;p&gt;public class MyWebApplicationContext extends XmlWebApplicationContext {&lt;/p&gt;

&lt;p&gt;	protected DefaultListableBeanFactory createBeanFactory() &lt;/p&gt;
{
		DefaultListableBeanFactory beanFactory = super.createBeanFactory();
		beanFactory.setAllowRawInjectionDespiteWrapping(true);
		return beanFactory;
	}
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;And specify this impl class as &quot;contextClass&quot; in your web.xml:&lt;/p&gt;

&lt;p&gt;&amp;lt;context-param&amp;gt;&lt;br/&gt;
	&amp;lt;param-name&amp;gt;contextClass&amp;lt;/param-name&amp;gt;&lt;br/&gt;
	&amp;lt;param-value&amp;gt;mypackage.MyWebApplicationContext&amp;lt;/param-value&amp;gt;&lt;br/&gt;
&amp;lt;/context-param&amp;gt;&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="19798" author="juergen.hoeller" created="Fri, 22 Sep 2006 00:12:07 +0000"  >&lt;p&gt;Feel free to give this a try in tonight&apos;s nightly snapshot... Let me know whether it works for you!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="22480" author="juergen.hoeller" created="Wed, 28 Feb 2007 06:06:59 +0000"  >&lt;p&gt;FYI, I&apos;ve added a &quot;customizeBeanFactory&quot; template method that allows for easier overriding, e.g.:&lt;/p&gt;

&lt;p&gt;public class MyWebApplicationContext extends XmlWebApplicationContext { &lt;/p&gt;

&lt;p&gt;  protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) &lt;/p&gt;
{ 
    beanFactory.setAllowRawInjectionDespiteWrapping(true); 
  }
&lt;p&gt; &lt;br/&gt;
} &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11882" name="bean-creation-2.0-rc3.zip" size="6627" author="jmays" created="Fri, 11 Aug 2006 07:57:17 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 44 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 21 Aug 2006 02:33:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i03o67:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21458</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>