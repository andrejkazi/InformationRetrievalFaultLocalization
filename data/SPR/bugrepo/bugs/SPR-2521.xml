<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:23:25 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2521/SPR-2521.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2521] @Transactional on interface and AspectJ LTW - strange behavior</title>
                <link>https://jira.spring.io/browse/SPR-2521</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Reference Guide states in chapter 9.5.6 (page 164 in PDF)&lt;br/&gt;
&quot;Note that if annotating interface members (as opposed to methods&lt;br/&gt;
implementing the interface), the interface itself should also be annotated as @Transactional.&quot;&lt;/p&gt;

&lt;p&gt;The problem is that annotation does not work regardless of is interface as whole is annotated or not as soon as it not annotated directly in class that implements interface. &lt;/p&gt;

&lt;p&gt;I would say that behavior isnormal and documentation buggy as Sun Javadoc for meta-annotation &quot;Inherited&quot; clearly states: &lt;br/&gt;
&quot;Note also that this meta-annotation only causes annotations to be inherited from superclasses; annotations on implemented interfaces have no effect. &quot;&lt;/p&gt;

&lt;p&gt;But there is one issue - log from Aspectj (   &amp;lt;weaver options=&quot;-showWeaveInfo -XmessageHandlerClass:org.springframework.aop.aspectj.AspectJWeaverMessageHandler&quot;&amp;gt; ) shows that method inherited from interface is properly weaved (has the same join poins as similar method declared in class), but transaction anyway is not created,  commented xcerpt from log follows, test programm and log are attached:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;
	&lt;ol&gt;
		&lt;li&gt;
		&lt;ol&gt;
			&lt;li&gt;
			&lt;ol&gt;
				&lt;li&gt;
				&lt;ol&gt;
					&lt;li&gt;Method (getTransaction()) declared and annotated in class&lt;br/&gt;
INFO - &lt;span class=&quot;error&quot;&gt;&amp;#91;AspectJ&amp;#93;&lt;/span&gt; Join point &apos;method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())&apos; in Type &apos;de.ntec.feasibility.configurable.TestAspects&apos; (TestAspects.java:32) advised by before advice from &apos;org.springframework.transaction.aspectj.AnnotationTransactionAspect&apos; (AbstractTransactionAspect.aj:60)&lt;br/&gt;
INFO - &lt;span class=&quot;error&quot;&gt;&amp;#91;AspectJ&amp;#93;&lt;/span&gt; Join point &apos;method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())&apos; in Type &apos;de.ntec.feasibility.configurable.TestAspects&apos; (TestAspects.java:32) advised by afterThrowing advice from &apos;org.springframework.transaction.aspectj.AnnotationTransactionAspect&apos; (AbstractTransactionAspect.aj:71)&lt;br/&gt;
INFO - &lt;span class=&quot;error&quot;&gt;&amp;#91;AspectJ&amp;#93;&lt;/span&gt; Join point &apos;method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())&apos; in Type &apos;de.ntec.feasibility.configurable.TestAspects&apos; (TestAspects.java:32) advised by afterReturning advice from &apos;org.springframework.transaction.aspectj.AnnotationTransactionAspect&apos; (AbstractTransactionAspect.aj:81)&lt;br/&gt;
INFO - &lt;span class=&quot;error&quot;&gt;&amp;#91;AspectJ&amp;#93;&lt;/span&gt; Join point &apos;method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())&apos; in Type &apos;de.ntec.feasibility.configurable.TestAspects&apos; (TestAspects.java:32) advised by after advice from &apos;org.springframework.transaction.aspectj.AnnotationTransactionAspect&apos; (AbstractTransactionAspect.aj:86)&lt;/li&gt;
					&lt;li&gt;Method (getTransactionI()) declared and annotated in interface&lt;br/&gt;
INFO - &lt;span class=&quot;error&quot;&gt;&amp;#91;AspectJ&amp;#93;&lt;/span&gt; Join point &apos;method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())&apos; in Type &apos;de.ntec.feasibility.configurable.TestAspects&apos; (TestAspects.java:37) advised by before advice from &apos;org.springframework.transaction.aspectj.AnnotationTransactionAspect&apos; (AbstractTransactionAspect.aj:60)&lt;br/&gt;
INFO - &lt;span class=&quot;error&quot;&gt;&amp;#91;AspectJ&amp;#93;&lt;/span&gt; Join point &apos;method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())&apos; in Type &apos;de.ntec.feasibility.configurable.TestAspects&apos; (TestAspects.java:37) advised by afterThrowing advice from &apos;org.springframework.transaction.aspectj.AnnotationTransactionAspect&apos; (AbstractTransactionAspect.aj:71)&lt;br/&gt;
INFO - &lt;span class=&quot;error&quot;&gt;&amp;#91;AspectJ&amp;#93;&lt;/span&gt; Join point &apos;method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())&apos; in Type &apos;de.ntec.feasibility.configurable.TestAspects&apos; (TestAspects.java:37) advised by afterReturning advice from &apos;org.springframework.transaction.aspectj.AnnotationTransactionAspect&apos; (AbstractTransactionAspect.aj:81)&lt;br/&gt;
INFO - &lt;span class=&quot;error&quot;&gt;&amp;#91;AspectJ&amp;#93;&lt;/span&gt; Join point &apos;method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())&apos; in Type &apos;de.ntec.feasibility.configurable.TestAspects&apos; (TestAspects.java:37) advised by after advice from &apos;org.springframework.transaction.aspectj.AnnotationTransactionAspect&apos; (AbstractTransactionAspect.aj:86)&lt;br/&gt;
................
					&lt;ol&gt;
						&lt;li&gt;From getTransaction method&lt;br/&gt;
INFO - ***** newTestAspects returned transaction: org.springframework.transaction.support.DefaultTransactionStatus@1c4ff2c&lt;br/&gt;
.............&lt;/li&gt;
						&lt;li&gt;From getTransactionI method&lt;br/&gt;
org.springframework.transaction.IllegalTransactionStateException: Transaction propagation &apos;mandatory&apos; but no existing transaction found&lt;br/&gt;
        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:306)&lt;br/&gt;
        at de.ntec.feasibility.configurable.TestAspects.doGetTransaction(TestAspects.java:44)&lt;br/&gt;
        at de.ntec.feasibility.configurable.TestAspects.getTransactionI(TestAspects.java:37)&lt;br/&gt;
        at de.ntec.feasibility.configurable.Main.doTest(Main.java:41)&lt;br/&gt;
        at de.ntec.feasibility.configurable.Main.main(Main.java:25)&lt;br/&gt;
INFO - ***** newTestAspects returned transaction from interface: null&lt;/li&gt;
					&lt;/ol&gt;
					&lt;/li&gt;
				&lt;/ol&gt;
				&lt;/li&gt;
			&lt;/ol&gt;
			&lt;/li&gt;
		&lt;/ol&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So I&apos;m not sure what is a problem - documentation, aspect implementatiion or AspectJ.&lt;/p&gt;

&lt;p&gt;Definitely, there is seemingly easy workaround - to annotate each class that implements interface, but IMHO, transactional behavior is not implementation detail (regardless of opinion of AnnotationTransactionAspect developers) but very importan part of method business contract, so problem&lt;br/&gt;
seems to be serious.&lt;/p&gt;

</description>
            <key id="14892">SPR-2521</key>
            <summary>@Transactional on interface and AspectJ LTW - strange behavior</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="adrian.colyer">Adrian Colyer</assignee>
                                    <reporter username="al0">Oleksandr Alesinskyy</reporter>
                        <labels>
                    </labels>
                <created>Thu, 31 Aug 2006 09:42:05 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:57 +0000</updated>
                            <resolved>Sun, 10 Sep 2006 21:58:22 +0000</resolved>
                                    <version>2.0 RC3</version>
                                    <fixVersion>2.0 RC4</fixVersion>
                                    <component>[Documentation]</component>
                    <component>Core:AOP</component>
                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="19520" author="adrian.colyer" created="Sun, 10 Sep 2006 21:58:22 +0000"  >&lt;p&gt;This is due to confusing documentation, sorry.  The note at the bottom of section 9.5.4 in the transaction chapter is correct, and the text in the section of that chapter describing the aspect was incorrect.&lt;/p&gt;

&lt;p&gt;I&apos;ve updated the javadocs, aop chapter, and transaction chapter to say the following:&lt;/p&gt;

&lt;p&gt;&quot;When using this aspect, you must annotate the /implementation/ class (and/or methods within that class), /not/ the interface (if any) that the class implements. AspectJ follows Java&apos;s rule that annotations on interfaces are /not inherited/.&lt;/p&gt;

&lt;p&gt;A @Transactional annotation on a class specifies the default transaction semantics for the execution of any /public/ operation in the class.&lt;/p&gt;

&lt;p&gt;A @Transactional annotation on a method within the class overrides the default transaction semantics given by the class annotation (if present). Methods with public, protected, and default visibility may all be annotated. Annotating protected and default visibility methods directly is the only way to get transaction demarcation for the execution of such operations.&quot;&lt;/p&gt;

&lt;p&gt;I appreciate you&apos;d prefer the aspect to work with annotations inherited from interfaces. We thought long and hard about that issue when designing the aspectj language extensions for Java 5. In the end, since AspectJ as a programming language is an extension of the Java programming language, we felt that we had to follow the rules laid down in the Java specification.&lt;/p&gt;

&lt;p&gt;The extra weaving messages turn out to be necessary, but did uncover a subtle issue in the pointcut expression used in the aspect. The aspect contained a pointcut matching the execution of any public method declared in a type with an @Transactional annotation. This does actually match methods declared in an interface that have the annotation (but then the TransactionAnnotationSource never found the @Transactional attribute so no tx demarcation occurs). I&apos;ve refined the pointcut expression to also check that the actual object executing does indeed have the @Transactional annotation. The nef effect of this is that when no type in the hierarchy (supers or implemented interfaces) have the annotation, there will be no weaving. If a type in the hierarchy does have the annotation there will be an additional check (runtime test for interface-declared annotation) that will fail if the annotation was defined on an interface (but you will see a weaving message for inserting the check).&lt;/p&gt;</comment>
                            <comment id="19523" author="al0" created="Sun, 10 Sep 2006 23:53:08 +0000"  >&lt;p&gt;Concerning following following the rules &quot;laid down by Java specification&quot; - it is a nice goal but to the moment following these rules come ito inconsistentof behavior of Transactionnal aspect and &amp;lt;tx:annotation-driven&amp;gt; annotation which (in most cases) grants annotation on interfaces,&lt;br/&gt;
see &lt;a href=&quot;https://jira.spring.io/browse/SPR-2522&quot; title=&quot;Semantics affected - &amp;lt;tx:annotation-driven&amp;gt;, proxy-target-class and @Transactional on interface&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2522&quot;&gt;&lt;del&gt;SPR-2522&lt;/del&gt;&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Oleksandr Alesinskyy&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11923" name="Main.java" size="1862" author="al0" created="Thu, 31 Aug 2006 10:02:12 +0000"/>
                            <attachment id="11924" name="TestAspects.java" size="1809" author="al0" created="Thu, 31 Aug 2006 10:02:46 +0000"/>
                            <attachment id="11925" name="TestAspectsIntf.java" size="286" author="al0" created="Thu, 31 Aug 2006 10:02:46 +0000"/>
                            <attachment id="11922" name="aop.xml" size="322" author="al0" created="Thu, 31 Aug 2006 10:02:12 +0000"/>
                            <attachment id="11921" name="context1.xml" size="2125" author="al0" created="Thu, 31 Aug 2006 10:02:12 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 16 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 10 Sep 2006 21:58:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00vy7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5221</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>