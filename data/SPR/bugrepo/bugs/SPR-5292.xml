<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:03:05 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-5292/SPR-5292.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-5292] Add support for parameterized JUnit 4 tests in the Spring TestContext Framework</title>
                <link>https://jira.spring.io/browse/SPR-5292</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;SpringJUnit4ClassRunner is unaware of @Parameters annotation that normally is processed with JUnit&apos;s own Parameterized runner. &lt;/p&gt;</description>
            <key id="24730">SPR-5292</key>
            <summary>Add support for parameterized JUnit 4 tests in the Spring TestContext Framework</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="sbrannen">Sam Brannen</assignee>
                                    <reporter username="tuomas_kiviaho">Tuomas Kiviaho</reporter>
                        <labels>
                            <label>pull-request-submitted</label>
                            <label>repro-project-submitted</label>
                    </labels>
                <created>Wed, 12 Nov 2008 21:05:17 +0000</created>
                <updated>Wed, 24 Jun 2015 13:37:57 +0000</updated>
                            <resolved>Wed, 24 Jun 2015 13:37:57 +0000</resolved>
                                    <version>2.5.6</version>
                                                    <component>Test</component>
                        <due></due>
                            <votes>42</votes>
                                    <watches>46</watches>
                                                                <comments>
                            <comment id="46504" author="jonburgin" created="Thu, 3 Sep 2009 06:30:34 +0000"  >&lt;p&gt;Here is our solution. Enjoy!&lt;/p&gt;</comment>
                            <comment id="46505" author="jonburgin" created="Thu, 3 Sep 2009 06:31:58 +0000"  >&lt;p&gt;That is our solution is attached above. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="55500" author="markvandervoort" created="Tue, 6 Jul 2010 19:39:23 +0000"  >&lt;p&gt;I think there are a few problems with the solution sketched.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It is not compatible with junit4.7&lt;/li&gt;
	&lt;li&gt;Testcases will be treated as testclasses, so any class level DirtiesContext annotations will cause the the context to be refreshed after each case, rather than after the entire set&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="58542" author="mbrown" created="Tue, 28 Sep 2010 06:42:26 +0000"  >&lt;p&gt;Just curious - should the value of the Fix Version (which has been bumped from 3.0 RCs to 3.1 milestone) be interpreted as meaning that this support will be added in 3.1?&lt;/p&gt;</comment>
                            <comment id="58563" author="juergen.hoeller" created="Tue, 28 Sep 2010 10:04:10 +0000"  >&lt;p&gt;Indeed, we&apos;re usually setting the fix version as a kind of work plan. So in this case, the plan is indeed to provide this in 3.1 M2 towards the end of this year.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="59540" author="manjuka" created="Wed, 20 Oct 2010 17:33:39 +0000"  >&lt;p&gt;As someone pointed out, the previous file does not work with the latest JUnit.&lt;br/&gt;
The new SpringParameterizedRunner is hopefully useful for you until @Parameterized is officially supported by Spring.&lt;/p&gt;</comment>
                            <comment id="60708" author="david_syer" created="Wed, 17 Nov 2010 05:32:24 +0000"  >&lt;p&gt;A better approach to this might be to provide the Spring integration test support as a @Rule (as well as or instead of a custom Runner).  There might be some limitations of that approach, but it seems worth a try.  I know Iwein did this in a blog a while ago, and although he didn&apos;t complete the feature set it was pretty easy to get off the ground.&lt;/p&gt;</comment>
                            <comment id="64117" author="cbeams" created="Thu, 10 Mar 2011 07:51:48 +0000"  >&lt;p&gt;We ought to consider parameterization of profile combinations here as well.  e.g.: run the same @Test with profiles &lt;span class=&quot;error&quot;&gt;&amp;#91;p1, p2&amp;#93;&lt;/span&gt; active, and run it again with &lt;span class=&quot;error&quot;&gt;&amp;#91;p2, p3&amp;#93;&lt;/span&gt; active, etc.&lt;/p&gt;</comment>
                            <comment id="72333" author="zapster" created="Sat, 5 Nov 2011 09:15:39 +0000"  >&lt;p&gt;I&apos;ve merged Springs JUnit4 Runner (3.0.4) with JUnits Parameterized Runner (r4.8.2). Working just fine for me but not extensively tested. &lt;/p&gt;</comment>
                            <comment id="73482" author="marek.pietrasz" created="Tue, 6 Dec 2011 07:19:49 +0000"  >&lt;p&gt;I am afraid current patch doesn&apos;t work with TestExecutionListener - I couldn&apos;t force it to execute beforeTestClass method.&lt;/p&gt;</comment>
                            <comment id="76240" author="paris holley" created="Fri, 24 Feb 2012 14:48:27 +0000"  >&lt;p&gt;SpringJUnit4ParameterizedClassRunner.java currently has a createTest() implementation that instantiates a new instance of the test class for each method, is this intended behavior? I ended up changing it for our needs to only create it once (so that it behaves like normal non-parameterized tests).&lt;/p&gt;</comment>
                            <comment id="76244" author="zzantozz" created="Sat, 25 Feb 2012 05:56:48 +0000"  >&lt;p&gt;If I understand you correctly, that&apos;s &lt;b&gt;not&lt;/b&gt; how JUnit behaves for non-parameterized tests. It always creates a new test instance for each test method. So yes, that&apos;s the intended behavior.&lt;/p&gt;</comment>
                            <comment id="76271" author="paris holley" created="Mon, 27 Feb 2012 06:13:06 +0000"  >&lt;p&gt;Ryan you are right, taking another look at javadoc for Parameterized it says its a new instance per test, probably need to take issue up with JUnit. Such behavior makes maintaining test state harder, but can be worked around.&lt;/p&gt;</comment>
                            <comment id="81440" author="cbeams" created="Fri, 6 Jul 2012 11:45:37 +0000"  >&lt;p&gt;Repro project at &lt;a href=&quot;https://github.com/SpringSource/spring-framework-issues/pull/28&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/SpringSource/spring-framework-issues/pull/28&lt;/a&gt;.  Thanks, Dave.&lt;/p&gt;</comment>
                            <comment id="82727" author="joensson" created="Mon, 20 Aug 2012 02:57:43 +0000"  >&lt;p&gt;Hi Chris - I noticed your comment from a while back on this JIRA &quot;We ought to consider parameterization of profile combinations here as well. e.g.: run the same @Test with profiles &lt;span class=&quot;error&quot;&gt;&amp;#91;p1, p2&amp;#93;&lt;/span&gt; active, and run it again with &lt;span class=&quot;error&quot;&gt;&amp;#91;p2, p3&amp;#93;&lt;/span&gt; active, etc.&quot;&lt;/p&gt;

&lt;p&gt;I find that a very useful feature. It just so happens that we have a setup where we need this feature. So I did a small proof of concept using the SpringContextRule from &lt;a href=&quot;https://github.com/SpringSource/spring-framework-issues/pull/28&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/SpringSource/spring-framework-issues/pull/28&lt;/a&gt; and described my approach in the SpringSource fora. &lt;/p&gt;

&lt;p&gt;It is very rough and it requires the use of the @Parameterized.Parameters array to supply the list of profiles per test iteration. However ugly an approach it may be it works fine and serves my purpose. So I thought that others might have a similar need and posted my approach here. &lt;/p&gt;

&lt;p&gt;Feel free to criticize or suggest improvements. Next time I don&apos;t have anything to work on during my commute I will have a look at how to make this possible using the SpringJunit4 runner.&lt;br/&gt;
&lt;a href=&quot;http://forum.springsource.org/showthread.php?129462-RunWith(Parameterized-class)-with-different-set-of-Spring-profiles-per-parameter&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springsource.org/showthread.php?129462-RunWith(Parameterized-class)-with-different-set-of-Spring-profiles-per-parameter&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="88920" author="iblaw" created="Wed, 20 Mar 2013 10:24:25 +0000"  >&lt;p&gt;None of the presently attached junit runners worked for me for one reason or another. As such, I wrote a runner that met my needs. I thought others might benefit from it, hence my sharing it here - by me attaching a file named SpringJUnit4ParameterizedClassRunner.java.v2&lt;/p&gt;</comment>
                            <comment id="89555" author="gpitteloud" created="Mon, 22 Apr 2013 03:43:59 +0000"  >&lt;p&gt;I just submitted the &lt;a href=&quot;https://github.com/SpringSource/spring-framework/pull/277&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;pull request 277&lt;/a&gt; for this issue, in the form of a single runner that is able to run both parameterized and non-parameterized tests in the TestContext framework. I developed it some times ago and have been using it since then without any issue. The runner does not contain the spring-profile feature Chris Beams is talking about, but only &quot;raw&quot; parameterized tests.&lt;/p&gt;</comment>
                            <comment id="90456" author="rsenden" created="Thu, 30 May 2013 01:26:21 +0000"  >&lt;p&gt;It is not exactly a solution for the described problem, but the attached ConstructorArgFromSpringConfigTestRunner.java takes a different approach for parameterizing a unit test. Test classes will need to define a single constructor taking a single parameter. The runner will then run the test class once for every Spring bean that matches the constructor parameter type.&lt;/p&gt;

&lt;p&gt;Please note that this class currently only performs dependency injection; for example it doesn&apos;t handle Spring Test annotations like ExpectedException, Repeat etc. &lt;/p&gt;</comment>
                            <comment id="90457" author="rsenden" created="Thu, 30 May 2013 01:28:11 +0000"  >&lt;p&gt;Run test once for each Spring bean that matches the single test constructor parameter type.&lt;/p&gt;</comment>
                            <comment id="93533" author="nikolayb" created="Thu, 12 Sep 2013 03:11:15 +0000"  >&lt;p&gt;I have attached junit runner (a file namedParameterizedDirtiesContext.java) worked for me. My ruuner is inheritor of junit  Parameterized ruuner and uses inheritor of SpringJUnit4ClassRunner for creation a test. So, the runner uses junit approach for parameterizing a unit test and support all SpringJUnit functionalites. The ruuner work with junit 4.8.2 and or higher version. &lt;/p&gt;</comment>
                            <comment id="108634" author="mbjelac" created="Wed, 15 Oct 2014 01:29:00 +0000"  >&lt;p&gt;I tried several runners attached here, but confirm that only &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://jira.spring.io/secure/attachment/21116/21116_SpringJUnit4ParameterizedClassRunner.java.v2&quot; title=&quot;SpringJUnit4ParameterizedClassRunner.java.v2 attached to SPR-5292&quot;&gt;SpringJUnit4ParameterizedClassRunner.java.v2&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://jira.spring.io/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; works for me.&lt;/p&gt;</comment>
                            <comment id="110453" author="koen_serry" created="Sat, 6 Dec 2014 09:07:49 +0000"  >&lt;p&gt;Since a pull request is created (and is confirmed to work), is there any reason not to merge it?&lt;/p&gt;</comment>
                            <comment id="117005" author="sbrannen" created="Wed, 24 Jun 2015 13:37:57 +0000"  >&lt;p&gt;I am resolving this issue as essentially a &lt;em&gt;duplicate&lt;/em&gt; of &lt;a href=&quot;https://jira.spring.io/browse/SPR-7731&quot; title=&quot;Provide @Rule alternative to SpringJUnit4ClassRunner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-7731&quot;&gt;&lt;del&gt;SPR-7731&lt;/del&gt;&lt;/a&gt;, since &lt;a href=&quot;https://jira.spring.io/browse/SPR-7731&quot; title=&quot;Provide @Rule alternative to SpringJUnit4ClassRunner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-7731&quot;&gt;&lt;del&gt;SPR-7731&lt;/del&gt;&lt;/a&gt; introduced support for integrating the &lt;em&gt;Spring TestContext Framework&lt;/em&gt; into JUnit via Rules instead of a &lt;tt&gt;Runner&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;In other words, thanks to the support for rules introduced in &lt;a href=&quot;https://jira.spring.io/browse/SPR-7731&quot; title=&quot;Provide @Rule alternative to SpringJUnit4ClassRunner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-7731&quot;&gt;&lt;del&gt;SPR-7731&lt;/del&gt;&lt;/a&gt;, there is no longer a need for a custom extension of &lt;tt&gt;SpringJUnit4ClassRunner&lt;/tt&gt; that supports parameterized tests... since you can now simply use JUnit&apos;s &lt;tt&gt;Parameterized&lt;/tt&gt; runner with Spring&apos;s rules.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/test/java/org/springframework/test/context/junit4/rules/ParameterizedSpringRuleTests.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;ParameterizedSpringRuleTests&lt;/a&gt; for a concrete example.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="34803">SPR-7731</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10020">
                    <name>Related</name>
                                            <outwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="16016">SPR-3104</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="21218" name="ConstructorArgFromSpringConfigTestRunner.java" size="3796" author="rsenden" created="Thu, 30 May 2013 01:28:11 +0000"/>
                            <attachment id="21380" name="ParameterizedDirtiesContext.java" size="5409" author="nikolayb" created="Thu, 12 Sep 2013 03:11:15 +0000"/>
                            <attachment id="19038" name="SpringJUnit4ParameterizedClassRunner.java" size="22900" author="zapster" created="Sat, 5 Nov 2011 09:15:39 +0000"/>
                            <attachment id="21116" name="SpringJUnit4ParameterizedClassRunner.java.v2" size="3274" author="iblaw" created="Wed, 20 Mar 2013 10:24:25 +0000"/>
                            <attachment id="15689" name="SpringParameterizedRunner.java" size="5149" author="jonburgin" created="Thu, 3 Sep 2009 06:30:34 +0000"/>
                            <attachment id="17241" name="junit4_SpringParameterizedRunner.java" size="5733" author="manjuka" created="Wed, 20 Oct 2010 17:33:39 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        1 year, 26 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 3 Sep 2009 06:30:34 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>sbrannen</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00jhj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3202</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>