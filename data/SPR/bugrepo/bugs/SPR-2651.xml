<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:00:07 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2651/SPR-2651.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2651] Presence of Acegi interceptors breaks autowiring (was working in m4)</title>
                <link>https://jira.spring.io/browse/SPR-2651</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I previously had a configuration that was working fine through all 2.0 releases until I recently upgrade from M4 to RC4. This no longer works. Here is the stack trace:&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;messageSource&apos; defined in file &lt;span class=&quot;error&quot;&gt;&amp;#91;/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext.xml&amp;#93;&lt;/span&gt;: Cannot resolve reference to bean &apos;messageDAO&apos; while setting bean property &apos;messageDAO&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;messageDAO&apos; defined in file &lt;span class=&quot;error&quot;&gt;&amp;#91;/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext-dao.xml&amp;#93;&lt;/span&gt;: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: sessionFactory or hibernateTemplate is required&lt;br/&gt;
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;messageDAO&apos; defined in file &lt;span class=&quot;error&quot;&gt;&amp;#91;/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext-dao.xml&amp;#93;&lt;/span&gt;: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: sessionFactory or hibernateTemplate is required&lt;br/&gt;
Caused by: java.lang.IllegalArgumentException: sessionFactory or hibernateTemplate is required&lt;br/&gt;
	at org.springframework.orm.hibernate3.support.HibernateDaoSupport.checkDaoConfig(HibernateDaoSupport.java:112)&lt;br/&gt;
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:957)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:924)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:646)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.initMessageSource(AbstractApplicationContext.java:455)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:336)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:92)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:77)&lt;br/&gt;
	at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:138)&lt;br/&gt;
	at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:125)&lt;br/&gt;
	at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:104)&lt;br/&gt;
	at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:75)&lt;br/&gt;
	at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;/p&gt;

&lt;p&gt;This configuration for the SessionFactory (which is a FactoryBean) and the DAO are:&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;sessionFactory&quot; parent=&quot;abstractSessionFactory&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;props&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.dialect&quot;&amp;gt;org.hibernate.dialect.MySQLInnoDBDialect&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.cache.provider_class&quot;&amp;gt;org.hibernate.cache.EhCacheProvider&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.cache.use_second_level_cache&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.cache.use_query_cache&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.show_sql&quot;&amp;gt;false&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.current_session_context_class&quot;&amp;gt;thread&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.cglib.use_reflection_optimizer&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
      &amp;lt;/props&amp;gt;&lt;br/&gt;
    &amp;lt;/property&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;abstractSessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&quot; abstract=&quot;true&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;entityInterceptor&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;bean class=&quot;com.naymz.dao.UpsertInterceptor&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;annotatedClasses&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;list&amp;gt;&lt;br/&gt;
        (snip)&lt;br/&gt;
      &amp;lt;/list&amp;gt;&lt;br/&gt;
    &amp;lt;/property&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;messageDAO&quot; class=&quot;com.naymz.dao.cms.MessageDAOImpl&quot; autowire=&quot;autodetect&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;The configuration for the messageSource bean is:&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;messageSource&quot; class=&quot;com.naymz.cms.NaymzMessageSource&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;useCodeAsDefaultMessage&quot; value=&quot;false&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;alwaysUseMessageFormat&quot; value=&quot;false&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;messageDAO&quot; ref=&quot;messageDAO&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;siteDAO&quot; ref=&quot;siteDAO&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;The issue appears to be that since there is an abstract FactoryBean, the messageDAO is not being injected based on type. My DAO has no dependencies. The superclass of my DAO with a dependency is org.springframework.orm.hibernate3.support.HibernateDaoSupport, which has a setter for a org.hibernate.SessionFactory. I have tried changing the autowire to byType with no luck. byName works but forces huge amounts of changes all over my configuration so that everything is byName and lines up correctly. For whatever reason, the container can no longer determine that I only have a single bean defined of type org.hibernate.SessionFactory and inject that. So, it seems that autowire autodetect and byType are now broken, probably due to the abstract FactoryBean stuff.&lt;/p&gt;</description>
            <key id="15085">SPR-2651</key>
            <summary>Presence of Acegi interceptors breaks autowiring (was working in m4)</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="voidmain">Brian Pontarelli</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 Sep 2006 07:41:32 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:41 +0000</updated>
                            <resolved>Wed, 4 Oct 2006 22:04:48 +0000</resolved>
                                    <version>2.0 RC4</version>
                                    <fixVersion>2.0.1</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="19959" author="voidmain" created="Thu, 28 Sep 2006 07:56:08 +0000"  >&lt;p&gt;More information that was missing and could be very important. There is also two definitions of the abstract bean that have the same name. This allows us to tweak our configuration for our unit tests but still retain the same integrity of a single bean of the type SessionFactory. Here is the additional configuration from our unit test XML file (application-resources.xml):&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;sessionFactory&quot; parent=&quot;abstractSessionFactory&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;props&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.dialect&quot;&amp;gt;org.hibernate.dialect.MySQLInnoDBDialect&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.cache.provider_class&quot;&amp;gt;org.hibernate.cache.EhCacheProvider&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.cache.use_second_level_cache&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.cache.use_query_cache&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.show_sql&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.current_session_context_class&quot;&amp;gt;thread&amp;lt;/prop&amp;gt;&lt;br/&gt;
        &amp;lt;prop key=&quot;hibernate.cglib.use_reflection_optimizer&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
      &amp;lt;/props&amp;gt;&lt;br/&gt;
    &amp;lt;/property&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;Here is our unittest resource method:&lt;/p&gt;

&lt;p&gt;    protected String[] getConfigLocations() {&lt;br/&gt;
        return new String[]&lt;/p&gt;
{&quot;classpath*:**/applicationContext*.xml&quot;, &quot;classpath*:applicationContext-resources.xml&quot;}
&lt;p&gt;;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;The main configuration files contain the configuration from the description above. These are in files like applicationContext-dao.xml. Then for the unittests we override this configuration using another classpath entry. This might confuse the container because it might not be correctly override definitions of abstract beans or something.&lt;/p&gt;</comment>
                            <comment id="19960" author="voidmain" created="Thu, 28 Sep 2006 08:04:58 +0000"  >&lt;p&gt;Okay, sorry to keep spamming this issue, but I&apos;m debugging through stuff as I go. The second file is NOT the issue. I removed the duplicate definition with the same ID and the problem still occurs.&lt;/p&gt;</comment>
                            <comment id="19961" author="voidmain" created="Thu, 28 Sep 2006 08:15:57 +0000"  >&lt;p&gt;Okay, more findings. I changed everything to byName, just to see how far I got and I encountered another issue with injection and RC4. I&apos;m starting to wonder if something is seriously jacked up in my classpath or something (which I&apos;ve checked for and found nothing). Here&apos;s the latest injection issue:&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;messageSource&apos; defined in file &lt;span class=&quot;error&quot;&gt;&amp;#91;/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext.xml&amp;#93;&lt;/span&gt;: Cannot resolve reference to bean &apos;messageDAO&apos; while setting bean property &apos;messageDAO&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;sessionFactory&apos; defined in URL &lt;a href=&quot;file:/home/brian/dev/java/naymz/target/classes/test/applicationContext-resources.xml&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/home/brian/dev/java/naymz/target/classes/test/applicationContext-resources.xml&lt;/a&gt;: Cannot resolve reference to bean &apos;dataSource&apos; while setting bean property &apos;dataSource&apos;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;methodSecurityAdvisor&apos; defined in file &lt;span class=&quot;error&quot;&gt;&amp;#91;/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext-security.xml&amp;#93;&lt;/span&gt;: Unsatisfied dependency expressed through constructor argument with index 0 of type &lt;span class=&quot;error&quot;&gt;&amp;#91;org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&amp;#93;&lt;/span&gt;: There are 0 beans of type &lt;span class=&quot;error&quot;&gt;&amp;#91;class org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&amp;#93;&lt;/span&gt; for autowiring constructor. There should have been 1 to be able to autowire constructor of bean &apos;methodSecurityAdvisor&apos;.&lt;br/&gt;
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;sessionFactory&apos; defined in URL &lt;a href=&quot;file:/home/brian/dev/java/naymz/target/classes/test/applicationContext-resources.xml&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/home/brian/dev/java/naymz/target/classes/test/applicationContext-resources.xml&lt;/a&gt;: Cannot resolve reference to bean &apos;dataSource&apos; while setting bean property &apos;dataSource&apos;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;methodSecurityAdvisor&apos; defined in file &lt;span class=&quot;error&quot;&gt;&amp;#91;/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext-security.xml&amp;#93;&lt;/span&gt;: Unsatisfied dependency expressed through constructor argument with index 0 of type &lt;span class=&quot;error&quot;&gt;&amp;#91;org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&amp;#93;&lt;/span&gt;: There are 0 beans of type &lt;span class=&quot;error&quot;&gt;&amp;#91;class org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&amp;#93;&lt;/span&gt; for autowiring constructor. There should have been 1 to be able to autowire constructor of bean &apos;methodSecurityAdvisor&apos;.&lt;br/&gt;
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;methodSecurityAdvisor&apos; defined in file &lt;span class=&quot;error&quot;&gt;&amp;#91;/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext-security.xml&amp;#93;&lt;/span&gt;: Unsatisfied dependency expressed through constructor argument with index 0 of type &lt;span class=&quot;error&quot;&gt;&amp;#91;org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&amp;#93;&lt;/span&gt;: There are 0 beans of type &lt;span class=&quot;error&quot;&gt;&amp;#91;class org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&amp;#93;&lt;/span&gt; for autowiring constructor. There should have been 1 to be able to autowire constructor of bean &apos;methodSecurityAdvisor&apos;.&lt;/p&gt;

&lt;p&gt;This issue appears to be with ACEGI classes. They use constructor injection and something is fishy because in my configuration file I have both classes defined right next to each other:&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;methodSecurityAdvisor&quot; class=&quot;org.acegisecurity.intercept.method.aopalliance.MethodDefinitionSourceAdvisor&quot; autowire=&quot;constructor&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;bean id=&quot;acegiAttributes&quot; class=&quot;org.acegisecurity.annotation.SecurityAnnotationAttributes&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;bean id=&quot;objectDefinitionSource&quot; class=&quot;org.acegisecurity.intercept.method.MethodDefinitionAttributes&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;attributes&quot; ref=&quot;acegiAttributes&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;accountSecurity&quot; class=&quot;org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;validateConfigAttributes&quot; value=&quot;false&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;authenticationManager&quot; ref=&quot;authenticationManager&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;accessDecisionManager&quot; ref=&quot;aclAccessDecisionManager&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;objectDefinitionSource&quot; ref=&quot;objectDefinitionSource&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;I removed the autowire=&quot;constructor&quot; from the methodSecurityAdvisor bean and added a constructor arg at index 0 that is a ref to the other bean and everything worked fine. Here&apos;s the fixed configuration:&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;methodSecurityAdvisor&quot; class=&quot;org.acegisecurity.intercept.method.aopalliance.MethodDefinitionSourceAdvisor&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;constructor-arg index=&quot;0&quot; ref=&quot;accountSecurity&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;
</comment>
                            <comment id="20017" author="juergen.hoeller" created="Sun, 1 Oct 2006 19:56:51 +0000"  >&lt;p&gt;Brian, I have trouble reproducing your scenario. All local tests for by-type autowiring as well as constructor autowiring work just fine. I suspect there&apos;s some specific issue hiding in your overall configuration that&apos;s not really common...&lt;/p&gt;

&lt;p&gt;In any case: Can you please submit a minimal test case that reproduces the issue? I don&apos;t mind Hibernate SessionFactory definitions (will simply point them to a local test database), but of course it would be great to have a largely isolated test case overall.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20018" author="juergen.hoeller" created="Sun, 1 Oct 2006 20:18:12 +0000"  >&lt;p&gt;Also, you might want to give 2.0 RC3 a try. If this issue is caused by our reworked alias handling RC4, your scenario should work in RC3 but not in RC4. Knowing that would help a lot to track down the root cause.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20020" author="voidmain" created="Mon, 2 Oct 2006 02:21:56 +0000"  >&lt;p&gt;Okay, I went back and tried RC3. No luck. So I created a simple test app, which with all the dependencies turned out not to be so simple &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; That worked fine. Then I went back to my original app and started messing around. I removed all the configuration and slowly started adding it back in until I figured out what was exploding. I&apos;ve seemed to have narrowed it down to some AOP stuff in ACEGI, which seems very bizarre, but when I comment out and in these classes, things work and then don&apos;t. This could be a unrelated however and the issue could be configuration size or order or something else entirely. Here&apos;s the configuration that is failing:&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;methodSecurityAdvisor&quot; class=&quot;org.acegisecurity.intercept.method.aopalliance.MethodDefinitionSourceAdvisor&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;constructor-arg index=&quot;0&quot; ref=&quot;accountSecurity&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;br/&gt;
  &amp;lt;bean id=&quot;acegiAttributes&quot; class=&quot;org.acegisecurity.annotation.SecurityAnnotationAttributes&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;bean id=&quot;objectDefinitionSource&quot; class=&quot;org.acegisecurity.intercept.method.MethodDefinitionAttributes&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;attributes&quot; ref=&quot;acegiAttributes&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;accountSecurity&quot; class=&quot;org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;validateConfigAttributes&quot; value=&quot;false&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;authenticationManager&quot; ref=&quot;authenticationManager&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;!-&lt;del&gt;&amp;lt;property name=&quot;accessDecisionManager&quot; ref=&quot;aclAccessDecisionManager&quot;/&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;objectDefinitionSource&quot; ref=&quot;objectDefinitionSource&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;It appears to be the beans with IDs of accountSecurity and methodSecurityAdvisor. Let me know if I should look into anything else.&lt;/p&gt;</comment>
                            <comment id="20026" author="juergen.hoeller" created="Mon, 2 Oct 2006 20:03:59 +0000"  >&lt;p&gt;OK, good to hear that you narrowed it down already. It&apos;s really odd that the presence of those Acegi interceptors seems to break the autowiring process...&lt;/p&gt;

&lt;p&gt;I&apos;m afraid that we still need a test case that reproduces this, to be able to debug the actual scenario. As you were saying, a simple test works; it seems to be something specific about your application. You can also send me a zip as email attachment, if you want, to not make the test case publically available.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20032" author="voidmain" created="Tue, 3 Oct 2006 00:53:06 +0000"  >&lt;p&gt;Juergen,&lt;/p&gt;

&lt;p&gt;No dice on the simple test case. You are going to have to debug the entire app. I&apos;ve copied over the ACEGI interceptors into my simple test case and they are working fine (it appears). Something is strange because my test app has nearly all the same dependencies as my main app now and yet the main application cannot parse the configuration. &lt;/p&gt;

&lt;p&gt;I&apos;ll try and find your email address around and email you a copy of the application. The best test is just to run any of the JUnit tests, which will all fail prior to running because the Spring configuration won&apos;t be able to be loaded.&lt;/p&gt;</comment>
                            <comment id="20071" author="juergen.hoeller" created="Wed, 4 Oct 2006 22:04:48 +0000"  >&lt;p&gt;Good news: It&apos;s fixed &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; This will be available in tonight&apos;s 2.0.1 snapshot (&lt;a href=&quot;http://www.springframework.org/snapshots&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/snapshots&lt;/a&gt;) - please give it a try!&lt;/p&gt;

&lt;p&gt;This was caused by the auto-proxying mechanism trying to apply the MethodSecurityAdvisor to the DataSource that the SessionFactory points to, which will fail because the MethodSecurityAdvisor talks to a DAO that in turn requires the SessionFactory. We normally detect and handle this through a BeanCurrentlyInCreationException; however, in the cause of the target DAO being autowired, it&apos;s not a BeanCurrentlyInCreationException getting thrown but rather an IllegalArgumentException! Because the factory simply ignores any not yet existing beans for autowiring, as a consequence it doesn&apos;t auto-inject the SessionFactory, thus leading to the IllegalArgumentException thrown by your DAO...&lt;/p&gt;

&lt;p&gt;What we do now is that we let a BeanCurrentlyInCreationException through in case of autowiring, so that the factory knows that there is an autowiring target but it&apos;s not available yet. This leads to a BeanCurrentlyInCreationException just like in the case of an explicit bean reference, in turn telling the auto-proxy creator to simply ignore that advisor for the current bean.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 13 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 1 Oct 2006 19:56:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00von:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5178</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>