<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:47:41 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-820/SPR-820.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-820] MBeanExporter incorrectly handles AOP proxies</title>
                <link>https://jira.spring.io/browse/SPR-820</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;In the method registerSimpleBean there is a check to see if the mbean to register is an aop-proxy:&lt;/p&gt;

&lt;p&gt;    Class beanClass = (AopUtils.isAopProxy(bean) &lt;br/&gt;
        ? bean.getClass().getSuperclass() : bean.getClass());&lt;/p&gt;

&lt;p&gt;This check statement does not yield the target bean. &lt;/p&gt;

&lt;p&gt;I have created around advice for a bean. The bean&apos;s class (in the above statement) is $Proxy9 containing a JdkDynamicAopProxy. &lt;/p&gt;

&lt;p&gt;Here is the complete bean config (sorry, jira is going to mangle this  bad):&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;autoProxyCreator&quot;&lt;br/&gt;
    class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;model.shutdownExceptionHandler&quot;&lt;br/&gt;
    class=&quot;org.blackboxtrader.liquidityarbitrage.application.ModelShutdownExceptionHandler&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;model&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;ref local=&quot;model&quot; /&amp;gt;&lt;br/&gt;
    &amp;lt;/property&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;public class ModelShutdownExceptionHandler extends StaticMethodMatcherPointcutAdvisor&lt;br/&gt;
                                           implements InitializingBean {&lt;/p&gt;

&lt;p&gt;    private static final Logger log = Logger.getLogger(ModelShutdownExceptionHandler.class);&lt;/p&gt;

&lt;p&gt;    private Model model;&lt;/p&gt;

&lt;p&gt;    public void setModel(Model model) &lt;/p&gt;
{
        this.model = model;
    }

&lt;p&gt;    @Override&lt;br/&gt;
    public void setAdvice(Advice advice) &lt;/p&gt;
{
        throw new UnsupportedOperationException();
    }

&lt;p&gt;    public void afterPropertiesSet() throws Exception {&lt;br/&gt;
        if (model == null) &lt;/p&gt;
{
            throw new IllegalArgumentException(&quot;Model not set&quot;);
        }
&lt;p&gt;        super.setAdvice(new ShutdownModelAdvice());&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    public boolean matches(Method method, Class targetClass) &lt;/p&gt;
{
        return matchesEventListenerOnEvent(method, targetClass);
    }

&lt;p&gt;    private boolean matchesEventListenerOnEvent(Method method, Class targetClass) &lt;/p&gt;
{
        return EventListener.class.isAssignableFrom(targetClass)
                &amp;amp;&amp;amp; method.getName().equals(&quot;onEvent&quot;);
    }

&lt;p&gt;    private class ShutdownModelAdvice implements MethodInterceptor {&lt;/p&gt;

&lt;p&gt;        public Object invoke(MethodInvocation invocation) throws Throwable {&lt;br/&gt;
            try &lt;/p&gt;
{
                invocation.proceed();
            }
&lt;p&gt; catch (Throwable t) &lt;/p&gt;
{
                log.fatal(&quot;Unandled exception, closing model&quot;, t);
                model.close();
            }
&lt;p&gt;            return null;&lt;br/&gt;
        }&lt;br/&gt;
    }&lt;br/&gt;
}&lt;/p&gt;
</description>
            <key id="11315">SPR-820</key>
            <summary>MBeanExporter incorrectly handles AOP proxies</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="memelet">Barry Kaplan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 24 Mar 2005 11:45:51 +0000</created>
                <updated>Thu, 24 Mar 2005 17:38:44 +0000</updated>
                            <resolved>Thu, 24 Mar 2005 17:38:44 +0000</resolved>
                                    <version>1.2 RC1</version>
                                    <fixVersion>1.2 RC1</fixVersion>
                                    <component>JMX</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12693" author="memelet" created="Thu, 24 Mar 2005 11:48:53 +0000"  >&lt;p&gt;I should note that the call to AopUtils.isAopProxy(bean) returns &apos;true&apos;.&lt;/p&gt;</comment>
                            <comment id="12696" author="juergen.hoeller" created="Thu, 24 Mar 2005 17:38:44 +0000"  >&lt;p&gt;Thanks for spotting this! Indeed, that check will only work for CGLIB proxies. To determine the actual target class in a reliable fashion, we need to cast to Advised and call getTargetSource().getTargetClass(). I&apos;ve fixed this - last minute for 1.2 RC1 &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 41 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 24 Mar 2005 17:38:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i03o5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21454</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>