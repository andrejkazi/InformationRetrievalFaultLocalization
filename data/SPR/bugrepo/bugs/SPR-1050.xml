<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:09:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1050/SPR-1050.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1050] MessageProducers never closed in JmsTemplate</title>
                <link>https://jira.spring.io/browse/SPR-1050</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;ve got an app that I&apos;ve been profiling, that is slowly using lots of memory. I&apos;ve now reproduced what I &lt;b&gt;think&lt;/b&gt; is the problem, using a simple test that sends loads of msgs over JMS. &lt;/p&gt;

&lt;p&gt;The test replicates the way in which the JmsTemplate sends messages- by using a message producer. It uses memory at quite a rate (40MB in about 1m). &lt;/p&gt;

&lt;p&gt;I took a look at the JmsTemplate codeand see the following: &lt;br/&gt;
Code:&lt;/p&gt;

&lt;p&gt;   protected void doSend(Session session, Destination destination, MessageCreator messageCreator) &lt;br/&gt;
         throws JMSException { &lt;/p&gt;

&lt;p&gt;      MessageProducer producer = createProducer(session, destination); &lt;br/&gt;
      Message message = messageCreator.createMessage(session); &lt;br/&gt;
      if (logger.isDebugEnabled()) &lt;/p&gt;
{ 
         logger.debug(&quot;Sending created message [&quot; + message + &quot;]&quot;); 
      }
&lt;p&gt; &lt;br/&gt;
      doSend(producer, message); &lt;br/&gt;
      // Check commit - avoid commit call within a JTA transaction. &lt;br/&gt;
      if (session.getTransacted() &amp;amp;&amp;amp; isSessionTransacted() &amp;amp;&amp;amp; &lt;br/&gt;
            !TransactionSynchronizationManager.hasResource(getConnectionFactory())) &lt;/p&gt;
{ 
         // Transacted session created by this template -&amp;gt; commit. 
         commitIfNecessary(session); 
      }
&lt;p&gt; &lt;br/&gt;
   } &lt;/p&gt;


&lt;p&gt;Should not the producer that is created be closed? &lt;br/&gt;
If I replicate this method in a test case, and run it repeatedly, I run out of memory quite quickly. If I close the producer, things seems stable. &lt;/p&gt;

&lt;p&gt;Here is my &apos;test case equivalent&apos;: &lt;br/&gt;
Code:&lt;/p&gt;

&lt;p&gt;    public void testActiveMQMemoryUsage() throws JMSException, InterruptedException { &lt;br/&gt;
        ActiveMQ activeMQ = new ActiveMQ(); &lt;br/&gt;
        activeMQ.setPersistenceAdapter(new VMPersistenceAdapter()); &lt;br/&gt;
        activeMQ.start(); &lt;/p&gt;

&lt;p&gt;        // Get a connection/topic, start firing messages at it &lt;br/&gt;
        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(); &lt;br/&gt;
        TopicConnection topicConnection = factory.createTopicConnection(); &lt;/p&gt;

&lt;p&gt;        TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE); &lt;br/&gt;
        Topic topic = topicSession.createTopic(&quot;testTopic&quot;); &lt;br/&gt;
        TopicPublisher topicPublisher = topicSession.createPublisher(topic); &lt;/p&gt;

&lt;p&gt;        topicConnection.start(); &lt;/p&gt;

&lt;p&gt;        int msgCount = 0; &lt;br/&gt;
        Runtime runtime = Runtime.getRuntime(); &lt;br/&gt;
        while (true) { &lt;br/&gt;
            MessageProducer producer = topicSession.createProducer(topic); &lt;br/&gt;
            TextMessage message = topicSession.createTextMessage(&quot;The time is now &quot; + System.currentTimeMillis()); &lt;br/&gt;
            producer.send(message, DeliveryMode.NON_PERSISTENT, 5, 1000); &lt;br/&gt;
            msgCount++; &lt;br/&gt;
            if (msgCount % 1000 == 0) &lt;/p&gt;
{ 
                monitorMemory(); 
            }
&lt;p&gt; &lt;br/&gt;
            producer.close(); &lt;br/&gt;
        } &lt;br/&gt;
    } &lt;/p&gt;

&lt;p&gt;    private void monitorMemory() throws InterruptedException &lt;/p&gt;
{ 
        Runtime runtime = Runtime.getRuntime(); 
        System.out.println(&quot;Free: &quot; + runtime.freeMemory() / 1024 / 1024 + &quot;MB, total: &quot; + runtime.totalMemory() / 1024 
            / 1024 + &quot;MB, max: &quot; + runtime.maxMemory() / 1024 / 1024 + &quot;MB&quot;); 
        Thread.sleep(1000); 
    }
&lt;p&gt; &lt;/p&gt;


&lt;p&gt;With the producer.close() commented out, I see: &lt;br/&gt;
Quote:&lt;br/&gt;
Free: 1MB, total: 4MB, max: 63MB &lt;br/&gt;
Free: 0MB, total: 4MB, max: 63MB &lt;br/&gt;
Free: 1MB, total: 6MB, max: 63MB &lt;br/&gt;
Free: 0MB, total: 6MB, max: 63MB &lt;br/&gt;
Free: 3MB, total: 10MB, max: 63MB &lt;br/&gt;
Free: 0MB, total: 10MB, max: 63MB &lt;br/&gt;
Free: 2MB, total: 14MB, max: 63MB &lt;br/&gt;
Free: 6MB, total: 16MB, max: 63MB&lt;/p&gt;


&lt;p&gt;With it in there, I see: &lt;br/&gt;
Quote:&lt;/p&gt;

&lt;p&gt;Free: 0MB, total: 2MB, max: 63MB &lt;br/&gt;
Free: 0MB, total: 2MB, max: 63MB &lt;br/&gt;
Free: 0MB, total: 2MB, max: 63MB &lt;br/&gt;
Free: 1MB, total: 2MB, max: 63MB &lt;br/&gt;
Free: 1MB, total: 2MB, max: 63MB &lt;br/&gt;
Free: 1MB, total: 2MB, max: 63MB &lt;br/&gt;
Free: 1MB, total: 2MB, max: 63MB &lt;/p&gt;
</description>
            <key id="11763">SPR-1050</key>
            <summary>MessageProducers never closed in JmsTemplate</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="scornflake">Neil Clayton</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Jun 2005 18:49:29 +0000</created>
                <updated>Wed, 22 Jun 2005 21:46:30 +0000</updated>
                            <resolved>Wed, 22 Jun 2005 21:46:30 +0000</resolved>
                                    <version>1.2.1</version>
                                    <fixVersion>1.2.2</fixVersion>
                                    <component>JMS</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13624" author="juergen.hoeller" created="Wed, 22 Jun 2005 21:46:30 +0000"  >&lt;p&gt;That&apos;s indeed a bug: JmsTemplate should always explicitly close the MessageProducers it creates. It currently relies on implicit close through the JMS Session (i.e. that Session.close also closes all its producers), but that&apos;s obviously not the case with all JMS providers.&lt;/p&gt;

&lt;p&gt;I&apos;ve fixed this already, to be released in the upcoming Spring 1.2.2.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 28 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 22 Jun 2005 21:46:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04wtj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28691</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>