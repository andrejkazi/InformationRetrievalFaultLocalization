<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:56:05 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2555/SPR-2555.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2555] Using proxyTargetClass on cglib enhanced bean loses interfaces added to that cglib bean</title>
                <link>https://jira.spring.io/browse/SPR-2555</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I have a spring bean that I have added interfaces to using a cglib enhanced class.  If I attempt to create an aop proxy using &quot;proxyTargetClass&quot; then Cglib2AopProxy.getProxy() correctly uses the super class to create it&apos;s proxy.  However, in doing that I lose the interfaces that I applied when I custom enhanced the super class.&lt;/p&gt;

&lt;p&gt;To fix this Cglib2AopProxy.getProxy() needs to add all of the interfaces previously applied to the proxied class that it strips away.  That way my proxied class does not lose it&apos;s types when Spring advices it.&lt;/p&gt;

&lt;p&gt;Mike&lt;/p&gt;</description>
            <key id="14932">SPR-2555</key>
            <summary>Using proxyTargetClass on cglib enhanced bean loses interfaces added to that cglib bean</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robh">Rob Harrop</assignee>
                                    <reporter username="youngm">Mike Youngstrom</reporter>
                        <labels>
                    </labels>
                <created>Thu, 7 Sep 2006 06:52:10 +0000</created>
                <updated>Tue, 19 Jun 2012 03:51:17 +0000</updated>
                            <resolved>Thu, 14 Sep 2006 02:17:50 +0000</resolved>
                                    <version>2.0 RC3</version>
                                    <fixVersion>2.0 RC4</fixVersion>
                                    <component>Core:AOP</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="19575" author="robh" created="Tue, 12 Sep 2006 22:16:26 +0000"  >&lt;p&gt;Mike,&lt;/p&gt;

&lt;p&gt;Can you give an example of your code so I can get a handle on what you are trying to achieve?&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="19580" author="youngm" created="Wed, 13 Sep 2006 02:47:38 +0000"  >&lt;p&gt;I was afraid of that question. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I have created a framework on top of AOP that provides boilerplate implementations for unimplemented methods (abstract methods and interface methods).  The unimplemented method is annotated and aspects are used to intercept those method calls and provide these boilerplate implementations.  For example, I currently have a service that will provide boilerplate Find, Create, Delete, Get operations for JPA by simply annotating the unimplemented method with the appropriate annotation telling my aspects how to implement the method.  In order to use Spring-AOP to intercept the calls to these unimplemented methods I use CGLIB to create a proxy of the interface or abstract class so it can be instantiated and configured using spring and then I use aop:aspectj-autoproxy to advise those beans.  What I have works perfectly fine for public methods if I proxyTargetClass=false.  Below is an example of how this would be configured and the classes used.&lt;/p&gt;

&lt;p&gt;--------------&lt;del&gt;Context.xml file&lt;/del&gt;-----------------&lt;br/&gt;
&amp;lt;aop:aspectj-autoproxy /&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;tx:annotation-driven /&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;!-&lt;del&gt;Aspect see below&lt;/del&gt;-&amp;gt;&lt;br/&gt;
&amp;lt;bean class=&quot;serviceproxy.ServiceProxyAspect&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;property name=&quot;jpaTemplate&quot; ref=&quot;jpaTemplate&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;!--  &amp;lt;bean id=&quot;accountService&quot; class=&quot;net.sf.cglib.proxy.Enhancer&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;constructor-arg value=&quot;java.lang.Object&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;constructor-arg value=&quot;some.AccountService&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;constructor-arg&amp;gt;&lt;br/&gt;
			&amp;lt;util:constant static-field=&quot;net.sf.cglib.proxy.NoOp.INSTANCE&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;
                &amp;lt;!-- If some.AccountService is an abstract class then properties can be injected here --&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt; --&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;!-- I created a namespace handler that would do the above automatically --&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;custom:proxyBean id=&quot;accountService&quot; class=&quot;some.AccountService&quot;&amp;gt;&lt;br/&gt;
     &amp;lt;!-- If some.AccountService is an abstract class then properties can be injected here --&amp;gt;&lt;br/&gt;
&amp;lt;/custom:proxyBean&amp;gt;&lt;/p&gt;


&lt;p&gt;---------------&lt;del&gt;Service Proxy Aspect&lt;/del&gt;------------------&lt;br/&gt;
@Aspect&lt;br/&gt;
public class ServiceProxyAspect {&lt;br/&gt;
......&lt;br/&gt;
@Around(&quot;@within(@annotation(org.lds.stack.spring.serviceproxy.Creator)&quot;)&lt;br/&gt;
	public Object executeCreate(ProceedingJoinPoint pjp) throws Throwable {&lt;br/&gt;
		logger.debug(&quot;Executing Creator&quot;);&lt;br/&gt;
		if (pjp.getSignature() instanceof MethodSignature) {&lt;br/&gt;
			final Method method = ((MethodSignature) pjp.getSignature())&lt;br/&gt;
					.getMethod();&lt;br/&gt;
			if (isMethodDeclaredInClass(pjp.getTarget().getClass(), method)) &lt;/p&gt;
{
				// proceed if concrete method implementation exists.
				return pjp.proceed();
			}
&lt;p&gt; else &lt;/p&gt;
{
				jpaTemplate.persist(pjp.getArgs()[0]);
				return pjp.getArgs()[0];
			}
&lt;p&gt;		}&lt;br/&gt;
		return null;&lt;br/&gt;
	}&lt;br/&gt;
......&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;----------------&lt;del&gt;some.AccountService&lt;/del&gt;------------------------&lt;br/&gt;
public interface AccountService {&lt;br/&gt;
     @Transactional     &lt;br/&gt;
     @Creator&lt;br/&gt;
     public Account createAccount(Account account);&lt;br/&gt;
}&lt;/p&gt;



&lt;p&gt;What the above will do is allow me to instantiate an interface or abstract class and then proxy it and provide implementations for the unimplemented methods.  The above example works great today with rc3.  Where I&apos;m running into trouble is wish some enhancements I want to provide.  I wish to be able to annotate protected methods on abstract classes so that the abstract class can call proxied methods on itself:&lt;/p&gt;

&lt;p&gt;----------------&lt;del&gt;some.AccountServiceImpl&lt;/del&gt;--------------&lt;br/&gt;
public abstract class AccountServiceImpl implements some.AccountService {&lt;br/&gt;
     protected abstract Account mergeAccount(Account account);&lt;br/&gt;
     public Account modifyAccount(Account account) &lt;/p&gt;
{
          //verify account data
          mergeAccount(account);
     }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Granted in order to do the above I&apos;ll need to defer to the AopContext.currentProxy() which I plan to do automatically by providing a cglib callback when the abstract class is instantiated using CgLib.  I would also have to use proxyTargetClass=true in order to be able to intercept protected methods.  This is the problem.  If I use proxyTargetClass=true and I&apos;m proxying an Interface (AccountService like above) then Cglib2AopProxy.getProxy() detects that it is a CGLib proxy and strips off the proxy and extends its parent. In the case of instantiating an interface the interface becomes lost to and new proxy and my bean looses its type.&lt;/p&gt;

&lt;p&gt;So, basically this is what my bug report is.  In the case I describe above my accountService bean loses its type when using proxyTargetClass=true.  This happens because AopContext.currentProxy() strips off any existing cglib class and doesn&apos;t attempt to add back into the new proxy any interfaces that the cglib proxy it stripped away may have implemented.&lt;/p&gt;

&lt;p&gt;Does that make sense?  I was hoping if I could present the problem in a more general light so that it might have a better chance of making it into 2.0 final. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  But I&apos;m guessing now that you know the details and the corner case I&apos;m trying to cover it will probably be pushed off.  Am I right? &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Mike&lt;/p&gt;</comment>
                            <comment id="19590" author="robh" created="Wed, 13 Sep 2006 18:56:11 +0000"  >&lt;p&gt;I see now. We can&apos;t actually extend he CGLIB proxy class because it is final, but I can grab the interfaces from that class and merge them into the supplied interfaces I assume. I&apos;ll give this a try.&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="19619" author="youngm" created="Thu, 14 Sep 2006 02:27:38 +0000"  >&lt;p&gt;thanks.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 16 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 12 Sep 2006 22:16:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00vvj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5209</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>