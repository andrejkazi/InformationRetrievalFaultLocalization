<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:13:57 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-854/SPR-854.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-854] Fix MethodInvoker to return NULL if the invocation returns null (instead of VoidType)</title>
                <link>https://jira.spring.io/browse/SPR-854</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;See this forum post. Adding an issue to keep track of things.&lt;/p&gt;</description>
            <key id="11382">SPR-854</key>
            <summary>Fix MethodInvoker to return NULL if the invocation returns null (instead of VoidType)</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="colin.sampaleanu">Colin Sampaleanu</assignee>
                                    <reporter username="alef.arendsen">Alef Arendsen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 5 Apr 2005 08:08:07 +0000</created>
                <updated>Sat, 9 Apr 2005 04:35:34 +0000</updated>
                            <resolved>Sat, 9 Apr 2005 04:35:34 +0000</resolved>
                                    <version>1.2 RC1</version>
                                    <fixVersion>1.2 RC2</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12857" author="alef.arendsen" created="Tue, 5 Apr 2005 08:09:30 +0000"  >&lt;p&gt;&lt;a href=&quot;http://forum.springframework.org/viewtopic.php?t=4445&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/viewtopic.php?t=4445&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12885" author="colin.sampaleanu" created="Thu, 7 Apr 2005 12:21:27 +0000"  >&lt;p&gt;Well, it&apos;s debatable whether this is broken or whether the JavaDoc is wrong...&lt;/p&gt;

&lt;p&gt;In my original MethodInvokingFactoryBeanImplementation, the getObject() method which actually did the invoke call would always return the VOID instance for a null invocation result, since a FactoryBean must NOT return null. It was irrelevant whether the method had a void return type or returned null since the factory bean could not return null anyway. The factory bean had to return something itself. &lt;/p&gt;

&lt;p&gt;Then Juergen split out some of the code into its own MethodInvoker class, so it could be used for the quartz and timer support.&lt;/p&gt;

&lt;p&gt;Now the javadoc that Juergen wrot for the MethodInvoker.invoke method says:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@return the object returned by the method invocation,&lt;/li&gt;
	&lt;li&gt;or VOID if the method returns void&lt;br/&gt;
The method actually behaves the same as it did before, so what it should say is &lt;/li&gt;
	&lt;li&gt;@return the object returned by the method invocation,&lt;/li&gt;
	&lt;li&gt;or VOID if the method returns null, or the method has&lt;/li&gt;
	&lt;li&gt;a void return type&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;On the other hand, when used in the MethodInvoker, it might certainly possibly be useful to some people to be able to get back a real null if the method returned null, and the VOID instance if the method has an actual void return type.&lt;/p&gt;

&lt;p&gt;I don&apos;t actually have a problem making this change (MethodInvokingFactoryBean would have to be modified to properly handle a null value when calling this method too), but there is a bit of a question as to whether or not anybody else is using MethodInvoker and depending on this behaviour. I would think it&apos;s probably safe, to tell you the truth...&lt;/p&gt;

&lt;p&gt;Juergen, do you have an opinion?&lt;/p&gt;</comment>
                            <comment id="12886" author="juergen.hoeller" created="Thu, 7 Apr 2005 17:36:30 +0000"  >&lt;p&gt;I guess it&apos;s fine to change MethodInvoker&apos;s behavior to return null in case of a null value. MethodInvokingFactoryBean should probably check for both void and a null value anyway and throw a corresponding exception: returning VOID_TYPE may fulfil the FactoryBean contract, but it isn&apos;t of actual value to users.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="12903" author="colin.sampaleanu" created="Fri, 8 Apr 2005 00:27:59 +0000"  >&lt;p&gt;Actaully it would be inappropriate for MethodInvokingFactoryBean to throw an exception on a null or void return value. People use it all the time to do things like force a static initialization (using dependencies to trigger the call), so we would be breaking existing deployments, never mind the fact that I do think it is useful for this purpose...&lt;/p&gt;

&lt;p&gt;So the easiest thing to do is to have MethodInvoker.invoke return both a null and VOID return value, and then MethodInvokingFactoryBean properly able to deal with both of these, itself returning VOID for both.&lt;/p&gt;</comment>
                            <comment id="12906" author="colin.sampaleanu" created="Fri, 8 Apr 2005 01:09:08 +0000"  >&lt;p&gt;I have modified MethodInvoker and MethodInvokingFactoryBean as per my last comment. I have not closed the issue, as there is a question I suppose as to whether it is even worth it for MethodInvoker to differentiate between a method invocation returning null (which should return null), and an invocation on a method with void return type, which now returns VOID, but could also return null as well.&lt;/p&gt;

&lt;p&gt;What I mean is, MethodInvokingFactoryBean certainly has to continue to return VOID as the result of either of these, but does it really add value for MethodInvoker to make the distinction?&lt;/p&gt;</comment>
                            <comment id="12924" author="juergen.hoeller" created="Fri, 8 Apr 2005 19:56:03 +0000"  >&lt;p&gt;OK, so we have valid use cases where people use MethodInvokingFactoryBean without a return value...&lt;/p&gt;

&lt;p&gt;I agree that it doesn&apos;t add real value if MethodInvoker tries to differentiate here. Let&apos;s always return null in MethodInvoker, and return VOID in MethodInvokingFactoryBean to comply with the FactoryBean contract.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="12928" author="colin.sampaleanu" created="Sat, 9 Apr 2005 04:35:34 +0000"  >&lt;p&gt;I have changed the code so that MethodInvoker.invoke() will return null on both the method returning a null value, and on the method having a void return type. MethodInvokingFactoryBean has been modified to take this into account, and as before will return MethodInvoker.VOID for this case. MethodInvoker.VOID is now only used by MethodInvokingFactoryBean, but I have not changed it&apos;s location, since it would break any existing users looking for this value.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 38 weeks, 5 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 7 Apr 2005 12:21:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04x4f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28740</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>