<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:38:58 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1149/SPR-1149.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1149] Allow FactoryBean to implement post processors</title>
                <link>https://jira.spring.io/browse/SPR-1149</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;FactoryBean&apos;s are excluded from implementing a whole host of post processor interfaces (due to the fact that getBeansOfType et all exclude FactoryBeans from their results). When building a set of spring beans for an existing product/library the use of FactoryBean is often required. Also it is often required to perform post processing for these library beans.&lt;/p&gt;

&lt;p&gt;A concrete example is drools-spring. The class WorkingMemoryFactoryBean constructs a drools WorkingMemory instance. This /must/ be done via FactoryBean due to restrictions on the drools api. Drools defines an interface WorkingMemoryListener. I would like for WorkingMemoryFactoryBean to declare a property &apos;autoAddListeners&apos; which will scan the BeanFactory for instances of WorkingMemoryListener and add it the WorkingMemory created by the FactoryBean. &lt;/p&gt;

&lt;p&gt;The above is not possible with 1.2.2 or 1.2.3-dev, because WorkingMemoryFactoryBean cannot implement any post processor interfaces (not BeanPostProcessor, BeanFactoryPostProcessor, nor ApplicationListener). This requires a seperate bean to be defined in the context just to search for WorkingMemory beans. This is noise. The cleanest and most encapsulated place for this behavior is in the WorkingMemoryFactoryBean.&lt;/p&gt;

&lt;p&gt;There are lots of other examples. I having a similar troubles with my spring integration for the quickfixj project.&lt;/p&gt;

&lt;p&gt;I can&apos;t see any technical reason why FactoryBean&apos;s need to be excluded in this way. Maybe it was because at some in the past creating the FactoryBean instance always trigger the call of getObject. But this does not seem to be the case anywmore. Is there some reason I am not aware of?&lt;/p&gt;</description>
            <key id="12001">SPR-1149</key>
            <summary>Allow FactoryBean to implement post processors</summary>
                <type id="2" iconUrl="https://jira.spring.io/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="memelet">Barry Kaplan</reporter>
                        <labels>
                    </labels>
                <created>Sun, 17 Jul 2005 12:47:34 +0000</created>
                <updated>Wed, 20 Jul 2005 05:07:37 +0000</updated>
                            <resolved>Wed, 20 Jul 2005 05:07:21 +0000</resolved>
                                    <version>1.2.2</version>
                                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13910" author="memelet" created="Sun, 17 Jul 2005 12:48:10 +0000"  >&lt;p&gt;This issue generally supercedes &lt;a href=&quot;http://opensource.atlassian.com/projects/spring/browse/SPR-1144&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource.atlassian.com/projects/spring/browse/SPR-1144&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13940" author="juergen.hoeller" created="Tue, 19 Jul 2005 07:50:07 +0000"  >&lt;p&gt;As far as I understand, you want to let your FactoryBean search for WorkingMemoryListener objects. Why not simply implement the BeanFactoryAware interface and look for beans of matching type? This can of course be implemented by a FactoryBean.&lt;/p&gt;

&lt;p&gt;I simply don&apos;t see a reason why a FactoryBean should be a BeanPostProcessor, BeanFactoryPostProcessor or ApplicationListener at the same time. There should always be a viable way to implement the desired behavior in another way.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="13942" author="memelet" created="Tue, 19 Jul 2005 08:11:39 +0000"  >&lt;p&gt;Yes you are right. There are other ways. I can use BeanFactory/ApplicationContextAware but then I would be required to downcast to use methods like getBeansOfType. I can also declare a context file containing helper beans that do the work that I&apos;m trying to put in the FactoryBean&apos;s and have applications import this file. I&apos;ll probably do this since this file seems to be required anyway.&lt;/p&gt;

&lt;p&gt;You may be right that FactoryBean should not get full bean status. I suppose that if it where to get this bit of behavior, then why not allow for proxying FactoryBean. Etc. Ok, nevermind, request respectfully withdrawn.&lt;/p&gt;</comment>
                            <comment id="13943" author="memelet" created="Tue, 19 Jul 2005 08:12:24 +0000"  >&lt;p&gt;Unless of course you &lt;b&gt;want&lt;/b&gt; to do this ... &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13991" author="juergen.hoeller" created="Wed, 20 Jul 2005 05:03:47 +0000"  >&lt;p&gt;True, you need to downcast to ListableBeanFactory when using BeanFactoryAware. That&apos;s a documented and intended downcast, though, similar to when you downcast ServletRequest to HttpServletRequest in a Servlet Filter implementation (for example).&lt;/p&gt;

&lt;p&gt;With ApplicationContextAware, you don&apos;t need to downcast: The ApplicationContext interface extends ListableBeanFactory, so you can use methods such as getBeanNamesForType and getBeansOfType directly without any casting.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="13992" author="juergen.hoeller" created="Wed, 20 Jul 2005 05:07:21 +0000"  >&lt;p&gt;I would argue that for what you want to achieve, BeanFactoryAware or ApplicationContextAware is the way to go. You can virtually do any lookups in the factory there, and even get down to all sorts of ApplicationContext functionality.&lt;/p&gt;

&lt;p&gt;A FactoryBean is really only meant as an adapter, to expose some object for bean references that cannot naturally be defined as a bean. That purpose doesn&apos;t seem to have a natural synergy with the BeanPostProcessor and BeanFactoryPostProcessor interfaces, which really serve a different purpose and are invoked at very specific points in the ApplicationContext lifecycle, treated under special rules (in particular, getting instantiated before all other beans).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="11991">SPR-1144</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 24 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 19 Jul 2005 07:50:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i037dr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18738</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>