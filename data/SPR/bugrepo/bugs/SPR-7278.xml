<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:39:42 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-7278/SPR-7278.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-7278] @ResponseBody usage limitations</title>
                <link>https://jira.spring.io/browse/SPR-7278</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;The recommended way to develop REST-style webservices is the usage of @ResponseBody annotation and HttpMessageConverter instead of generating a model and a view (ContentNegotiatingViewResolver etc.).&lt;br/&gt;
But there are some limitations, that make things hard to handle:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;ExceptionResolver support
	&lt;ul&gt;
		&lt;li&gt;@RequestBody is only supported with @ExceptionHandler annotation. I need a centralized exception handling to generate a special error object as the return value. So I must wrote a method in each controller class to delegate to the centralized exception handler. I think the ExceptionResolver-interface is more like an AOP-approach, with no glue code.&lt;/li&gt;
		&lt;li&gt;ExceptionResolver also have some nice standard implementations like SimpleMappingExceptionResolver, where I can handle the returned HTTP status code very easy. This is also not supported by @ExceptionHandler out of the box&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&apos;useNotAcceptableStatusCode&apos; from ContentNegotiatingViewResolver (so for some features, I must also configure view-handling)
	&lt;ul&gt;
		&lt;li&gt;simple and easy to use attribute to enable NOT_ACCEPTABLE Http Status code&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;missing option for enabling global @ResponseBody-like handling instead of annotate all methods (e.g. in AnnotationMethodHandlerAdapter)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I also would recommend the full HttpMessageConverter way (@RequestBody &amp;amp; @ResponseBody) without view handling, so it would be nice, if @ResponseBody has fewer limitations. Additionaly it would be great, if the documentation have some notes about the recommended way for webservice-only REST-style applications (with hints to the limitations above)&lt;/p&gt;</description>
            <key id="31735">SPR-7278</key>
            <summary>@ResponseBody usage limitations</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="rstoya05-aop">Rossen Stoyanchev</assignee>
                                    <reporter username="gbrehmer">Gerrit Brehmer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Jun 2010 20:05:30 +0000</created>
                <updated>Tue, 19 Jun 2012 03:18:55 +0000</updated>
                            <resolved>Tue, 19 Jun 2012 03:18:55 +0000</resolved>
                                    <version>3.0.2</version>
                                                    <component>Web</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="67153" author="rstoya05-aop" created="Tue, 7 Jun 2011 09:47:02 +0000"  >&lt;p&gt;For handling exceptions centrally I would recommend implementing HandlerExceptionResolver. Even though it&apos;s less convenient than @ExceptionHandler, if you want to use @RequestBody and @ResponseBody, you can still use HttpMessageConverters and by definition you won&apos;t have too many of these methods.&lt;/p&gt;

&lt;p&gt;As for assuming @RequestBody and @ResponseBody by default, have a look or track &lt;a href=&quot;https://jira.spring.io/browse/SPR-8406&quot; title=&quot;Create separate handler stereotype for RESTful web services&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-8406&quot;&gt;&lt;del&gt;SPR-8406&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="67171" author="gbrehmer" created="Wed, 8 Jun 2011 02:02:42 +0000"  >&lt;p&gt;I searched for a way to minimize the use of the ModelAndView-concept. HandlerExceptionResolver depends on the concept and @ExceptionHandler can not replace the standard resolver implementations adequate. Yes, &lt;a href=&quot;https://jira.spring.io/browse/SPR-8406&quot; title=&quot;Create separate handler stereotype for RESTful web services&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-8406&quot;&gt;&lt;del&gt;SPR-8406&lt;/del&gt;&lt;/a&gt; is one part of my proposal. So I assume that more concrete enhancement requests would help you to improve the webservice-only. I will think about it.&lt;/p&gt;</comment>
                            <comment id="67172" author="rstoya05-aop" created="Wed, 8 Jun 2011 02:42:47 +0000"  >&lt;p&gt;The DefaultHandlerExceptionResolver is similar to your description. It translates exceptions into status codes and doesn&apos;t rely on view resolution and always returns an empty ModelAndView. &lt;/p&gt;

&lt;p&gt;Also we can consider an extension hook in the new ExceptionHandlerExceptionResolver, which would allows customizations to the list of @ExceptionHandler methods associated with a controller type:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; extendExceptionHandlerMethods(List&amp;lt;Method&amp;gt; methods, Class&amp;lt;?&amp;gt; handlerType) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;A subclass of ExceptionHandlerExceptionResolver would then have a chance to add @ExceptionHandler methods that apply to every controller.&lt;/p&gt;

</comment>
                            <comment id="67519" author="rstoya05-aop" created="Fri, 17 Jun 2011 06:15:22 +0000"  >&lt;p&gt;The above mentioned extension method is now available.&lt;/p&gt;</comment>
                            <comment id="67569" author="gbrehmer" created="Sun, 19 Jun 2011 23:44:21 +0000"  >&lt;p&gt;Thanks. I will check this out with the next version.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="37144">SPR-8124</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10020">
                    <name>Related</name>
                                            <outwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="32077">SPR-7353</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        5 years, 27 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 7 Jun 2011 09:47:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00p5j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4120</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>