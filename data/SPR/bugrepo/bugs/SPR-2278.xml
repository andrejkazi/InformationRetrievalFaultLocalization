<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 17:58:53 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2278/SPR-2278.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2278] Change to AbstractAdvisorAutoProxyCreator causing NPE during context startup</title>
                <link>https://jira.spring.io/browse/SPR-2278</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;In RC1, when the DefaultAdvisorAutoProxyCreator is initialized, it finds and initializes all candidate advisors (code is in AbstractAdvisorAutoProxyCreator.setBeanFactory()). This code has the effect of initializing my Hibernate SessionFactoryBean before any other beans come along and need it. &lt;/p&gt;

&lt;p&gt;In RC2, the code to pre-load candidate advisors has been removed. What this seems to produce is a circular dependency. When my application beans try to request the Hibernate SessionFactoryBean, it goes through a lot of dependencies, including the AutoProxyCreator, which depends on the TransactionSourceAdvisor, which depends on the TransactionInterceptor, which depends on the SessionFactoryBean. And so I get a NPE trying to instantiate the autoproxy creator.&lt;/p&gt;

&lt;p&gt;This only seems to happen if the first bean in the XML file references the session factory.  If I move the bean that references the session factory to below it, the problem goes away.  &lt;/p&gt;</description>
            <key id="14495">SPR-2278</key>
            <summary>Change to AbstractAdvisorAutoProxyCreator causing NPE during context startup</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="srankin">Scott Rankin</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Jul 2006 05:46:43 +0000</created>
                <updated>Tue, 19 Jun 2012 03:52:23 +0000</updated>
                            <resolved>Sat, 22 Jul 2006 04:55:44 +0000</resolved>
                                    <version>2.0 RC2</version>
                                    <fixVersion>2.0 RC3</fixVersion>
                                    <component>Core</component>
                    <component>Core:AOP</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="18521" author="srankin" created="Tue, 11 Jul 2006 05:47:09 +0000"  >&lt;p&gt;Spring config file&lt;/p&gt;</comment>
                            <comment id="18522" author="srankin" created="Tue, 11 Jul 2006 05:47:20 +0000"  >&lt;p&gt;Java test harness&lt;/p&gt;</comment>
                            <comment id="18598" author="joerg.heinicke@gmx.de" created="Sat, 15 Jul 2006 12:20:45 +0000"  >&lt;p&gt;There is another report very similar to it at &lt;a href=&quot;http://forum.springframework.org/showthread.php?t=26675&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/showthread.php?t=26675&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="18719" author="juergen.hoeller" created="Sat, 22 Jul 2006 04:55:44 +0000"  >&lt;p&gt;Thanks for the report! This one actually lead to &lt;b&gt;3&lt;/b&gt; different issues having to be addressed...&lt;/p&gt;

&lt;p&gt;The first one was a check missing for post-processing objects from FactoryBeans: A BeanPostProcessor relies to operate on a non-null object, so we need to invoke it only for a non-null object from a FactoryBean. Previously, such an explicit check wasn&apos;t necessary, since a FactoryBean wasn&apos;t allowed to return null... &lt;/p&gt;

&lt;p&gt;The second one was that, with FactoryBeans now allowed to return null, we didn&apos;t discover a FactoryBean within a circular reference anymore but rather tried to inject its null object! I have added a special check there to throw a BeanCurrentlyInCreationException in that case (which happened through a null check before).&lt;/p&gt;

&lt;p&gt;The third one was a problem with Advisor autodiscovery in AbstractAdvisorAutoProxyCreator, which failed when an Advisor tried to link back to the currently created bean. The root of the issue is the use of getBeanNamesOfType instead of getBeansOfType: The latter excludes currently created beans automatically, but the former doesn&apos;t...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="18763" author="youngm" created="Tue, 25 Jul 2006 07:20:51 +0000"  >&lt;p&gt;I was experiencing this same bug so I took snapshot build 85 and tried it in my current project that works fine in rc1.  I get the following exception:&lt;/p&gt;

&lt;p&gt;Caused by: &lt;br/&gt;
org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &apos;entityManagerFactory&apos;: FactoryBean which is currently in creation returned null from getObject&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectFromFactoryBean(AbstractBeanFactory.java:930)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:884)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:154)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:230)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:118)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:241)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:154)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:230)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:118)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:241)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:154)&lt;br/&gt;
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.createAspectJAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:176)&lt;br/&gt;
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:137)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:68)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:54)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:244)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:282)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:884)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:241)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:154)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:230)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:118)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:241)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:154)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:230)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:118)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:241)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:154)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:230)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:118)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:179)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:114)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:241)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:154)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:254)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:337)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:92)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:77)&lt;br/&gt;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)&lt;br/&gt;
	at java.lang.reflect.Constructor.newInstance(Constructor.java:494)&lt;br/&gt;
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:82)&lt;br/&gt;
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:78)&lt;br/&gt;
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:548)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:352)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:241)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:154)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:612)&lt;br/&gt;
	at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:393)&lt;br/&gt;
	at org.springframework.web.context.ContextLoader.loadParentContext(ContextLoader.java:319)&lt;br/&gt;
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:180)&lt;br/&gt;
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3729)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4187)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013)&lt;br/&gt;
	at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013)&lt;br/&gt;
	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442)&lt;br/&gt;
	at org.apache.catalina.core.StandardService.start(StandardService.java:450)&lt;br/&gt;
	at org.apache.catalina.core.StandardServer.start(StandardServer.java:709)&lt;br/&gt;
	at org.apache.catalina.startup.Catalina.start(Catalina.java:551)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294)&lt;br/&gt;
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432)&lt;/p&gt;</comment>
                            <comment id="18764" author="youngm" created="Tue, 25 Jul 2006 07:34:41 +0000"  >&lt;p&gt;Here is my context file:&lt;/p&gt;

&lt;p&gt;The only custom bean I have in hear is the ServiceProxyAspect.  Which is an AspectJ annotated aspect.&lt;/p&gt;

&lt;p&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
&amp;lt;!-- =========================================================== --&amp;gt;&lt;br/&gt;
&amp;lt;!-- Core Service Layer Configuration                            --&amp;gt;&lt;br/&gt;
&amp;lt;!-- =========================================================== --&amp;gt;&lt;br/&gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;&lt;br/&gt;
	xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans &lt;a href=&quot;http://www.springframework.org/schema/beans/spring-beans.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/a&gt;&lt;br/&gt;
		&lt;a href=&quot;http://www.springframework.org/schema/tx&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/tx&lt;/a&gt; &lt;a href=&quot;http://www.springframework.org/schema/tx/spring-tx.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/tx/spring-tx.xsd&lt;/a&gt;&lt;br/&gt;
        &lt;a href=&quot;http://www.springframework.org/schema/aop&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/aop&lt;/a&gt; &lt;a href=&quot;http://www.springframework.org/schema/aop/spring-aop.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&lt;/a&gt;&quot;&lt;br/&gt;
	default-lazy-init=&quot;true&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!-- AspectJ autoproxy necissary for ServiceProxy --&amp;gt;&lt;br/&gt;
 	&amp;lt;aop:aspectj-autoproxy /&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!-- Sets up annotation driven transaction management. --&amp;gt;&lt;br/&gt;
	&amp;lt;tx:annotation-driven /&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!-- Sets up ServiceProxy&apos;s Aspect --&amp;gt;&lt;br/&gt;
	&amp;lt;bean class=&quot;org.lds.stack.spring.serviceproxy.ServiceProxyAspect&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;jpaTemplate&quot; ref=&quot;jpaTemplate&quot; /&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!-- Checks the required annotation of spring beans not currently implemented in Spring --&amp;gt;&lt;br/&gt;
	&amp;lt;bean class=&quot;org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!-- DataSource --&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;driverClassName&quot; value=&quot;org.hsqldb.jdbcDriver&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;url&quot; value=&quot;jdbc:hsqldb:mem:fred&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;username&quot; value=&quot;sa&quot; /&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!-- JPA EntityManagerFactory --&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;jpaVendorAdapter&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;bean class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;&amp;gt;&lt;br/&gt;
				&amp;lt;property name=&quot;showSql&quot; value=&quot;true&quot; /&amp;gt;&lt;br/&gt;
				&amp;lt;property name=&quot;generateDdl&quot; value=&quot;true&quot; /&amp;gt;&lt;br/&gt;
				&amp;lt;property name=&quot;database&quot; value=&quot;HSQL&quot; /&amp;gt;&lt;br/&gt;
			&amp;lt;/bean&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;jpaPropertyMap&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;map&amp;gt;&lt;br/&gt;
				&amp;lt;entry key=&quot;hibernate.cache.provider_class&quot; value=&quot;org.hibernate.cache.NoCacheProvider&quot; /&amp;gt;&lt;br/&gt;
			&amp;lt;/map&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;persistenceXmlLocation&quot; value=&quot;classpath:/persistence.xml&quot; /&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;jpaTemplate&quot; class=&quot;org.springframework.orm.jpa.JpaTemplate&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory&quot; /&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory&quot; /&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/beans&amp;gt;&lt;/p&gt;</comment>
                            <comment id="18789" author="youngm" created="Wed, 26 Jul 2006 03:09:08 +0000"  >&lt;p&gt;I&apos;ve created another issue to hopefully address this continued problem: &lt;a href=&quot;https://jira.spring.io/browse/SPR-2350&quot; title=&quot;BeanCurrentlyInCreationException for config that workes in rc1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2350&quot;&gt;&lt;del&gt;SPR-2350&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="14500">SPR-2283</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="11800" name="TestSpringBug.java" size="822" author="srankin" created="Tue, 11 Jul 2006 05:47:20 +0000"/>
                            <attachment id="11799" name="spring-beans.xml" size="2547" author="srankin" created="Tue, 11 Jul 2006 05:47:07 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 23 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 15 Jul 2006 12:20:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04uqv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28355</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>