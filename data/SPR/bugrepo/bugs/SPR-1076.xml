<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:38:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1076/SPR-1076.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1076] AbstractApplicationContext shouldn&apos;t eagerly instantiate all BeanFactoryPostProcessors</title>
                <link>https://jira.spring.io/browse/SPR-1076</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;The call to getBean(factoryProcessorNames&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;) is flawed because it then must go out to get dependencies just to do  ordering.. Below is an example where I had a problem. And below is a work around.. I think rather than implement order perhaps you might want to add an attribute to bean definition i.e: order= and use that instead.&lt;/p&gt;

&lt;p&gt;What was happening is that to find the order of ConfigurationPlaceholderProcessor it had to satisfy dependency jconfigBean. The placeholder in that bean was supposed to be replaced first by propertyPlaceholderConfigurer so even though it gets the order for ConfigurationPlaceholderProcessor it&apos;s then to late to instantiate jconfigBean with appropriate placeholder from the propertyPlaceholderConfigurer since it had already been instantiated.&lt;/p&gt;

&lt;p&gt;--------- flawed code -------&lt;/p&gt;

&lt;p&gt;for (int i = 0; i &amp;lt; factoryProcessorNames.length; i++) {&lt;br/&gt;
	if (Ordered.class.isAssignableFrom(getType(factoryProcessorNames&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;))) &lt;/p&gt;
{
		orderedFactoryProcessors.add(getBean(factoryProcessorNames[i]));
		}
&lt;p&gt;	else &lt;/p&gt;
{
		nonOrderedFactoryProcessorNames.add(factoryProcessorNames[i]);
	}
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;------------- Here is where I had problem ------------&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;jmxExporter&quot;&lt;br/&gt;
        class=&quot;org.springframework.jmx.export.MBeanExporter&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;beans&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;map&amp;gt;&lt;/p&gt;

&lt;p&gt;                &amp;lt;entry key=&quot;Configuration:name=jmxConfig&quot;&amp;gt;&lt;br/&gt;
                    &amp;lt;ref local=&quot;jconfigBean&quot; /&amp;gt;&lt;br/&gt;
                &amp;lt;/entry&amp;gt;&lt;br/&gt;
            &amp;lt;/map&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt; &lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;jconfigBean&quot; class=&quot;org.jconfig.jmx.ConfigHandler&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;resourceName&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;value&amp;gt;$&lt;/p&gt;
{config.filename}
&lt;p&gt;&amp;lt;/value&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;configurationName&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;value&amp;gt;jmxConfig&amp;lt;/value&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;


&lt;p&gt;	&amp;lt;bean id=&quot;configurationFactory&quot;&lt;br/&gt;
	            class=&quot;org.reactive.configuration.JConfigConfigurationFactory&quot;&lt;br/&gt;
	            singleton=&quot;true&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;		&amp;lt;property name=&quot;fileName&quot;&amp;gt;&amp;lt;value&amp;gt;jmxConfig&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;


&lt;p&gt;	&amp;lt;bean id=&quot;configuration&quot;&lt;br/&gt;
            factory-bean=&quot;configurationFactory&quot;&lt;br/&gt;
            factory-method=&quot;getConfiguration&quot; &lt;br/&gt;
            depends-on=&quot;jmxExporter&quot;&lt;br/&gt;
            /&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;configurationPlaceholderProcessor&quot;&lt;br/&gt;
	            class=&quot;org.reactive.beans.factory.config.ConfigurationPlaceholderProcessor&quot;&amp;gt;&lt;br/&gt;
	    &amp;lt;property name=&quot;placeholderEvaluator&quot;&amp;gt;&lt;br/&gt;
	        &amp;lt;bean class=&quot;org.reactive.beans.factory.config.jconfig.JConfigPlaceholderEvaluator&quot;&amp;gt;&lt;br/&gt;
	            &amp;lt;property name=&quot;configuration&quot;&amp;gt;&lt;br/&gt;
	                &amp;lt;ref bean=&quot;configuration&quot;/&amp;gt;&lt;br/&gt;
	            &amp;lt;/property&amp;gt;&lt;br/&gt;
	        &amp;lt;/bean&amp;gt;&lt;br/&gt;
	    &amp;lt;/property&amp;gt;&lt;br/&gt;
	     &amp;lt;property name=&quot;order&quot;&amp;gt;&lt;br/&gt;
	     	&amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;&lt;br/&gt;
	     &amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;propertyPlaceholderConfigurer&quot; class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&amp;gt; &lt;br/&gt;
	   &amp;lt;property name=&quot;properties&quot;&amp;gt; &lt;br/&gt;
	      &amp;lt;props&amp;gt; &lt;br/&gt;
	         &amp;lt;prop key=&quot;config.filename&quot;&amp;gt;dev_config.xml&amp;lt;/prop&amp;gt;            &lt;br/&gt;
	      &amp;lt;/props&amp;gt; &lt;br/&gt;
	   &amp;lt;/property&amp;gt; &lt;br/&gt;
	   &amp;lt;property name=&quot;systemPropertiesModeName&quot;&amp;gt; &lt;br/&gt;
	      &amp;lt;value&amp;gt;SYSTEM_PROPERTIES_MODE_OVERRIDE&amp;lt;/value&amp;gt; &lt;br/&gt;
	   &amp;lt;/property&amp;gt; &lt;br/&gt;
	   &amp;lt;property name=&quot;order&quot;&amp;gt;&lt;br/&gt;
	     	&amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;&lt;br/&gt;
	     &amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt; &lt;/p&gt;

&lt;p&gt;------------- Here is possible (not ultimate) fix -----------&lt;br/&gt;
		for (int i = 0; i &amp;lt; factoryProcessorNames.length; i++) {&lt;br/&gt;
			if (Ordered.class.isAssignableFrom(getType(factoryProcessorNames&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;))) {&lt;br/&gt;
			    MutablePropertyValues values = getBeanFactory().getBeanDefinition(factoryProcessorNames&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;).getPropertyValues();&lt;br/&gt;
			    int order = Integer.MAX_VALUE;&lt;br/&gt;
			    if (values != null) {&lt;br/&gt;
			        PropertyValue orderValue = values.getPropertyValue(&quot;order&quot;);&lt;br/&gt;
			        if (orderValue != null) {&lt;br/&gt;
			            String orderInt = (String) orderValue.getValue();&lt;br/&gt;
			            if (orderInt != null) &lt;/p&gt;
{
			                order = new Integer(orderInt).intValue();
			            }
&lt;p&gt;			        }&lt;br/&gt;
			    }&lt;br/&gt;
			    OrderedFactoryHolder factoryProcessorHolder = new OrderedFactoryHolder(factoryProcessorNames&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;,order);&lt;br/&gt;
				orderedFactoryProcessorHolders.add(factoryProcessorHolder);&lt;br/&gt;
			}&lt;br/&gt;
			else &lt;/p&gt;
{
				nonOrderedFactoryProcessorNames.add(factoryProcessorNames[i]);
			}
&lt;p&gt;		}&lt;/p&gt;



&lt;p&gt;	private class OrderedFactoryHolder implements Ordered {&lt;/p&gt;


&lt;p&gt;        /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@param factoryName&lt;/li&gt;
	&lt;li&gt;@param order&lt;br/&gt;
         */&lt;br/&gt;
        public OrderedFactoryHolder(String factoryProcessorName, int order) 
{
            this.factoryProcessorName = factoryProcessorName;
            this.order = order;
        }
&lt;p&gt;	    private String factoryProcessorName;&lt;br/&gt;
	    private int order;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;        /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@return Returns the factoryProcessorName.&lt;br/&gt;
         */&lt;br/&gt;
        public String getFactoryProcessorName() 
{
            return factoryProcessorName;
        }
&lt;p&gt;        /* (non-Javadoc)&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;@see org.springframework.core.Ordered#getOrder()&lt;br/&gt;
         */&lt;br/&gt;
        public int getOrder() 
{
            return order;
        }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	}&lt;/p&gt;</description>
            <key id="11853">SPR-1076</key>
            <summary>AbstractApplicationContext shouldn&apos;t eagerly instantiate all BeanFactoryPostProcessors</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="garpinc">Keith Garry Boyce</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Jun 2005 13:15:02 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:15 +0000</updated>
                            <resolved>Wed, 23 May 2007 19:03:37 +0000</resolved>
                                    <version>1.2.1</version>
                                    <fixVersion>2.1 M2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13656" author="garpinc" created="Sat, 25 Jun 2005 03:19:46 +0000"  >&lt;p&gt;BTW:&lt;/p&gt;

&lt;p&gt;If you use suggestion order=&lt;br/&gt;
then &lt;/p&gt;

&lt;p&gt;if (Ordered.class.isAssignableFrom(getType(factoryProcessorNames&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;))) { &lt;/p&gt;

&lt;p&gt;should be changed to look for that instead...&lt;/p&gt;</comment>
                            <comment id="13657" author="garpinc" created="Sat, 25 Jun 2005 03:39:12 +0000"  >&lt;p&gt;BTW: There is one other way to implement this. There could be a getBean method that does not resolve dependencies and does not add bean to app context...&lt;/p&gt;

&lt;p&gt;i.e: getTemporaryBean(String beanName, boolean resolveDependencies) &lt;/p&gt;

&lt;p&gt;Then they object could be instantiated temporarily to retreive the order and everything would also work...&lt;/p&gt;

&lt;p&gt;In this case I would pass false for resolveDependencies since order is the only thing important in the bean.. Of course the problem would be if the value of order setter was itself a dependency or it was a value that required post-processing first.&lt;/p&gt;

&lt;p&gt;For this reason order= might be cleaner and more failsafe..&lt;/p&gt;</comment>
                            <comment id="13658" author="garpinc" created="Sat, 25 Jun 2005 04:10:10 +0000"  >&lt;p&gt;NB:&lt;/p&gt;

&lt;p&gt;If you decide to implement temporary bean method and choose to pass true to resolveDependencies then it is important that the beans are only instantiated temporarily and not added to app context. This is because any of the attributes assigned in ant if the dependencies including the actual bean being retreived may require post-processing first dependent on ordering.&lt;/p&gt;</comment>
                            <comment id="13659" author="garpinc" created="Sat, 25 Jun 2005 04:12:38 +0000"  >&lt;p&gt;Here is the attached code for one proposed work around... &lt;/p&gt;</comment>
                            <comment id="13687" author="garpinc" created="Mon, 27 Jun 2005 02:41:39 +0000"  >&lt;p&gt;Any particular reason why not fix version 1.2.2&lt;/p&gt;</comment>
                            <comment id="14028" author="juergen.hoeller" created="Thu, 21 Jul 2005 06:38:02 +0000"  >&lt;p&gt;A proper solution for this constitutes a significant change. Checking the &quot;order&quot; value from the PropertyValues object is a workaround only... A bean could also implement Ordered directly, through a hard-coded &quot;getOrder&quot; method - not having a &quot;setOrder&quot; method at all.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="18835" author="ozgwei" created="Mon, 31 Jul 2006 11:28:49 +0000"  >&lt;p&gt;I have create EagerPropertyPlaceholderConfigurer, which resolves property placeholders in bean definitions eagerly (immediately after initialisation by implementing InitializingBean).&lt;/p&gt;

&lt;p&gt;For it to resolve property placeholders in bean definitions of other BeanFactoryPostProcessors, it must be defined before those that depend on it.&lt;/p&gt;

&lt;p&gt;This should cover most of issues reported by Spring users for BeanFactoryPostProcessor property placeholders.&lt;/p&gt;</comment>
                            <comment id="18836" author="ozgwei" created="Mon, 31 Jul 2006 11:37:29 +0000"  >&lt;p&gt;EagerPropertyPlaceholderConfigurer can be downloaded from the file attachments (# 2).&lt;/p&gt;</comment>
                            <comment id="19021" author="davids" created="Fri, 11 Aug 2006 18:31:33 +0000"  >&lt;p&gt;&lt;a href=&quot;https://jira.spring.io/browse/SPR-1310&quot; title=&quot;ivy.xml in common-build/templates/projects/basic is missing a double-quote&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-1310&quot;&gt;&lt;del&gt;SPR-1310&lt;/del&gt;&lt;/a&gt; also had a suggestion for a workaround: use parent context to set the properties that need to be loaded first.  I have attached a test case that show how to do this.&lt;/p&gt;</comment>
                            <comment id="23961" author="juergen.hoeller" created="Wed, 23 May 2007 19:03:37 +0000"  >&lt;p&gt;As of Spring 2.1 M2, we support a PriorityOrdered concept, where we have three phases of initialization: PriorityOrdered beans, then plain Ordered beans, then unordered beans. PropertyResourceConfigurer (and hence PropertyPlaceholderConfigurer) implement PriorityOrdered now, which allows to to apply to other BeanFactoryPostProcessors as well - before those get instantiated.&lt;/p&gt;

&lt;p&gt;One effect from this is that &quot;order&quot; property values expressed on the bean will now be relative to PriorityOrdered and Ordered: a PriorityOrdered bean with order value 5 will be initialized &lt;b&gt;before&lt;/b&gt; an Ordered bean with value 2. However, since people will always have defined PropertyPlaceholderConfigurers as the first in the chain anyway, this shouldn&apos;t pose a problem, and PriorityOrdered beans are generally supposed to have lower order values than Ordered beans anyway.&lt;/p&gt;

&lt;p&gt;It&apos;s more important that things work appropriately by default now, with PropertyPlaceholderConfigurers automatically initializing first - no need to specify custom order values for that. So in most cases, the ordering concept disappears from the user view now, at least when dealing with BeanFactoryPostProcessors.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="27851" author="astubbs" created="Tue, 20 Nov 2007 13:49:54 +0000"  >&lt;p&gt;The problem still exists that the PropertyPlaceholderConfigurer are not loaded before &amp;lt;import&amp;gt; statements. This means that you can&apos;t conditionally import bean definitions.&lt;/p&gt;

&lt;p&gt;I want to be able to do this so that I don&apos;t have to have a jndi environment setup in development, and can instead import a different xml file that defines my datasource bean directly.&lt;/p&gt;</comment>
                            <comment id="27852" author="astubbs" created="Tue, 20 Nov 2007 14:13:41 +0000"  >&lt;p&gt;also, this issue &lt;a href=&quot;http://opensource.atlassian.com/projects/spring/browse/SPR-1358&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource.atlassian.com/projects/spring/browse/SPR-1358&lt;/a&gt; is exactly what I&apos;m trying to describe. &lt;br/&gt;
also related: &lt;a href=&quot;http://opensource.atlassian.com/projects/spring/browse/SPR-1332&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource.atlassian.com/projects/spring/browse/SPR-1332&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12415">SPR-1319</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="10840" name="AbstractApplicationContext.java" size="30449" author="garpinc" created="Sat, 25 Jun 2005 04:12:38 +0000"/>
                            <attachment id="11845" name="EagerPropertyPlaceholderConfigurer.java" size="3935" author="ozgwei" created="Mon, 31 Jul 2006 11:28:49 +0000"/>
                            <attachment id="11887" name="PlaceHolderOrderTest.zip" size="1757" author="davids" created="Fri, 11 Aug 2006 18:33:19 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 6 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 21 Jul 2005 06:38:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04t1b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28078</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>