<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:58:16 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-505/SPR-505.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-505] BeanCurrentlyInCreationException possibly due to TransactionProxyFactoryBean</title>
                <link>https://jira.spring.io/browse/SPR-505</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;ve created a fairly simple test setup which can replication the problem we&apos;re experiencing in our system.&lt;/p&gt;

&lt;p&gt;We have a facade (called TestFacade here) which is made transactional using the TransactionProxyFactoryBean. The facade has a setter property to the CompanyDao. The CompanyDao finally has a constructor which takes a Hibernate SessionFactory as argument (autowire=constructor).&lt;/p&gt;

&lt;p&gt;Configuration file:&lt;br/&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
&amp;lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&amp;gt;&lt;br/&gt;
&amp;lt;beans&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; destroy-method=&quot;close&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;driverClassName&quot;&amp;gt;&amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;url&quot;&amp;gt;&amp;lt;value&amp;gt;jdbc:mysql://localhost/ModelTestDB&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;username&quot;&amp;gt;&amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;password&quot;&amp;gt;&amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;dataSource&quot;&amp;gt;&amp;lt;ref local=&quot;dataSource&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;companyDao&quot; class=&quot;org.test.CompanyDao&quot; autowire=&quot;constructor&quot;&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;testFacadeTarget&quot; class=&quot;org.test.TestFacade&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;companyDao&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref local=&quot;companyDao&quot;&amp;gt;&amp;lt;/ref&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;testFacade&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionManager&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref local=&quot;transactionManager&quot;&amp;gt;&amp;lt;/ref&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;target&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref local=&quot;testFacadeTarget&quot;&amp;gt;&amp;lt;/ref&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionAttributes&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;props&amp;gt;&lt;br/&gt;
				&amp;lt;prop key=&quot;*&quot;&amp;gt;PROPAGATION_REQUIRED&amp;lt;/prop&amp;gt;&lt;br/&gt;
			&amp;lt;/props&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate.LocalSessionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;mappingResources&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&lt;br/&gt;
			&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;props&amp;gt;&lt;br/&gt;
				&amp;lt;prop key=&quot;hibernate.dialect&quot;&amp;gt;net.sf.hibernate.dialect.MySQLDialect&amp;lt;/prop&amp;gt;&lt;br/&gt;
			&amp;lt;/props&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;dataSource&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;dataSource&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;br/&gt;
&amp;lt;/beans&amp;gt;&lt;/p&gt;

&lt;p&gt;When the configuration only contains the Dao, everything works nicely (with the dao). When the facade and the TransactionProxyFactoryBean gets added to the mix we get the following exception:&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;testFacade&apos; defined in class path resource &lt;span class=&quot;error&quot;&gt;&amp;#91;org/test/application-context.xml&amp;#93;&lt;/span&gt;: Can&apos;t resolve reference to bean &apos;testFacadeTarget&apos; while setting property &apos;target&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;testFacadeTarget&apos; defined in class path resource &lt;span class=&quot;error&quot;&gt;&amp;#91;org/test/application-context.xml&amp;#93;&lt;/span&gt;: Can&apos;t resolve reference to bean &apos;companyDao&apos; while setting property &apos;companyDao&apos;; nested exception is &lt;br/&gt;
org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &apos;companyDao&apos;: Requested bean is already currently in creation&lt;br/&gt;
org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;testFacadeTarget&apos; defined in class path resource &lt;span class=&quot;error&quot;&gt;&amp;#91;org/test/application-context.xml&amp;#93;&lt;/span&gt;: Can&apos;t resolve reference to bean &apos;companyDao&apos; while setting property &apos;companyDao&apos;; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &apos;companyDao&apos;: Requested bean is already currently in creation&lt;br/&gt;
org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &apos;companyDao&apos;: Requested bean is already currently in creation&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:898)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:832)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:773)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:601)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:258)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:898)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:832)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:773)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:601)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:258)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:345)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.isBeanTypeMatch(DefaultListableBeanFactory.java:193)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:157)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:144)&lt;br/&gt;
	at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:160)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findMatchingBeans(DefaultListableBeanFactory.java:313)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createArgumentArray(AbstractAutowireCapableBeanFactory.java:547)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:433)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:238)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:236)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:304)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:80)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:65)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:56)&lt;br/&gt;
	at org.test.TestFacadeTest.testCreateNewCompany(TestFacadeTest.java:13)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Unknown Source)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:421)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:305)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:186)&lt;/p&gt;
</description>
            <key id="10805">SPR-505</key>
            <summary>BeanCurrentlyInCreationException possibly due to TransactionProxyFactoryBean</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="ski_bum">Jeppe Cramon</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Dec 2004 03:51:48 +0000</created>
                <updated>Sat, 11 Dec 2004 00:37:17 +0000</updated>
                            <resolved>Sat, 11 Dec 2004 00:37:17 +0000</resolved>
                                    <version>1.1.1</version>
                    <version>1.1.2</version>
                                    <fixVersion>1.1.3</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="11632" author="ski_bum" created="Wed, 1 Dec 2004 03:55:49 +0000"  >&lt;p&gt;Example Eclipse project where the dependent Jars (all from the Spring with dependencies version) are placed in another Eclipse project.&lt;/p&gt;</comment>
                            <comment id="11633" author="ski_bum" created="Wed, 1 Dec 2004 06:11:19 +0000"  >&lt;p&gt;I was jumping to conclusion, it doesn&apos;t seem that it was directly related to the TransactionProxyFactoryBean.&lt;br/&gt;
Instead, if I swap the order of bean &quot;testFacadeTarget&quot; and &quot;companyDao&quot; it suddenly works. It seems that Spring is order sensitive??&lt;/p&gt;

&lt;p&gt;Working configuration:&lt;/p&gt;

&lt;p&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
&amp;lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&amp;gt;&lt;br/&gt;
&amp;lt;beans&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; destroy-method=&quot;close&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;driverClassName&quot;&amp;gt;&amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;url&quot;&amp;gt;&amp;lt;value&amp;gt;jdbc:mysql://localhost/ModelTestDB&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;username&quot;&amp;gt;&amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;password&quot;&amp;gt;&amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;dataSource&quot;&amp;gt;&amp;lt;ref local=&quot;dataSource&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;


&lt;p&gt;	&amp;lt;bean id=&quot;testFacadeTarget&quot; class=&quot;org.test.TestFacade&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;companyDao&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref local=&quot;companyDao&quot;&amp;gt;&amp;lt;/ref&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;companyDao&quot; class=&quot;org.test.CompanyDao&quot; autowire=&quot;constructor&quot;&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;testFacade&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionManager&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref local=&quot;transactionManager&quot;&amp;gt;&amp;lt;/ref&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;target&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref local=&quot;testFacadeTarget&quot;&amp;gt;&amp;lt;/ref&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionAttributes&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;props&amp;gt;&lt;br/&gt;
				&amp;lt;prop key=&quot;*&quot;&amp;gt;PROPAGATION_REQUIRED&amp;lt;/prop&amp;gt;&lt;br/&gt;
			&amp;lt;/props&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate.LocalSessionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;mappingResources&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&lt;br/&gt;
			&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;props&amp;gt;&lt;br/&gt;
				&amp;lt;prop key=&quot;hibernate.dialect&quot;&amp;gt;net.sf.hibernate.dialect.MySQLDialect&amp;lt;/prop&amp;gt;&lt;br/&gt;
			&amp;lt;/props&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;dataSource&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;dataSource&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;


&lt;p&gt;&amp;lt;/beans&amp;gt;&lt;/p&gt;</comment>
                            <comment id="11764" author="juergen.hoeller" created="Sat, 11 Dec 2004 00:37:17 +0000"  >&lt;p&gt;Indeed, only first-level BeanCurrentlyInCreationExceptions were caught and ignored. If they&apos;re nested in other BeanCreationExceptions, for example because a bean needed by the currently matched bean is currently in creation, the exception went through.&lt;/p&gt;

&lt;p&gt;I&apos;ve fixed this through checking whether the current exception contains a BeanCurrentlyInCreationException, either being of that type itself or containing a nested cause of that type. All such failures are ignored when looking for matching beans when autowiring.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="10333" name="TestProject.zip" size="5094" author="ski_bum" created="Wed, 1 Dec 2004 03:55:49 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        12 years, 3 weeks, 5 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 11 Dec 2004 00:37:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04xtr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28854</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>