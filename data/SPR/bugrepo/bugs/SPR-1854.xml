<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:22:25 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1854/SPR-1854.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1854] DispatcherServlet invokes HandlerExceptionResolver too early</title>
                <link>https://jira.spring.io/browse/SPR-1854</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Currently, in a page with JSTL &amp;lt;c:import&amp;gt;, a configured HandlerExceptionResolver is executed very early when the DispatcherServlet catches an exception. It is invoked inside the same nesting level as the origin of the exception. I&apos;ll explain why this is a problem.&lt;/p&gt;

&lt;p&gt;If the Resolver is called in the include, and it handles the exception by setting the response code to 500, the code flow eventually gets back to the &amp;lt;c:import&amp;gt; tag in JSTL. Here, the following code from org.apache.taglibs.standard.tag.common.core.ImportSupport (standard.jar, v1.1.2, line 309) comes into play:&lt;/p&gt;

&lt;p&gt;	    // disallow inappropriate response codes per JSTL spec&lt;br/&gt;
	    if (irw.getStatus() &amp;lt; 200 || irw.getStatus() &amp;gt; 299) &lt;/p&gt;
{
		throw new JspTagException(irw.getStatus() + &quot; &quot; +
		    stripSession(targetUrl));
	    }

&lt;p&gt;This means that a JspTagException is then thrown, instead of an error page delivered.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the stack trace of the causing exception is not contained in the exception any more&lt;/li&gt;
	&lt;li&gt;the original intent of displaying an error page for the causing exception is negated, instead a stacktrace of the JspTagException is shown&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This means that the HandlerExceptionResolver mechanism simple doesn&apos;t work reliable with includes.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if the idea is good, but I&apos;d propose to only invoke the HandlerExceptionResolver in the outermost invocation (if it would be a ServletFilter, I would configure it with &amp;lt;dispatcher&amp;gt;REQUEST&amp;lt;/dispatcher&amp;gt; only). Any inner invocations should bubble the exception up to the outermost invocation. Maybe this behaviour should be an option.&lt;/p&gt;

&lt;p&gt;Unfortunately it does not seem to be possible to implement a ServletFilter, because of the tight coupling with Views and the like.&lt;/p&gt;</description>
            <key id="13678">SPR-1854</key>
            <summary>DispatcherServlet invokes HandlerExceptionResolver too early</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="goonie">Andreas Schildbach</reporter>
                        <labels>
                    </labels>
                <created>Tue, 4 Apr 2006 05:34:47 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:35 +0000</updated>
                            <resolved>Mon, 10 Apr 2006 00:28:31 +0000</resolved>
                                    <version>1.2.7</version>
                    <version>2.0 M3</version>
                                    <fixVersion>1.2.8</fixVersion>
                    <fixVersion>2.0 M4</fixVersion>
                                    <component>Web</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="17065" author="goonie" created="Tue, 4 Apr 2006 06:22:38 +0000"  >&lt;p&gt;I managed to fix this problem for my application by extending SimpleMappingExceptionResolver (thanks for your perfect application design, guys!). Feel free to include or do whatever you like with the attached class.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if this solution is fitting for everyone.&lt;/p&gt;</comment>
                            <comment id="17070" author="goonie" created="Tue, 4 Apr 2006 17:22:58 +0000"  >&lt;p&gt;My fix does solve the problem of swallowing the original exception. It is now displayed in the browser with the standard Tomcat error page and written to the console.&lt;/p&gt;

&lt;p&gt;However, the exception still cannot properly be handled by the HandlerExceptionResolver. If the Resolver chooses to return null as the view, it seems that the exception does not bubble up as intended (despite the fact that it is rethrown in DispatcherServlet.processHandlerException) but instead seems to be handled somewhere.&lt;/p&gt;</comment>
                            <comment id="17111" author="juergen.hoeller" created="Mon, 10 Apr 2006 00:28:31 +0000"  >&lt;p&gt;Note that a HandlerExceptionResolver just kicks in for an exception thrown by the &lt;b&gt;handler&lt;/b&gt; - that is, it will not kick in for an exception raised during view rendering. Hence, if an include throws an exception  - necessarily during view rendering -, the outermost HandlerExceptionResolver will not see that exception. You&apos;re gonna get a messed-up view instead.&lt;/p&gt;

&lt;p&gt;So in that respect, the HandlerExceptionResolver needs to kick in for the include request and render an appropriate error view, which will then end up as part of the (messed-up) full view. That&apos;s still the most appropriate way to go about this.&lt;/p&gt;

&lt;p&gt;However, you do have a point that setting an HTTP status code is not appropriate for an include request. Any status code set there will be ignored anyway, as defined by the Servlet spec, at least in the sense of not getting set on the actual HTTP response.&lt;/p&gt;

&lt;p&gt;To address this issue, I&apos;ve adapted SimpleMappingExceptionResolver to only apply a specified &quot;defaultStatusCode&quot; to a top-level request, that is, not to an include request. A matching error view will still be rendered even for the include request, though.&lt;/p&gt;

&lt;p&gt;This should work nicely with the JSTL import behavior that you outlined, as well as for standard Servlet/JSP includes.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11548" name="RequestOnlyExceptionResolver.java" size="767" author="goonie" created="Tue, 4 Apr 2006 06:22:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 38 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 10 Apr 2006 00:28:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i019i7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7417</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>