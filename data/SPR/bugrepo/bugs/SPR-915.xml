<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:06:14 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-915/SPR-915.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-915] MethodInvoker not selecting correct overloaded methods</title>
                <link>https://jira.spring.io/browse/SPR-915</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;When trying to use a static method to create an object, I&apos;m getting a NoSuchMethodException for the parameters i&apos;m passing if the arguments are either a subtype or subclass of the required argument types.&lt;/p&gt;

&lt;p&gt;I have updated the org.springframework.util.MethodInvoker prepare method, to accept this possibility.&lt;br/&gt;
snippet below:&lt;/p&gt;

&lt;p&gt;	public void prepare() throws ClassNotFoundException, NoSuchMethodException {&lt;br/&gt;
		if (this.targetClass == null &amp;amp;&amp;amp; this.targetObject == null) &lt;/p&gt;
{
			throw new IllegalArgumentException(&quot;Either targetClass or targetObject is required&quot;);
		}
&lt;p&gt;		if (this.targetMethod == null) &lt;/p&gt;
{
			throw new IllegalArgumentException(&quot;targetMethod is required&quot;);
		}

&lt;p&gt;		if (this.arguments == null) &lt;/p&gt;
{
			this.arguments = new Object[0];
		}

&lt;p&gt;		Class[] types = new Class&lt;span class=&quot;error&quot;&gt;&amp;#91;this.arguments.length&amp;#93;&lt;/span&gt;;&lt;br/&gt;
		for (int i = 0; i &amp;lt; this.arguments.length; ++i) {&lt;br/&gt;
			if (this.arguments&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; != null) &lt;/p&gt;
{
				types[i] = this.arguments[i].getClass();
			}
&lt;p&gt;		}&lt;/p&gt;

&lt;p&gt;		// try to get the exact method first&lt;br/&gt;
		Class targetClass = (this.targetObject != null) ? this.targetObject.getClass() : this.targetClass;&lt;br/&gt;
		try &lt;/p&gt;
{		    
			this.methodObject = targetClass.getMethod(this.targetMethod, types);			
		}
&lt;p&gt;		catch (NoSuchMethodException ex) {&lt;br/&gt;
		    System.out.println(&quot;caught the exception&quot;);&lt;br/&gt;
		    // Get a list of the available methods&lt;br/&gt;
		    Method[] targetMethods = targetClass.getMethods();&lt;/p&gt;

&lt;p&gt;	        for(int i = 0; i &amp;lt; targetMethods.length; i++) {&lt;br/&gt;
	            Method method = targetMethods&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;;&lt;/p&gt;

&lt;p&gt;	            if(method.getName().equalsIgnoreCase(targetMethod)) {&lt;br/&gt;
	                Class[] methodTypes = method.getParameterTypes();&lt;/p&gt;

&lt;p&gt;	                // Check if the inspected method has the same number of methods&lt;br/&gt;
	                if(methodTypes.length == arguments.length) {&lt;/p&gt;

&lt;p&gt;	                    int numberOfCorrectArguments = 0;&lt;br/&gt;
	                    for(int j = 0; j &amp;lt; types.length; j++) {&lt;/p&gt;

&lt;p&gt;	                        // Verify that the supplied argument is assignable to the method argument type&lt;br/&gt;
	                        if(methodTypes&lt;span class=&quot;error&quot;&gt;&amp;#91;j&amp;#93;&lt;/span&gt;.isAssignableFrom(arguments&lt;span class=&quot;error&quot;&gt;&amp;#91;j&amp;#93;&lt;/span&gt;.getClass())) &lt;/p&gt;
{                            
	                            numberOfCorrectArguments++;
	                        }
&lt;p&gt;	                    }&lt;br/&gt;
	                    if(numberOfCorrectArguments == types.length) &lt;/p&gt;
{
	                        this.methodObject = method;
	                        i = targetMethods.length;
	                    }
&lt;p&gt;	                }&lt;br/&gt;
	            }&lt;br/&gt;
	        }&lt;br/&gt;
			// just rethrow exception if we can&apos;t get a match&lt;br/&gt;
			if (this.methodObject == null) &lt;/p&gt;
{
				throw ex;
			}
&lt;p&gt;		}&lt;/p&gt;

&lt;p&gt;		if (this.targetObject == null &amp;amp;&amp;amp; !Modifier.isStatic(this.methodObject.getModifiers())) &lt;/p&gt;
{
			throw new IllegalArgumentException(&quot;Target method must not be non-static without a target&quot;);
		}
&lt;p&gt;	}&lt;/p&gt;
</description>
            <key id="11523">SPR-915</key>
            <summary>MethodInvoker not selecting correct overloaded methods</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="psmiley">Peter Smiley</reporter>
                        <labels>
                    </labels>
                <created>Wed, 4 May 2005 03:13:37 +0000</created>
                <updated>Fri, 20 May 2005 05:38:29 +0000</updated>
                            <resolved>Fri, 20 May 2005 05:38:29 +0000</resolved>
                                                    <fixVersion>1.2.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13316" author="juergen.hoeller" created="Fri, 20 May 2005 05:38:29 +0000"  >&lt;p&gt;Thanks for the suggestion! I&apos;ve refined MethodInvoker accordingly, not just looking for a method with the correct number of parameters but rather for one with assignable parameters.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 32 weeks, 6 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 20 May 2005 05:38:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04wy7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28712</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>