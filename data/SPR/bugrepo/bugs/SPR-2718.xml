<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:46:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2718/SPR-2718.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2718] Broken support declarative transaction support for non-public methods (protected and default-scope) with both AspectJ LTW and Spring AOP</title>
                <link>https://jira.spring.io/browse/SPR-2718</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Default-scoped and protected methods annotated as @Transactional are properly recognized by aspect but call to  createTransactionIfNecessary(method, txObject.getClass()) from AbstractTransaction aspect returns unusable TranactionInfo object - both transactionAttribute and transactionStatus are null.&lt;/p&gt;

&lt;p&gt;I would attach a small test program that illustrates it. &lt;/p&gt;

&lt;p&gt;In RC3 it has worked (after small tweaking of pointcut in AnnotationTransactionAspect to allow non-public methods).&lt;/p&gt;</description>
            <key id="15234">SPR-2718</key>
            <summary>Broken support declarative transaction support for non-public methods (protected and default-scope) with both AspectJ LTW and Spring AOP</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="adrian.colyer">Adrian Colyer</assignee>
                                    <reporter username="al0">Oleksandr Alesinskyy</reporter>
                        <labels>
                    </labels>
                <created>Mon, 16 Oct 2006 07:41:36 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:46 +0000</updated>
                            <resolved>Thu, 2 Nov 2006 00:05:33 +0000</resolved>
                                    <version>2.0 final</version>
                                    <fixVersion>2.0.1</fixVersion>
                                    <component>Core:AOP</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="20305" author="al0" created="Mon, 16 Oct 2006 07:58:02 +0000"  >&lt;p&gt;Forgot to mention - for annotation.driven transaction value of attribute &quot;proxy-target-classes does not matter&lt;/p&gt;</comment>
                            <comment id="20347" author="juergen.hoeller" created="Thu, 19 Oct 2006 23:01:43 +0000"  >&lt;p&gt;This was deliberate, actually: @Transactional is now by default only applied for public methods, after a long discussion about consistent @Transactional semantics (in particular with respect to CGLIB proxies). If you want to have @Transactional applying for non-public methods as well, consider subclassing AnnotationTransactionAttributeSource to override the &quot;allowPublicMethodsOnly()&quot; method, returning &quot;false&quot; instead of the default &quot;true&quot;.&lt;/p&gt;

&lt;p&gt;FWIW, I&apos;ve lowered the priority of this issue to &quot;Major&quot;, since this does not qualify as a blocker for the framework&apos;s standard functionality but rather only for a specific advanced use case.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20364" author="al0" created="Fri, 20 Oct 2006 07:40:05 +0000"  >&lt;p&gt;No so sure about deliberation - as far as I may remember, discussion, at list in comments to the related JIRA issues, finished with slightly different outcome. Namely, class-level @Transactional annotation shall affect only public methods and method-level one - annotated method as far as it is not private. &lt;/p&gt;

&lt;p&gt;Documentation for 2.0 final confirm this - from chapter 6.2.8&lt;br/&gt;
&quot;A @Transactional annotation on a class specifies the default transaction semantics for the execution of any&lt;br/&gt;
public operation in the class.&lt;br/&gt;
A @Transactional annotation on a method within the class overrides the default transaction semantics given by&lt;br/&gt;
the class annotation (if present). Methods with public, protected, and default visibility may all be annotated.&lt;br/&gt;
Annotating protected and default visibility methods directly is the only way to get transaction demarcation for&lt;br/&gt;
the execution of such operations.&quot;.&lt;/p&gt;

&lt;p&gt;Current version of transactional aspect - org.springframework.transaction.aspectj.AbstractTransactionAspect&lt;br/&gt;
as well is written according to this convention. &lt;/p&gt;

&lt;p&gt;So, at least there is clear and major descripance between documentation and AspectJ-related part of the Spring, &lt;br/&gt;
from one side, and AnnotationTransactionAttributeSource, from other side. Moreover, in some circumatainces it &lt;br/&gt;
may cause data corruption/loss. E.g. &lt;br/&gt;
@Transactional&lt;br/&gt;
protected  biglTransaction() {&lt;br/&gt;
    transactional1();&lt;br/&gt;
    transactional2();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;@Transactional&lt;br/&gt;
public transactional1() {&lt;br/&gt;
  // Do something with DB&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;@Transactional&lt;br/&gt;
public transactional2() {&lt;br/&gt;
  // Do something with DB&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;In this case transactiona1() and transactional2() will run in separate transaction each, not in accordance &lt;br/&gt;
with a programmer&apos;s intention and without any warning. If somethig im transactional2() fails only it would be rolled back,&lt;br/&gt;
but not transactional1(), leaving data in presumably inconsistent state. I have to note, that this sample represents not the&lt;br/&gt;
best programming practice, but such situation definitely may arise, even unintentionally.&lt;/p&gt;

&lt;p&gt;So, this issue has at least some rights to be promoted to &quot;Critical&quot;.&lt;/p&gt;</comment>
                            <comment id="20596" author="adrian.colyer" created="Thu, 2 Nov 2006 00:05:33 +0000"  >&lt;p&gt;Test cases and fix commited to tree. The AnnotationTransactionAspect has been updated to use an AnnotationTransactionAttributeSource that &lt;b&gt;does&lt;/b&gt; honour @Transactional annotations on non-private methods.&lt;/p&gt;

&lt;p&gt;The documentation remains unchanged from Spring 2.0 and is correct. To summarize:&lt;/p&gt;

&lt;p&gt;Using Spring-AOP, @Transactional on a type defines default transaction semantics for all public methods in the type, annotations on individual public methods can override that. @Transactional annotations on non-public methods are ignored by Spring AOP.&lt;/p&gt;

&lt;p&gt;When using the AspectJ AnnotationTransactionAspect, annotations on types define default transaction semantics for all public methods in the type, annotations are permitted on any non-private methods in addition, and override the type-level specification if given.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12032" name="declarativeTransactionTests.zip" size="4792" author="al0" created="Mon, 16 Oct 2006 07:58:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 9 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 19 Oct 2006 23:01:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00vk7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5158</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>