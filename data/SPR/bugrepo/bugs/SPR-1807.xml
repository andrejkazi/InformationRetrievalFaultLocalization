<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:07:34 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1807/SPR-1807.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1807] registerSingleton method does not reset BeanDefinition</title>
                <link>https://jira.spring.io/browse/SPR-1807</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Calling registerSingleton to register a specific object instance as a singleton known to a BeanFactory works fine when the existing BeanDefinition is &quot;compatible&quot;. However when the BeanDefinition for that name is &quot;incompatible&quot; incorrect behaviour occurs.&lt;/p&gt;

&lt;p&gt;In one possible scenario, BeanIsNotAFactoryException gets thrown.&lt;/p&gt;

&lt;p&gt;I&apos;m using registerSingleton in unit test code to explicitly override certain definitions in the application&apos;s xml config file.&lt;/p&gt;

&lt;p&gt;===code===&lt;br/&gt;
  Impl2 myImpl = new Impl2();&lt;/p&gt;

&lt;p&gt;  GenericApplicationContext ctx = new GenericApplicationContext();&lt;br/&gt;
  XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(ctx);&lt;br/&gt;
  xmlReader.loadBeanDefinitions(new ClassPathResource(&quot;example/context.xml&quot;));&lt;/p&gt;

&lt;p&gt;  ctx.getBeanFactory().registerSingleton(&quot;iface&quot;, myImpl);&lt;/p&gt;

&lt;p&gt;  ctx.refresh();		&lt;br/&gt;
===code===&lt;/p&gt;

&lt;p&gt;The above code works fine when the definition for bean &quot;iface&quot; is like this:&lt;br/&gt;
  &amp;lt;bean id=&quot;iface&quot; class=&quot;example.Impl&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;However when it looks like this, a BeanIsNotAFactoryException occurs in the ctx.refresh call:&lt;br/&gt;
  &amp;lt;bean id=&quot;iface&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&amp;gt;&lt;br/&gt;
    ...&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;br/&gt;
This is presumably because a BeanDefinition has been created when the original config file was parsed, and still&lt;br/&gt;
exists even though a singleton has been explicitly registered later.&lt;/p&gt;

&lt;p&gt;I think that when registerSingleton is called, the BeanDefinition for that name should be recreated,&lt;br/&gt;
so that the definition matches the singleton object. This is presumably the behaviour that occurs when&lt;br/&gt;
  registerSingleton(&quot;somename&quot;, someObj)&lt;br/&gt;
is called when somename is &lt;b&gt;not&lt;/b&gt; overriding any existing definition.&lt;/p&gt;

&lt;p&gt;At the least, javadoc for registerSingleton should be updated to point out that the object registered for a&lt;br/&gt;
specific name must be &quot;compatible&quot; with the existing BeanDefinition for that same name.&lt;/p&gt;

&lt;p&gt;A workaround is to explicitly register a compatible BeanDefinition, eg:&lt;br/&gt;
  RootBeanDefinition beanDef = new RootBeanDefinition(Impl2.class);&lt;br/&gt;
  ctx.registerBeanDefinition(&quot;iface&quot;, beanDef);&lt;br/&gt;
  ctx.getBeanFactory().registerSingleton(&quot;iface&quot;, myImpl);&lt;/p&gt;</description>
            <key id="13574">SPR-1807</key>
            <summary>registerSingleton method does not reset BeanDefinition</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="skitching">Simon Kitching</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Mar 2006 10:06:16 +0000</created>
                <updated>Tue, 19 Jun 2012 03:53:59 +0000</updated>
                            <resolved>Thu, 23 Mar 2006 07:54:17 +0000</resolved>
                                    <version>1.2.7</version>
                    <version>2.0 M3</version>
                                    <fixVersion>1.2.8</fixVersion>
                    <fixVersion>2.0 M4</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="16932" author="juergen.hoeller" created="Thu, 23 Mar 2006 07:54:17 +0000"  >&lt;p&gt;Thanks for pointing this out! I&apos;ve addressed this issue through a fix in DefaultListableBeanFactory, which detects existing singleton instances now and does not try to instantiate a bean according to a bean definition in such a case. This means that any instance registered through registerSingleton will completely override a bean definition of the same name, without any requirement to have compatibility between the bean definition and the registered singleton instance.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 41 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 23 Mar 2006 07:54:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04vhb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28474</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>