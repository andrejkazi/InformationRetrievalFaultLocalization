<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:19:35 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-9534/SPR-9534.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-9534] Improve exception handling of @RequestMapping(produces=&quot;...&quot;, consumes=&quot;...&quot;) to support classifying invalid format media types as client errors</title>
                <link>https://jira.spring.io/browse/SPR-9534</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;If an invalid format (string without a &quot;/&quot;) media type is specified in an Accept or Content-Type HTTP request header, or if the Content-Type header is not specified or empty, handler methods annotated with @RequestMapping(produces=&quot;...&quot;) or @RequestMapping(consumes=&quot;...&quot;) currently throw a very generic IllegalArgumentException:&lt;/p&gt;

&lt;p&gt;e.g. for @RequestMapping(produces=&quot;...&quot;) -&lt;br/&gt;
java.lang.IllegalArgumentException: &quot;foo&quot; does not contain &apos;/&apos;&lt;br/&gt;
    at org.springframework.http.MediaType.parseMediaType(MediaType.java: 648)&lt;br/&gt;
    at org.springframework.http.MediaType.parseMediaTypes(MediaType.java: 691)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getAcceptedMediaTypes(&lt;br/&gt;
ProducesRequestCondition.java: 214)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.access$4(&lt;br/&gt;
ProducesRequestCondition.java: 211)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition$ProduceMediaTypeExpression.&lt;br/&gt;
matchMediaType(ProducesRequestCondition.java: 283)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression.match(&lt;br/&gt;
AbstractMediaTypeExpression.java: 63)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getMatchingCondition(&lt;br/&gt;
ProducesRequestCondition.java: 163)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(&lt;br/&gt;
RequestMappingInfo.java: 175)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(&lt;br/&gt;
RequestMappingInfoHandlerMapping.java: 64)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(&lt;br/&gt;
RequestMappingInfoHandlerMapping.java: 1)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings(&lt;br/&gt;
AbstractHandlerMethodMapping.java: 284)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(&lt;br/&gt;
AbstractHandlerMethodMapping.java: 251)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(&lt;br/&gt;
AbstractHandlerMethodMapping.java: 216)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(&lt;br/&gt;
AbstractHandlerMethodMapping.java: 1)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java: 288)&lt;br/&gt;
    at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java: 1063)&lt;/p&gt;

&lt;p&gt;e.g. for @RequestMapping(consumes=&quot;...&quot;) with an invalid format Content-Type header (e.g. &quot;foo&quot;) -&lt;br/&gt;
java.lang.IllegalArgumentException: &quot;foo&quot; does not contain &apos;/&apos;&lt;br/&gt;
    at org.springframework.http.MediaType.parseMediaType(MediaType.java: 648)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition$ConsumeMediaTypeExpression.&lt;br/&gt;
matchMediaType(ConsumesRequestCondition.java: 215)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression.match(&lt;br/&gt;
AbstractMediaTypeExpression.java: 63)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.getMatchingCondition(&lt;br/&gt;
ConsumesRequestCondition.java: 165)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(&lt;br/&gt;
RequestMappingInfo.java: 174)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(&lt;br/&gt;
RequestMappingInfoHandlerMapping.java: 64)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(&lt;br/&gt;
RequestMappingInfoHandlerMapping.java: 1)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings(&lt;br/&gt;
AbstractHandlerMethodMapping.java: 284)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(&lt;br/&gt;
AbstractHandlerMethodMapping.java: 251)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(&lt;br/&gt;
AbstractHandlerMethodMapping.java: 216)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(&lt;br/&gt;
AbstractHandlerMethodMapping.java: 1)&lt;br/&gt;
    at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java: 288)&lt;br/&gt;
    at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java: 1063)&lt;br/&gt;
    at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java: 1048)&lt;/p&gt;

&lt;p&gt;e.g. for @RequestMapping(consumes=&quot;...&quot;) with a missing or empty Content-Type header -&lt;br/&gt;
java.lang.IllegalArgumentException: &apos;mediaType&apos; must not be empty&lt;br/&gt;
    at org.springframework.util.Assert.hasLength(Assert.java: 136)&lt;br/&gt;
    at org.springframework.http.MediaType.parseMediaType(MediaType.java: 638)&lt;br/&gt;
    at org.springframework.http.HttpHeaders.getContentType(HttpHeaders.java: 290)&lt;br/&gt;
    at org.springframework.http.server.ServletServerHttpRequest.getHeaders(ServletServerHttpRequest.java: 106)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.&lt;br/&gt;
readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java: 109)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.&lt;br/&gt;
readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java: 91)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(&lt;br/&gt;
RequestResponseBodyMethodProcessor.java: 71)&lt;br/&gt;
    at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(&lt;br/&gt;
HandlerMethodArgumentResolverComposite.java: 75)&lt;br/&gt;
    at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(&lt;br/&gt;
InvocableHandlerMethod.java: 156)&lt;br/&gt;
    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java: 117)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(&lt;br/&gt;
ServletInvocableHandlerMethod.java: 96)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(&lt;br/&gt;
RequestMappingHandlerAdapter.java: 617)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(&lt;br/&gt;
RequestMappingHandlerAdapter.java: 578)&lt;br/&gt;
    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(&lt;br/&gt;
AbstractHandlerMethodAdapter.java: 80)&lt;br/&gt;
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java: 923)&lt;/p&gt;

&lt;p&gt;This makes it very difficult for Spring MVC apps to classify this as a client originating error and return an appropriate HTTP response status code, e.g. 406 Not Acceptable, or 415 Unsupported Media Type.  Requests with invalid format media-types don&apos;t happen often, but they can occur for public APIs. Because the exception is thrown early in request dispatching, before the handler is mapped, you can&apos;t work around it by writing your own media-type validating interceptor.&lt;/p&gt;

&lt;p&gt;Please could either MediaType.parseMediaType() be modified to throw a more specific class of exception (e.g. InvalidMediaTypeException), and/or the classes that use it (ProducesRequestCondition and ConsumesRequestCondition) be enhanced to wrap and re-throw the exception as an HttpMediaTypeNotAcceptableException or HttpMediaTypeNotSupportedException.&lt;/p&gt;

&lt;p&gt;Thanks in advance. And thanks for all the recent and scheduled improvements to Spring MVC 3.x.&lt;/p&gt;</description>
            <key id="44086">SPR-9534</key>
            <summary>Improve exception handling of @RequestMapping(produces=&quot;...&quot;, consumes=&quot;...&quot;) to support classifying invalid format media types as client errors</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="rstoya05-aop">Rossen Stoyanchev</assignee>
                                    <reporter username="brownn">Neil Brown</reporter>
                        <labels>
                            <label>mvc</label>
                    </labels>
                <created>Sat, 23 Jun 2012 04:23:56 +0000</created>
                <updated>Mon, 25 Jun 2012 06:49:42 +0000</updated>
                            <resolved>Mon, 25 Jun 2012 06:49:42 +0000</resolved>
                                    <version>3.1.1</version>
                                                    <component>Web</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="81108" author="rstoya05-aop" created="Mon, 25 Jun 2012 06:49:42 +0000"  >&lt;p&gt;This was already addressed. See &lt;a href=&quot;https://jira.spring.io/browse/SPR-9148&quot; title=&quot;Backport &amp;quot;Invalid MIME-type causes a 500 error&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-9148&quot;&gt;&lt;del&gt;SPR-9148&lt;/del&gt;&lt;/a&gt; and the related &lt;a href=&quot;https://github.com/SpringSource/spring-framework/commit/ca8b98e94724cd9a2008deb4fe1280aaace6ca8b&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;commit&lt;/a&gt;. It should also be backported to 3.1.x via &lt;a href=&quot;https://jira.spring.io/browse/SPR-9148&quot; title=&quot;Backport &amp;quot;Invalid MIME-type causes a 500 error&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-9148&quot;&gt;&lt;del&gt;SPR-9148&lt;/del&gt;&lt;/a&gt; if you want to put a watch somewhere.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        4 years, 26 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 25 Jun 2012 06:49:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>rstoya05-aop</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i05o3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33109</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>