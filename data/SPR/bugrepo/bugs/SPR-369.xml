<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:05:10 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-369/SPR-369.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-369] Restrict visibility of beans in app context</title>
                <link>https://jira.spring.io/browse/SPR-369</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;d like to have the possiblity, not to make lowlevel spring beans like &quot;dataSource&quot;, &quot;hibernateSessionFactory&quot; etc. visible to /any/ application code. &lt;/p&gt;

&lt;p&gt;Of course, they should be accessible by other beans via &amp;lt;ref bean..&amp;gt; but right now, one can always access every single bean using &lt;br/&gt;
MyAppContext.getBean(..) &lt;/p&gt;

&lt;p&gt;This is also an issue for my DAOs, which in turn should not just be usable by &quot;anybody&quot; but rather only by my BusinessLogicBeans etc. &lt;/p&gt;

&lt;p&gt;The goal is to ensure some kind of proper design and layers just by &lt;br/&gt;
keeping an eye on my (ideally visualized) application context descriptors and how &amp;lt;ref bean..&amp;gt; constructs are used. &lt;/p&gt;

&lt;p&gt;somehow related to &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jira.spring.io/browse/SPR-339&quot; title=&quot;Default access class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-339&quot;&gt;&lt;del&gt;SPR-339&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://jira.spring.io/browse/SPR-174&quot; title=&quot;Support private bean constructors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-174&quot;&gt;&lt;del&gt;SPR-174&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</description>
            <key id="10617">SPR-369</key>
            <summary>Restrict visibility of beans in app context</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="jonaskilian">Jonas Kilian</reporter>
                        <labels>
                    </labels>
                <created>Mon, 4 Oct 2004 20:21:16 +0000</created>
                <updated>Wed, 22 Oct 2008 00:28:54 +0000</updated>
                            <resolved>Tue, 21 Oct 2008 22:10:42 +0000</resolved>
                                    <version>1.1 final</version>
                                                    <component>Core</component>
                        <due></due>
                            <votes>11</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13858" author="jslindst" created="Tue, 12 Jul 2005 21:18:43 +0000"  >&lt;p&gt;I&apos;d prefer having &apos;local&apos; (kind of like package protected) beans that can be referenced only from the application context in question. and &apos;public&apos; beans that can be referenced/seen also from other context. This way the application could be more easily segregated to different components with their own internals and public components.&lt;/p&gt;
</comment>
                            <comment id="15630" author="geoffweatherall" created="Mon, 5 Dec 2005 08:36:18 +0000"  >&lt;p&gt;It would be very useful to have local beans (bean definitions which could not be seen outside their own context file) so as to avoid namespace collisions with beans defined in other context files.&lt;/p&gt;

&lt;p&gt;The specific area in which this would be useful that I have seen is when using the Spring MVC to build large scale web applications.  In a larger scale application, Spring MVC allows for multiple context files to be used to define parts of the web application.  Very useful when you have hundreds of controllers.  And even going a step beyond this, it is possible to auto discover the controllers (which means you do not need to keep nasty lists of hundreds of controllers).  We achieve this by using the class path wildcard scanning ability of the dispatch servlet, as shown below:&lt;/p&gt;

&lt;p&gt;(fragment of web.xml)&lt;br/&gt;
    &amp;lt;servlet&amp;gt;&lt;br/&gt;
        &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt;&lt;br/&gt;
        &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;&lt;br/&gt;
        &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;&lt;br/&gt;
        &amp;lt;init-param&amp;gt;&lt;br/&gt;
        	&amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;br/&gt;
        	&amp;lt;param-value&amp;gt;/WEB-INF/action-servlet.xml,/WEB-INF/classes/*&lt;b&gt;/&lt;/b&gt;.wizard.context.xml&amp;lt;/param-value&amp;gt;&lt;br/&gt;
        &amp;lt;/init-param&amp;gt;&lt;br/&gt;
    &amp;lt;/servlet&amp;gt;&lt;/p&gt;

&lt;p&gt;In this case the dispatcher servlet is &quot;smart&quot; enough to scan for all context files that match the given pattern, and load the controllers from each.  Since we use the default BeanNameUrlHandlerMapping, each controller can register itself and all its beans independently of any global lists, and has no coupling to other context files (other than services, which of course is an unavoidable level of coupling).  So great!  However, there is one area of coupling between the context files that is a real pain - the name space for all the beans is global.  The only bean in each context file that really needs to be globally visible is the actual controller bean.   We have to do our own namespace management (prefix bean names to ensure they will be globally unique).  What would really benefit us with a large application is the ability to make the beans that support each controller locally defined within their context file.  &lt;/p&gt;

&lt;p&gt;A similar story applies within our service layer.  We would also like the beans that support the actual service bean to be private to that service context file.&lt;/p&gt;</comment>
                            <comment id="19137" author="bosmon" created="Sat, 19 Aug 2006 08:10:32 +0000"  >&lt;p&gt;This would indeed be a useful feature to have, although I wonder whether it might not be better addressed through a more developed use of Spring&apos;s support for hierarchical contexts? This has always seemed to be a Spring feature with great potential, but outside of the SpringMVC and general FrameworkServlet support that you mention, one is at the moment &quot;completely on one&apos;s own&quot; in determining the geometry and configuration of multiple Spring contexts. &lt;/p&gt;

&lt;p&gt;It&apos;s clear that the existing hierarchy scheme would be insufficient to handle the case you mention, since currently name resolution in Spring only progresses &quot;upwards&quot; to the root - therefore if bean X has visibility to your dataSource, then any bean Y which has visibility to X can also see the dataSource. Rather than adding new bean definition properties and new visibility types, it would seem to be more economical to enable these kinds of &quot;private beans&quot; by allowing new kinds of relations between BeanFactories in Spring, together with a &quot;standard&quot; architecture and configuration for assembling them.&lt;/p&gt;</comment>
                            <comment id="24937" author="juergen.hoeller" created="Fri, 20 Jul 2007 20:59:53 +0000"  >&lt;p&gt;Spring OSGi brings new life into this discussion, I guess, since OSGi is responsible for achieving isolation between &apos;bundles&apos;  - with each bundle having a &apos;private&apos; Spring ApplicationContext inside, only exporting specific OSGi services and only exporting specific API packages (as declared in the OSGi manifest).&lt;/p&gt;

&lt;p&gt;So we might simply stick with OSGi as a solution for the visibility problem. We&apos;ll revisit this for Spring 3.0, making a final decision then.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="40520" author="juergen.hoeller" created="Tue, 21 Oct 2008 22:10:42 +0000"  >&lt;p&gt;We won&apos;t do any explicit facility here for Spring 3.0. A Spring ApplicationContext remains a container for managed beans that are all &apos;public&apos; at that level. Whoever in turn bootstraps and manages the ApplicationContext is responsible for hiding or exposing it, and for exposing or not exposing Spring beans inside of the context. If such beans gets exposed through application-specific service locators or through remoting endpoints or through OSGi service references, then they will qualify as public at the application architecture level. In any such case, the Spring ApplicationContext remains an internal container of each application unit only.&lt;/p&gt;

&lt;p&gt;We might allow for a bit more flexibility in terms of ApplicationContext hierarchies. However, that&apos;s not considered to be within the scope of this JIRA issue.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="40530" author="bmacours" created="Wed, 22 Oct 2008 00:28:54 +0000"  >&lt;p&gt;I think this feature would have the same added value as standard java visibility modifiers. When we create pure Java components, some classes/interfaces are defined as public, others as private or protected, in order to make sure developpers (around 200 in our company) don&apos;t connect to the internals.&lt;/p&gt;

&lt;p&gt;The same way, we would like to prevent direct access (via ctx.getBean()) to internal spring beans. This would be particularly useful when you integrate your components without remoting (and without osgi), as we do.&lt;/p&gt;

&lt;p&gt;Bernard&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="17484">SPR-3729</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        8 years, 10 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 12 Jul 2005 21:18:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i038lr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18936</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>