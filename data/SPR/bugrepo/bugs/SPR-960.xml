<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:00:20 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-960/SPR-960.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-960] Hibernate aggressive release and read-only/read-write transactions</title>
                <link>https://jira.spring.io/browse/SPR-960</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Since there is no reply (as of writing) to my forum post, I decide to bring it here, as the out-of-the-box quality of Spring is affected:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://forum.springframework.org/viewtopic.php?t=5583&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/viewtopic.php?t=5583&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Summary: The read-only flag of JDBC connections (from underlying connection pool) may not be properly reset when using &quot;after_transaction&quot; Hibernate release mode (Spring 1.2 default). Subsequent read-write transaction will result in a SQLException, if the connection pool decides to give it the connection which is not properly reset after previous use.&lt;/p&gt;

&lt;p&gt;For my configuration, the exception encountered is:&lt;br/&gt;
org.springframework.jdbc.UncategorizedSQLException: (HibernateTransactionManager): encountered SQLException &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR: transaction is read-only&amp;#93;&lt;/span&gt;; nested exception is java.sql.SQLException: ERROR: transaction is read-only&lt;/p&gt;

&lt;p&gt;Possible solutions may include the choosing of less aggressive &quot;on_close&quot; as the default Hibernate release mode for Spring, or the addition of some kinds of mechanism to ensure the read-only flag of JDBC connections are reset properly when they are being closed in different situations, in this case, org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.&lt;/p&gt;</description>
            <key id="11588">SPR-960</key>
            <summary>Hibernate aggressive release and read-only/read-write transactions</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="lawrenceho">Lawrence Ho</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 May 2005 13:31:40 +0000</created>
                <updated>Sun, 22 May 2005 20:35:28 +0000</updated>
                            <resolved>Wed, 18 May 2005 21:42:14 +0000</resolved>
                                    <version>1.2 final</version>
                                    <fixVersion>1.2.1</fixVersion>
                                    <component>Data</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13274" author="juergen.hoeller" created="Wed, 18 May 2005 06:13:54 +0000"  >&lt;p&gt;Arguably, a decent connection pool should always reset a Connection when checked back into the pool, so that the next user of the Connection will get the equivalent of a fresh Connection (read-write, default transaction isolation). According to my tests, C3P0 does this, for example, while Commons DBCP does not.&lt;/p&gt;

&lt;p&gt;Oddly enough, you state that you use C3P0 - and still get broken connections back from the pool... We even use the same C3P0 version.&lt;/p&gt;

&lt;p&gt;Unfortunately, this special Hibernate 3.0.3 support was a last-minute change in Spring 1.2 final, and has just been tested against DriverManagerDataSource and C3P0, which worked for me...&lt;/p&gt;

&lt;p&gt;Anyway, it seems appropriate to me to change the default in Spring 1.2.1 back to &quot;on_close&quot; (as you suggest), so that it will work with all connection pools out-of-the-box. That allows proper cleanup in HibernateTransactionManager in any case, without relying on any specific conneciton pool behavior.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="13284" author="juergen.hoeller" created="Wed, 18 May 2005 21:42:14 +0000"  >&lt;p&gt;I have change the default connection release mode to the conservative &quot;on_close&quot;. The more aggressive &quot;after_transaction&quot; and &quot;after_statement&quot; need to be specified explicitly in the Hibernate properties.&lt;/p&gt;

&lt;p&gt;This should be available in the next nightly build; please give it a try. Note that the behavior should be exactly equivalent to specifying &quot;on_close&quot; explicitly on Spring 1.2 final:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;sessionFactory&quot; ...&lt;br/&gt;
  &amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;props&amp;gt;&lt;br/&gt;
      &amp;lt;prop key=&quot;hibernate.connection.release_mode&quot;&amp;gt;on_close&amp;lt;/prop&amp;gt;&lt;br/&gt;
    &amp;lt;/props&amp;gt;&lt;br/&gt;
  &amp;lt;/property&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="13333" author="lawrenceho" created="Sun, 22 May 2005 20:35:28 +0000"  >&lt;p&gt;I just tried the nightly build (spring-framework-1.2.1-build.266-20050522), without the workaround, and it works as expected.&lt;/p&gt;

&lt;p&gt;Thanks Juergen!&lt;/p&gt;

&lt;p&gt;Lawrence&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 32 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 18 May 2005 06:13:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00zun:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5853</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>