<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:05:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2628/SPR-2628.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2628] ClassCastException within Commons EL when called from spring:message tag</title>
                <link>https://jira.spring.io/browse/SPR-2628</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Hello there, &lt;br/&gt;
I am having a problem that&apos;s becoming really annoying.&lt;br/&gt;
We recently upgrade to spring-1.2.4 from 1.1.5.&lt;/p&gt;

&lt;p&gt;In a JSP we have something like this:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;lt;c:if test=&quot;$&lt;/p&gt;
{param.hasError == &apos;true&apos;}
&lt;p&gt;&quot;&amp;gt; &lt;br/&gt;
	&amp;lt;div id=&quot;errorMessage&quot; class=&quot;errormessage&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;spring:message code=&quot;$&lt;/p&gt;
{param.errorCode}
&lt;p&gt;&quot; text=&quot;$&lt;/p&gt;
{param.defaultMessage}
&lt;p&gt; &quot;/&amp;gt;&lt;br/&gt;
	&amp;lt;/div&amp;gt;&lt;br/&gt;
&amp;lt;/c:if&amp;gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When the condition in the c:if tag renders true for value then I get the following exception:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
11:53:40.402 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;http-9000-Processor25&amp;#93;&lt;/span&gt; RequestContextAwareTag.doStartTag(75) | org.apache.taglibs.standard.lang.jstl.ImplicitObjects&lt;br/&gt;
java.lang.ClassCastException: org.apache.taglibs.standard.lang.jstl.ImplicitObjects&lt;br/&gt;
	at org.apache.commons.el.ImplicitObjects.getImplicitObjects(ImplicitObjects.java:123)&lt;br/&gt;
	at org.apache.commons.el.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:125)&lt;br/&gt;
	at org.apache.jasper.runtime.PageContextImpl.resolveVariable(PageContextImpl.java:856)&lt;br/&gt;
	at org.apache.commons.el.NamedValue.evaluate(NamedValue.java:124)&lt;br/&gt;
	at org.apache.commons.el.ComplexValue.evaluate(ComplexValue.java:140)&lt;br/&gt;
	at org.apache.commons.el.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:263)&lt;br/&gt;
	at org.apache.commons.el.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:190)&lt;br/&gt;
	at org.springframework.web.util.ExpressionEvaluationUtils$Jsp20ExpressionEvaluationHelper.evaluate(ExpressionEvaluationUtils.java:188)&lt;br/&gt;
	at org.springframework.web.util.ExpressionEvaluationUtils.evaluateString(ExpressionEvaluationUtils.java:124)&lt;br/&gt;
	at org.springframework.web.servlet.tags.MessageTag.doStartTagInternal(MessageTag.java:128)&lt;br/&gt;
	at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:68)&lt;br/&gt;
	at org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp._jspx_meth_spring_message_0(org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp:1705)&lt;br/&gt;
	at org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp._jspx_meth_c_if_3(org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp:1676)&lt;br/&gt;
	at org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp._jspService(org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp:420)&lt;br/&gt;
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The problem seems to be when resolving implicit objects in the page like the param object.&lt;/p&gt;

&lt;p&gt;If I use fmt:message tag it works well. I was also able to work around this problem by setting the values I need into variables using c:set and then using those variables in the spring:message tag like this:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
	&amp;lt;div id=&quot;errorMessage&quot; class=&quot;errormessage&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;c:set var=&quot;errorCode&quot; value=&quot;${param.errorCode}}&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;c:set var=&quot;defaultMessage&quot; value=&quot;${param.defaultMessage}}&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;spring:message code=&quot;$&lt;/p&gt;
{errorCode}
&lt;p&gt;&quot; text=&quot;$&lt;/p&gt;
{defaultMessage}
&lt;p&gt; }&quot;/&amp;gt;&lt;br/&gt;
	&amp;lt;/div&amp;gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Has anyone experienced this before??? Is this a bug in spring:message tag? I tried searching in jira but found nothing.&lt;/p&gt;

&lt;p&gt;Thanks in advance.&lt;/p&gt;</description>
            <key id="15036">SPR-2628</key>
            <summary>ClassCastException within Commons EL when called from spring:message tag</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="edovale">Erick Dovale</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Sep 2006 00:27:25 +0000</created>
                <updated>Tue, 19 Jun 2012 03:51:14 +0000</updated>
                            <resolved>Wed, 7 Feb 2007 10:06:14 +0000</resolved>
                                    <version>1.2.4</version>
                                    <fixVersion>2.0.1</fixVersion>
                                    <component>Web</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="19889" author="juergen.hoeller" created="Tue, 26 Sep 2006 00:02:22 +0000"  >&lt;p&gt;I cannot reproduce this: Access to request parameters in an EL expression works nicely for me, both standalone and as parameter for the spring:message tag. I&apos;ve tested on Tomcat 5.5.17.&lt;/p&gt;

&lt;p&gt;Generally, this ClassCastException seems to occur &lt;b&gt;within Commons EL&lt;/b&gt;, so it seems to be Commons EL itself that falls over. I don&apos;t see anything that we can do about this in Spring&apos;s message tag implementation.&lt;/p&gt;

&lt;p&gt;Is this maybe a classpath problem, with different versions of Commons EL being on the classpath? Do you by any chance have Commons EL in your application&apos;s WEB-INF/lib directory? If yes, make sure that you remove it.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="19891" author="edovale" created="Tue, 26 Sep 2006 05:40:33 +0000"  >&lt;p&gt;Hi Juergen, &lt;br/&gt;
I check in my web app and the only place I could fine commons-el jar was in the common/lib folder in my tomcat installation. There is no commons-el in the WEB-INF/lib directory. &lt;br/&gt;
I was trying to write a test case to reproduce this problem but hit a wall when the code get&apos;s to this point in ExpressionEvaluationUtils.java(188)&lt;/p&gt;

&lt;p&gt;				return pageContext.getExpressionEvaluator().evaluate(&lt;br/&gt;
						attrValue, resultClass, pageContext.getVariableResolver(), null);&lt;/p&gt;

&lt;p&gt;The exception I am getting is:&lt;/p&gt;

&lt;p&gt;java.lang.NoSuchMethodError: javax.servlet.jsp.PageContext.getExpressionEvaluator()Ljavax/servlet/jsp/el/ExpressionEvaluator;&lt;br/&gt;
	at org.springframework.web.util.ExpressionEvaluationUtils$Jsp20ExpressionEvaluationHelper.evaluate(ExpressionEvaluationUtils.java:188)&lt;br/&gt;
	at org.springframework.web.util.ExpressionEvaluationUtils.evaluateString(ExpressionEvaluationUtils.java:124)&lt;br/&gt;
	at org.springframework.web.servlet.tags.MessageTag.doStartTagInternal(MessageTag.java:128)&lt;br/&gt;
	at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:68)&lt;br/&gt;
	at org.springframework.web.servlet.tags.SpringMessageTagTest.testClassCastExceptionWithImplicitObject(SpringMessageTagTest.java:57)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Unknown Source)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
	at org.jmock.core.VerifyingTestCase.runBare(VerifyingTestCase.java:39)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)&lt;/p&gt;

&lt;p&gt;Any hint why this is happening? It seems to me like the jar for the servlet api is not the right one. Could this be the reason?&lt;/p&gt;</comment>
                            <comment id="19895" author="juergen.hoeller" created="Tue, 26 Sep 2006 07:50:52 +0000"  >&lt;p&gt;This is indeed an indication that your Servlet API jar is too old. The JSP ExpressionEvaluator API has been introduced in JSP 2.0, corresponding to Servlet 2.4. Double-check that you use the appropriate Servlet API... You can for example take the one from the Spring distribution, available in the &quot;lib/j2ee&quot; directory.&lt;/p&gt;

&lt;p&gt;I guess it will be hard to recreate this in a unit test in the first place, since it seems to be a failure within Tomcat 5.5&apos;s Commons EL, not within the Jakarta JSTL. It&apos;s probably gonna be more helpful if you try to create a minimal WAR file that reproduces the problem when deployed into Tomcat.&lt;/p&gt;

&lt;p&gt;Please try such a WAR file in a clean-room Tomcat installation first, to make sure that it isn&apos;t a problem with your particular Tomcat installation.&lt;/p&gt;

&lt;p&gt;A further thought: Maybe it&apos;s your JSTL version? When running on a JSP 2.0 container such as Tomcat 5.5, you need to use JSTL 1.1, at least when you deploy a Servlet 2.4 application (that declares Servlet 2.4 in its web.xml deployment descriptor). Usually things work with an old JSTL jar as well, though... I&apos;m really just guessing here.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="19945" author="edovale" created="Thu, 28 Sep 2006 01:12:51 +0000"  >&lt;p&gt;Hi Juergen &lt;br/&gt;
Thanks for all your help.&lt;br/&gt;
I haven&apos;t have the time to set the war up. I&apos;ll try to have done this week and will let you know how it all goes.&lt;/p&gt;

&lt;p&gt;Thanks again.&lt;/p&gt;</comment>
                            <comment id="20124" author="pmularien" created="Thu, 5 Oct 2006 23:26:47 +0000"  >&lt;p&gt;I can confirm this is a bug. You can reproduce it by running Spring on a non-JSP 2.x container, where you have the JSP 2.x classes in the web application classpath. This occurs because the code in ExpressionEvaluationUtils checks for the presence of the JSP 2.x EL using Class.forName:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
		try &lt;/p&gt;
{
			Class.forName(JSP_20_CLASS_NAME);
			// JSP 2.0 available
			helper = new Jsp20ExpressionEvaluationHelper();
			logger.info(&quot;Using JSP 2.0 ExpressionEvaluator&quot;);
		}
&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;However, when the Jsp20...Helper actually tries to use the JSP EL Evaluator to evaluate an expression, it makes the assumption that the PageContext is also a JSP 2.x-compliant PageContext object. This is not a safe unchecked assumption to make, because in the case where you&apos;re running in a non-JSP 2.x container, the PageContext will not come from the web application&apos;s ClassLoader, and instead will come from the container ClassLoader. This will be a JSP 1.x-compliant PageContext object, which does not contain the method expected by the Jsp20ExpressionEvaluator object:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
				return pageContext.getExpressionEvaluator().evaluate(&lt;br/&gt;
						attrValue, resultClass, pageContext.getVariableResolver(), null);&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The test case is to simply create a JSP page and throw an EL expression in one of the spring tag attributes, e.g.:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
 &amp;lt;c:set var=&quot;foo&quot; value=&quot;command&quot;&amp;gt;&lt;br/&gt;
 &amp;lt;spring:bind path=&quot;$&lt;/p&gt;
{foo}
&lt;p&gt;&quot;&amp;gt;&lt;br/&gt;
  ...&lt;br/&gt;
 &amp;lt;/spring:bind&amp;gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I hope this analysis makes sense. I have confirmed that this bug occurs in Spring 1.2.8 using the scenario I described. I have not verified this scenario occurs on Spring 2.0.&lt;/p&gt;</comment>
                            <comment id="20125" author="pmularien" created="Thu, 5 Oct 2006 23:32:21 +0000"  >&lt;p&gt;Sorry, for clarification purposes - my comment applies to the NoSuchMethodError mentioned in Erick&apos;s follow-on comment, and not the problem stated in the original bug report. Feel free to spin that error off into a new JIRA issue if you&apos;d like.&lt;/p&gt;</comment>
                            <comment id="20126" author="pmularien" created="Thu, 5 Oct 2006 23:34:36 +0000"  >&lt;p&gt;One more comment &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I note that the NoSuchMethodError was reported (and fixed) in Spring 2.0 as &lt;a href=&quot;https://jira.spring.io/browse/SPR-2427&quot; title=&quot;ExpressionEvaluationUtils doesn&amp;#39;t correctly determine if JSP 2.0 evaluation is possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2427&quot;&gt;&lt;del&gt;SPR-2427&lt;/del&gt;&lt;/a&gt;. I don&apos;t know if there are any plans to backport that bug fix to Spring 1.2.x? If you&apos;re interested, I&apos;d be happy to supply a patch.&lt;/p&gt;</comment>
                            <comment id="20130" author="juergen.hoeller" created="Fri, 6 Oct 2006 00:45:21 +0000"  >&lt;p&gt;Note that putting the JSP API classes on the web application classpath is not J2EE-compliant: The J2EE server itself provides the JSP API that it implements on the common classpath. Some J2EE servers even issue warnings in case of the Servlet or JSP API being present in the web application&apos;s own libraries. Hence, this does not really qualify as a Spring bug; it&apos;s rather a rather strange and unsupported deployment scenario.&lt;/p&gt;

&lt;p&gt;That said, we did address this for Spring 2.0, just in case people are forced to do this by certain frameworks (I heard that MyFaces seems to require this). This is currently not planned to be backported to 1.2, though, since it requires quite a bit of effort (and risk for side effects) in handling the on-the-fly fallback in ExpressionEvaluationUtils. After all, there is no static way to detect the presence of an actual JSP 2.0 implementation; this doesn&apos;t show until you actually call the &quot;PageContext.getExpressionEvaluator()&quot; method and get a NoSuchMethodException.&lt;/p&gt;

&lt;p&gt;So the general recommendation is: Never include a JSP API jar in your web application classpath, in particular not a newer one than your server&apos;s. If a framework requires the JSP 2.0 API to be present, run on a JSP 2.0 compliant server (such as Tomcat 5.x). If you really really insist on running such a framework on a JSP 1.2 server (such as Tomcat 4.x), use Spring 2.0. I suppose this is good enough for such a corner case...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="24169" author="czaleskowsky" created="Tue, 5 Jun 2007 02:03:52 +0000"  >&lt;p&gt;I am seeing this issue too. I can attach a small war that demonstrates it. Is anybody still watching this thread?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 30 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 26 Sep 2006 00:02:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00vpz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5184</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>