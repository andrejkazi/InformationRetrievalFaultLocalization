<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:24:30 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-263/SPR-263.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-263] problem bean of type java.io.File with single constructor-arg</title>
                <link>https://jira.spring.io/browse/SPR-263</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I am having trouble creating a bean of type java.io.File with a single constructor-arg.  The problem is that the bean that is instantiated seems to &quot;double&quot; its argument value.&lt;/p&gt;

&lt;p&gt;Application Context:&lt;br/&gt;
--------------------&lt;br/&gt;
&amp;lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot;&lt;br/&gt;
&quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;beans&amp;gt;&lt;br/&gt;
        &amp;lt;bean id=&quot;dir&quot; class=&quot;java.io.File&quot;&amp;gt;&lt;br/&gt;
                &amp;lt;constructor-arg&amp;gt;&amp;lt;value&amp;gt;test&amp;lt;/value&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;
        &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/beans&amp;gt;&lt;/p&gt;


&lt;p&gt;Test code:&lt;br/&gt;
-------------&lt;br/&gt;
import java.io.File;&lt;br/&gt;
import org.springframework.context.ApplicationContext;&lt;br/&gt;
import org.springframework.context.support.FileSystemXmlApplicationContext;&lt;/p&gt;

&lt;p&gt;public class Test {&lt;br/&gt;
        public static void main(String[] args) throws Exception &lt;/p&gt;
{
                File f1 = new File(&quot;test&quot;);
                System.out.println(f1.getAbsolutePath());
                ApplicationContext ac = new FileSystemXmlApplicationContext(&quot;applicationContext.xml&quot;);
                File f2 = (File)ac.getBean(&quot;dir&quot;);
                System.out.println(f2.getAbsolutePath());

        }
&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;Abbreviated Output from code:&lt;br/&gt;
------------------------------&lt;/p&gt;

&lt;p&gt;run:&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; /home/vickeryj/temp/springTest/test&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; /home/vickeryj/temp/springTest/test/test&lt;/p&gt;


&lt;p&gt;In short it seems to me that both println statements should be the same, however the bean retrieved from the application context has a path of &quot;test/test&quot; rather than the value of &quot;test&quot; which I passed in.  &lt;/p&gt;

&lt;p&gt;Can anyone recreate this?&lt;/p&gt;</description>
            <key id="10467">SPR-263</key>
            <summary>problem bean of type java.io.File with single constructor-arg</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="vickeryj">Joshua Vickery</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 Aug 2004 08:33:11 +0000</created>
                <updated>Mon, 23 May 2016 10:56:03 +0000</updated>
                            <resolved>Tue, 17 Aug 2004 09:09:01 +0000</resolved>
                                    <version>1.0.2</version>
                                    <fixVersion>1.1 RC2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="10779" author="juergen.hoeller" created="Sat, 14 Aug 2004 04:30:52 +0000"  >&lt;p&gt;This is expected behavior: If you specify a constructor-arg without index, the greediest constructor that can be satisfied with the given arguments will be invoked (matching the arguments by type). In the case of java.io.File, this is the File(String parent, String child) constructor: Your String argument matches both by type, so the algorithm uses that constructor.&lt;/p&gt;

&lt;p&gt;To get the behavior you want, specify a constructor-arg with index:&lt;/p&gt;

&lt;p&gt;&amp;lt;beans&amp;gt; &lt;br/&gt;
  &amp;lt;bean id=&quot;dir&quot; class=&quot;java.io.File&quot;&amp;gt; &lt;br/&gt;
    &amp;lt;constructor-arg index=&quot;0&quot;&amp;gt;&amp;lt;value&amp;gt;test&amp;lt;/value&amp;gt;&amp;lt;/constructor-arg&amp;gt; &lt;br/&gt;
  &amp;lt;/bean&amp;gt; &lt;br/&gt;
&amp;lt;/beans&amp;gt; &lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10791" author="colin.sampaleanu" created="Tue, 17 Aug 2004 03:27:21 +0000"  >&lt;p&gt;How in the world can this be considered desirable behaviour, and not a bug? I think I&apos;m missing something.&lt;/p&gt;

&lt;p&gt;The bean definition is passing in only one arg, and there is at least one file constructor which takes only one arg (in this case there are two). Why would it ever be correct for Spring to duplicate that one arg and feed it as two args to the two arg constructor?&lt;/p&gt;

&lt;p&gt;I know that specifying an index resolves this, but what should the index have to do with this case? I think the need to add the index value for this case is unintuitive...&lt;/p&gt;

&lt;p&gt;Colin&lt;/p&gt;</comment>
                            <comment id="10792" author="colin.sampaleanu" created="Tue, 17 Aug 2004 03:30:31 +0000"  >&lt;p&gt;Even the DTD doesn&apos;t give the impression that the index is necessary for this case:&lt;/p&gt;

&lt;p&gt;&quot;&quot;&quot;&lt;br/&gt;
	The constructor-arg tag can have an optional index attribute,&lt;br/&gt;
	to specify the exact index in the constructor argument list. Only needed&lt;br/&gt;
	to avoid ambiguities, e.g. in case of 2 arguments of the same type.&lt;br/&gt;
&quot;&quot;&quot;&lt;/p&gt;

&lt;p&gt;I will update the docs and DTD, I guess, since I presume this can&apos;t be fixed for 1.1, but I think this should be reopened as a bug...&lt;/p&gt;</comment>
                            <comment id="10793" author="juergen.hoeller" created="Tue, 17 Aug 2004 03:34:03 +0000"  >&lt;p&gt;Well, the problem is the semantic meaning of a constructor-arg without index: It will be matched &lt;b&gt;by type&lt;/b&gt;. As it is currently defined, it can also be matched by type multiple times: So if you specify a constructor-arg of type String and there is a constructor that takes two String arguments, both will be matched against that single constructor-arg.&lt;/p&gt;

&lt;p&gt;To change this, we would need to redefine the semantics of a constructor-arg tag without index: Concretely, to match by type but just for one constructor argument, not for multiple constructor arguments. We can certainly change this, but it is strictly speaking not backwards-compatible; I doubt that anyone relies on this behavior, though.&lt;/p&gt;

&lt;p&gt;If we&apos;re gonna change this, we should obviously do this before 1.1 final. I&apos;m not too happy with breaking compatibility in that special case, but I understand that the current behavior is somewhat unintuitive: Thus, there is an argument that it should be changed.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10794" author="colin.sampaleanu" created="Tue, 17 Aug 2004 04:18:34 +0000"  >&lt;p&gt;My opinion is that a supplied arg should never be used more than once, period. Using it twice (or x times, as per present behaviour) simmply doesn&apos;t make sense. If the user does not supply enough args it should just be an error, which is what I think almost eerybody would expect.&lt;/p&gt;

&lt;p&gt;I agree about fixing this for 1.1, and I don&apos;t think anybody would be relying on the present behaviour except by accident.&lt;/p&gt;</comment>
                            <comment id="10795" author="juergen.hoeller" created="Tue, 17 Aug 2004 05:08:41 +0000"  >&lt;p&gt;OK, let&apos;s change this for 1.1 final then. I&apos;ll have a look at it tonight.&lt;/p&gt;

&lt;p&gt;Note that autowiring by constructor still works in the old way, though: For example, if a constructor takes two strategy interfaces, a single matching bean which implements both interfaces can be used for both constructor arguments. In contrast, a constructor-arg without index will not work that way anymore, but just apply for one single argument.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10796" author="juergen.hoeller" created="Tue, 17 Aug 2004 09:09:01 +0000"  >&lt;p&gt;A constructor argument value without index will now just be considered once, rather than matched multiple times. This resolves issues like the java.io.File constructor.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="129477" author="guroo" created="Mon, 23 May 2016 10:56:03 +0000"  >&lt;p&gt;This bug is still exist in Spring 4.1 version, for example:&lt;br/&gt;
&amp;lt;bean id=&quot;blockingQueue&quot; class=&quot;java.util.concurrent.ArrayBlockingQueue&quot; c:capacity=&quot;100&quot; /&amp;gt;&lt;br/&gt;
This definition cause: &quot;Ambiguous constructor argument types&quot;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        30 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 14 Aug 2004 04:30:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>guroo</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04y9r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28926</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>