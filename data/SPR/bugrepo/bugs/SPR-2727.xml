<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:38:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2727/SPR-2727.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2727] Dealing with covariant properties in CachedIntrospectionResults</title>
                <link>https://jira.spring.io/browse/SPR-2727</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I just stumbled over an issue when dealing with a reasonable Java5 feature, that is covariant method overrides.&lt;/p&gt;

&lt;p&gt;Suppose you define a general access interface&lt;/p&gt;

&lt;p&gt;public interface Foo {&lt;br/&gt;
 public Number getVersion();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;and implement it in a bean like this (to my knowledge a really nice by-product of the lang spec extension that came with the introduction of Generics)&lt;/p&gt;

&lt;p&gt;public class Bar implements Foo {&lt;br/&gt;
 private double version;&lt;/p&gt;

&lt;p&gt; public Double getVersion() &lt;/p&gt;
{
 return this.version;
 }

&lt;p&gt; public void setVersion(Double theDouble) &lt;/p&gt;
{
  this.version=theDouble;
 }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;the JavaBeans Introspector will upon reflecting Bar.class return a PropertyDescriptor for property &quot;version&quot; that has type &quot;java.lang.Number&quot;, a read method java.lang.Number Bar.getVersion() and no write method! This leads to surprising NotWritablePropertyExceptions when trying to configure the Bar bean with Spring.&lt;/p&gt;

&lt;p&gt;The attached patch would lead to a CachedIntrospectionResults version that still is conformant to JavaBeans, but can deal with those covariant properties with a (AFAICS) &lt;br/&gt;
minimal processing overhead (one additional &quot;canonical&quot; getter lookup per asymetric propertydescriptor, another one for identifying the corresponding setter).&lt;/p&gt;

&lt;p&gt;This would be really convenient and helpful (and I suppose there will be more such cases when dealing with generics in properties which can&apos;t be easily worked around by adding another getter/setter).&lt;/p&gt;




</description>
            <key id="15244">SPR-2727</key>
            <summary>Dealing with covariant properties in CachedIntrospectionResults</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="drcgjung">Dr. Christoph G. Jung</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 Oct 2006 23:36:48 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:59 +0000</updated>
                            <resolved>Thu, 26 Mar 2009 09:37:09 +0000</resolved>
                                    <version>2.0 final</version>
                                    <fixVersion>2.5.2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="20325" author="drcgjung" created="Tue, 17 Oct 2006 23:37:37 +0000"  >&lt;p&gt;The patch to CachedIntrospectionResults&lt;/p&gt;</comment>
                            <comment id="20495" author="drcgjung" created="Fri, 27 Oct 2006 05:30:06 +0000"  >&lt;p&gt;Better don&#180;t use that attached patch ... weired things will happen.&lt;/p&gt;

&lt;p&gt;I should have known that an implementation of a IMHO dubious and outdated specification (JavaBeans) will most likely be dubious, too!&lt;/p&gt;

&lt;p&gt;PropertyDescriptor uses Soft- and/or Weak-References internally. That means that depending on the classloading/spring configuration setting, e.g., using a lot of lazy-init, the patch will only &lt;b&gt;temporarily&lt;/b&gt; and &lt;b&gt;non-deterministically&lt;/b&gt; affect the cached BeanInfo and secretly reinitialize to its original descriptors when the java.lang.reflect instances have been gc&apos;ed.&lt;/p&gt;

&lt;p&gt;That&#180;s what I call transparent!&lt;/p&gt;

&lt;p&gt;May I&#180;d better file a bug request at java.sun.com to ditch that whole f**ing spec?&lt;/p&gt;

&lt;p&gt;Xcuses&lt;br/&gt;
CGJ&lt;/p&gt;

</comment>
                            <comment id="21105" author="juergen.hoeller" created="Tue, 28 Nov 2006 08:27:46 +0000"  >&lt;p&gt;Indeed, the JavaBeans spec is somewhat outdated when it comes to Java 5 (in particular generics). Not sure what do about this... We might end up having to do our own introspection at some point, ditching the JavaBeans Introspector that the JDK comes with.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21124" author="tortuga" created="Wed, 29 Nov 2006 09:36:28 +0000"  >&lt;p&gt;Is there a way to see if a class extends on abstract class on reflection, then fetch the volatile methods from the abstract class and remove any matching volatile methods from the extended class method list?&lt;/p&gt;

&lt;p&gt;Or could a intermediary method be used by spring which removes volatile methods if there is another non-volatile method of the same name in the class using a method like on this site:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://forums.opensymphony.com/thread.jspa?messageID=99629&amp;amp;tstart=0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forums.opensymphony.com/thread.jspa?messageID=99629&amp;amp;tstart=0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;d really like to use generics. I wish Sun fully implemented generics and didn&apos;t just do some compile time magic. Would fix a lot of these kind of problems. &lt;b&gt;sigh&lt;/b&gt;&lt;/p&gt;</comment>
                            <comment id="21125" author="tortuga" created="Wed, 29 Nov 2006 11:03:02 +0000"  >&lt;p&gt;Looks like you can see what abstract methods a class inherits. Extended class is &apos;RealBaseEntity&apos;, base class is &apos;BaseEntity&apos;:&lt;/p&gt;

&lt;p&gt;RealBaseEntity.getDeclaredMethods()&lt;br/&gt;
      public final void com.test.RealBaseEntity.setId(java.lang.Short)&lt;br/&gt;
      public final java.lang.Short com.test.RealBaseEntity.getId()&lt;br/&gt;
      public volatile void com.test.RealBaseEntity.setId(java.io.Serializable)&lt;br/&gt;
      public volatile java.io.Serializable com.test.RealBaseEntity.getId()&lt;/p&gt;

&lt;p&gt;RealBaseEntity.getSuperclass().getDeclaredMethods()&lt;br/&gt;
      public abstract void com.test.BaseEntity.setId(java.io.Serializable)&lt;br/&gt;
      public abstract java.io.Serializable com.test.BaseEntity.getId()&lt;/p&gt;

&lt;p&gt;I wonder why it creates the volatile methods?&lt;/p&gt;

&lt;p&gt;If the base class has the same parameter and return types as the inheriting class, no volatile classes are creates:&lt;/p&gt;

&lt;p&gt;RealBaseEntity.getDeclaredMethods()&lt;br/&gt;
      public abstract void com.test.BaseEntity.setId(java.lang.Short)&lt;br/&gt;
      public abstract java.lang.Short com.test.BaseEntity.getId()&lt;/p&gt;

&lt;p&gt;RealBaseEntity.getSuperclass().getDeclaredMethods()&lt;br/&gt;
      public abstract void com.test.BaseEntity.setId(java.lang.Short)&lt;br/&gt;
      public abstract java.lang.Short com.test.BaseEntity.getId()&lt;/p&gt;

&lt;p&gt;Interestingly enough, if instead of recompiling both after changing the base class to match types, and instead just compile the base class, the extended class still reports volatile methods, even thought the base class doesn&apos;t. This indicates that this type of reflection is stored in the .class file for the extended type and not collated together:&lt;/p&gt;

&lt;p&gt;RealBaseEntity.getDeclaredMethods()&lt;br/&gt;
      public final void com.test.RealBaseEntity.setId(java.lang.Short)&lt;br/&gt;
      public final java.lang.Short com.test.RealBaseEntity.getId()&lt;br/&gt;
      public volatile void com.test.RealBaseEntity.setId(java.io.Serializable)&lt;br/&gt;
      public volatile java.io.Serializable com.test.RealBaseEntity.getId()&lt;/p&gt;

&lt;p&gt;RealBaseEntity.getSuperclass().getDeclaredMethods()&lt;br/&gt;
      public abstract void com.test.BaseEntity.setId(java.lang.Short)&lt;br/&gt;
      public abstract java.lang.Short com.test.BaseEntity.getId()&lt;/p&gt;

&lt;p&gt;I should try setting some data. I wonder if the &apos;volatile&apos; method appearing there is really a compiler mistake?&lt;/p&gt;

&lt;p&gt;Regardless, it seems like it would be possible to iterate up the chain of superclasses and collate a list of abstract methods, then remove the volatile methods from the list of methods before storing them in the introspection cache for a given class?&lt;/p&gt;</comment>
                            <comment id="43356" author="juergen.hoeller" created="Thu, 26 Mar 2009 09:37:09 +0000"  >&lt;p&gt;This should work since Spring 2.5.2 already, where we introduced resolution of generic property types... &lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10011">
                    <name>Depends</name>
                                                                <inwardlinks description="is depended on by">
                                        <issuelink>
            <issuekey id="15569">SPR-2882</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="24516">SPR-5254</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12037" name="patch.txt" size="2562" author="drcgjung" created="Tue, 17 Oct 2006 23:37:37 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        7 years, 40 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 28 Nov 2006 08:27:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04rv3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27888</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>