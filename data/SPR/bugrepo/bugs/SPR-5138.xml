<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:37:15 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-5138/SPR-5138.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-5138] @Configurable does not work when type is already loaded due to Java bytecode verification</title>
                <link>https://jira.spring.io/browse/SPR-5138</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;
									&lt;ul&gt;
										&lt;li&gt;The dependency class&lt;br/&gt;
public class Dependency {&lt;br/&gt;
	@Override&lt;br/&gt;
	public String toString() 
{
		return &quot;Dependency bean&quot;;
	}
&lt;p&gt;}&lt;/p&gt;&lt;/li&gt;
									&lt;/ul&gt;
									&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;
									&lt;ul&gt;
										&lt;li&gt;The parent domain class&lt;br/&gt;
import javax.annotation.Resource;&lt;/li&gt;
									&lt;/ul&gt;
									&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;import org.springframework.beans.factory.annotation.Configurable;&lt;/p&gt;

&lt;p&gt;@Configurable&lt;br/&gt;
public class Parent {&lt;br/&gt;
	@Resource&lt;br/&gt;
	protected Dependency dependency;&lt;br/&gt;
}&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;
									&lt;ul&gt;
										&lt;li&gt;The child domain class&lt;br/&gt;
public class Child extends Parent {&lt;br/&gt;
}&lt;/li&gt;
									&lt;/ul&gt;
									&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;
									&lt;ul&gt;
										&lt;li&gt;The context file (context.xml)&lt;br/&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;br/&gt;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&lt;br/&gt;
	xsi:schemaLocation=&quot;&lt;br/&gt;
		&lt;a href=&quot;http://www.springframework.org/schema/beans&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/beans&lt;/a&gt; &lt;a href=&quot;http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&lt;/a&gt;&lt;br/&gt;
		&lt;a href=&quot;http://www.springframework.org/schema/context&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/context&lt;/a&gt; &lt;a href=&quot;http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/context/spring-context-2.5.xsd&lt;/a&gt;&quot;&amp;gt;&lt;/li&gt;
									&lt;/ul&gt;
									&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	&amp;lt;!-- Switch on the load-time weaving --&amp;gt;&lt;br/&gt;
	&amp;lt;context:load-time-weaver /&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!-- Apply dependency injection	to non-managed classes annotated with the @Configurable --&amp;gt;&lt;br/&gt;
	&amp;lt;context:spring-configured /&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!-- Activates various annotations to be detected in bean classes --&amp;gt;&lt;br/&gt;
	&amp;lt;context:annotation-config /&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;dependency&quot; class=&quot;Dependency&quot; /&amp;gt;&lt;br/&gt;
&amp;lt;/beans&amp;gt;&lt;/p&gt;


&lt;p&gt;Now the problem... The dependency injection works fine with the domain objects are created like this:&lt;/p&gt;

&lt;p&gt;      Parent bean = new Parent();&lt;/p&gt;

&lt;p&gt;                 or this:&lt;/p&gt;

&lt;p&gt;      Child bean = new Child();&lt;/p&gt;


&lt;p&gt;However, it will fail with the following statement (ie. the dependency field will be null (not injected) :&lt;/p&gt;

&lt;p&gt;        Parent bean = new Child();&lt;/p&gt;

&lt;p&gt;Also, I&apos;ve found that if the following statements are combined, it will fail too:&lt;/p&gt;

&lt;p&gt;        Parent bean = new Parent();&lt;br/&gt;
        Parent bean2 = new Child();&lt;/p&gt;


&lt;p&gt;Below are some test cases to demonstrate this problem:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;Demonstrate successful injection&lt;br/&gt;
import static org.junit.Assert.assertNotNull;&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;import org.junit.Test;&lt;br/&gt;
import org.junit.runner.RunWith;&lt;br/&gt;
import org.springframework.test.context.ContextConfiguration;&lt;br/&gt;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&lt;/p&gt;

&lt;p&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;br/&gt;
@ContextConfiguration(locations = &lt;/p&gt;
{ &quot;classpath:context.xml&quot; }
&lt;p&gt;)&lt;br/&gt;
public final class PassTest {&lt;br/&gt;
	@Test&lt;br/&gt;
	public final void case1() &lt;/p&gt;
{
		Parent bean = new Parent();
		assertNotNull(bean.dependency);
	}

&lt;p&gt;	@Test&lt;br/&gt;
	public final void case2() &lt;/p&gt;
{
		Child bean = new Child();
		assertNotNull(bean.dependency);
	}
&lt;p&gt;}&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;Demonstrate injection failure&lt;br/&gt;
import static org.junit.Assert.assertNotNull;&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;import org.junit.Test;&lt;br/&gt;
import org.junit.runner.RunWith;&lt;br/&gt;
import org.springframework.test.context.ContextConfiguration;&lt;br/&gt;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&lt;/p&gt;

&lt;p&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;br/&gt;
@ContextConfiguration(locations = &lt;/p&gt;
{ &quot;classpath:context.xml&quot; }
&lt;p&gt;)&lt;br/&gt;
public final class FailTest {&lt;br/&gt;
	@Test&lt;br/&gt;
	public final void case3() &lt;/p&gt;
{
		Parent bean = new Child();
		assertNotNull(bean.dependency);  // Will fail!!!  Why??!!!
	}
&lt;p&gt;}&lt;/p&gt;</description>
            <key id="23843">SPR-5138</key>
            <summary>@Configurable does not work when type is already loaded due to Java bytecode verification</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="vvvngo">Don Ngo</reporter>
                        <labels>
                    </labels>
                <created>Tue, 2 Sep 2008 09:17:34 +0000</created>
                <updated>Tue, 22 Sep 2015 17:34:36 +0000</updated>
                            <resolved>Tue, 22 Sep 2015 17:34:36 +0000</resolved>
                                    <version>2.5.5</version>
                                                    <component>Core:AOP</component>
                        <due></due>
                            <votes>5</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="39396" author="vvvngo" created="Tue, 2 Sep 2008 09:25:42 +0000"  >&lt;p&gt;This is show-stopper for me.  I hope it will be addressed soon...&lt;/p&gt;</comment>
                            <comment id="39408" author="vvvngo" created="Wed, 3 Sep 2008 01:39:05 +0000"  >&lt;p&gt;Here&apos;s another failed test case to try:&lt;/p&gt;

&lt;p&gt;import static org.junit.Assert.assertNotNull;&lt;/p&gt;

&lt;p&gt;import org.junit.Test;&lt;br/&gt;
import org.junit.runner.RunWith;&lt;br/&gt;
import org.springframework.test.context.ContextConfiguration;&lt;br/&gt;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&lt;/p&gt;

&lt;p&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;br/&gt;
@ContextConfiguration(locations = &lt;/p&gt;
{ &quot;classpath:context.xml&quot; }
&lt;p&gt;)&lt;br/&gt;
public final class FailTest2 {&lt;br/&gt;
	@Test&lt;br/&gt;
	public final void case4() &lt;/p&gt;
{
		Child bean = new Child();
		// Strangely, uncommenting the line below will cause the test to fail at
		// that same line also! :(
		// assertNotNull(bean.dependency);
		testInjection(bean);
	}

&lt;p&gt;	private static void testInjection(Parent bean) &lt;/p&gt;
{
		assertNotNull(bean.dependency);
	}
&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="39416" author="vvvngo" created="Wed, 3 Sep 2008 05:34:20 +0000"  >&lt;p&gt;Here&apos;s another test class to demonstrate that combining a working test case with one that failed into a single test class will cause both test cases to fail:&lt;/p&gt;

&lt;p&gt;import static org.junit.Assert.assertNotNull;&lt;/p&gt;

&lt;p&gt;import org.junit.Test;&lt;br/&gt;
import org.junit.runner.RunWith;&lt;br/&gt;
import org.springframework.test.context.ContextConfiguration;&lt;br/&gt;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&lt;/p&gt;

&lt;p&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;br/&gt;
@ContextConfiguration(locations = &lt;/p&gt;
{ &quot;classpath:context.xml&quot; }
&lt;p&gt;)&lt;br/&gt;
public final class FailTest3 {&lt;br/&gt;
	@Test&lt;br/&gt;
	public final void case1() &lt;/p&gt;
{
		Parent bean = new Parent();
		assertNotNull(bean.dependency);
	}

&lt;p&gt;	@Test&lt;br/&gt;
	public final void case3() &lt;/p&gt;
{
		Parent bean = new Child();
		assertNotNull(bean.dependency);
	}
&lt;p&gt;}&lt;/p&gt;



&lt;p&gt;And here a test console program to eliminate the possibility that this issue may only occur while running with JUnit:&lt;/p&gt;

&lt;p&gt;import java.util.logging.Logger;&lt;/p&gt;

&lt;p&gt;import org.springframework.context.support.ClassPathXmlApplicationContext;&lt;/p&gt;

&lt;p&gt;public final class AopTest {&lt;br/&gt;
	private static Logger logger = Logger.getAnonymousLogger();&lt;/p&gt;

&lt;p&gt;	public static void main(String[] args) throws Exception &lt;/p&gt;
{
		new ClassPathXmlApplicationContext(&quot;context.xml&quot;);
		pass();
		fail();
	}

&lt;p&gt;	private static void pass() &lt;/p&gt;
{
		Child bean = new Child();
		if (bean.dependency == null)
			logger.severe(&quot;Injection failure&quot;);
	}

&lt;p&gt;	private static void fail() &lt;/p&gt;
{
		Parent bean = new Child();
		if (bean.dependency == null)
			logger.severe(&quot;Injection failure&quot;);
	}
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;And here&apos;s the result from the above test program:&lt;/p&gt;

&lt;p&gt;Sep 3, 2008 1:26:43 PM AopTest pass&lt;br/&gt;
SEVERE: Injection failure&lt;br/&gt;
Sep 3, 2008 1:26:43 PM AopTest fail&lt;br/&gt;
SEVERE: Injection failure&lt;/p&gt;</comment>
                            <comment id="39557" author="aclement" created="Thu, 11 Sep 2008 00:53:00 +0000"  >&lt;p&gt;The problem here appears to be that some kinds of reference to the Child class cause it to be loaded before the application context is built, setup, and the classloader is instrumented.  These references seem to trigger the Java verifier to resolve some types very early.  If this happens the weaver cannot do its job.  &lt;/p&gt;

&lt;p&gt;Some cases can be made to pass by changing the way the types are referred to in a method.  For example, in the final attached testcase, it will pass if modified to change the test in the fail() case from:&lt;/p&gt;

&lt;p&gt;if (bean.dependency==null)&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;if (((Child)bean).dependency)==null)&lt;/p&gt;

&lt;p&gt;with this change, both cases pass (Child did not get loaded too early).&lt;/p&gt;

&lt;p&gt;Another alternative is to move the testcode into an inner class and call it once the context has been setup.  This variation of the final test program also works:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;import java.util.logging.Logger;&lt;/p&gt;

&lt;p&gt;import org.springframework.context.support.ClassPathXmlApplicationContext;&lt;/p&gt;

&lt;p&gt;public final class AopTest {&lt;br/&gt;
	private static Logger logger = Logger.getAnonymousLogger();&lt;/p&gt;

&lt;p&gt;	public static void main(String[] args) throws Exception &lt;/p&gt;
{
		new ClassPathXmlApplicationContext(&quot;context.xml&quot;);
		new Tests().pass();
		new Tests().fail();
	}

&lt;p&gt;	static class Tests {&lt;br/&gt;
		private static void pass() &lt;/p&gt;
{
			Child bean = new Child();
			if (bean.dependency == null)
				logger.severe(&quot;Injection failure&quot;);
		}

&lt;p&gt;		private static void fail() &lt;/p&gt;
{
			Parent bean = new Child();
			if (bean.dependency == null)
				logger.severe(&quot;Injection failure&quot;);
		}
&lt;p&gt;	}&lt;br/&gt;
}&lt;/p&gt;
&lt;hr /&gt;</comment>
                            <comment id="39561" author="vvvngo" created="Thu, 11 Sep 2008 02:55:21 +0000"  >&lt;p&gt;Thanks for your comment Andy.  I created these test cases only to to demonstrate the problem.  In practice though, this problem also affect the situations where I need to pass instances of the derived classes to a method that only accept an instance of a base class.  For example, I have a set of classes that represent various type of emails, and another that represent the email service for sending out the emails, as demonstrate be blow:&lt;/p&gt;

&lt;p&gt;/* This class represent a set configurations and is designed to be injected into various classes including the Email class below */&lt;br/&gt;
public class Config {&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;/* This is the base email class */&lt;br/&gt;
public abstract Email {&lt;br/&gt;
   @Resource&lt;br/&gt;
   Config config; // Injected dependency&lt;br/&gt;
   ....&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;/* This represents a text email */&lt;br/&gt;
public abstract class TextEmail extends Email {&lt;br/&gt;
....&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;/* This represents an html email */&lt;br/&gt;
public abstract class HtmlEmail extends Email {&lt;br/&gt;
....&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;/* This is an example concrete email class */&lt;br/&gt;
public class RegistrationEmail extends HtmlEmail {&lt;br/&gt;
...&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;and here&apos;s the email service class:&lt;/p&gt;

&lt;p&gt;public class EmailService {&lt;br/&gt;
    public void send(Email email) &lt;/p&gt;
{
        // Do something to send out the email
        ....
   }
&lt;p&gt;  ....&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;And here&apos;s a example how this is typically use:&lt;/p&gt;

&lt;p&gt;public class UserProcessingClass() {&lt;br/&gt;
   @Resource&lt;br/&gt;
   EmailService emailService; // supplied via injection&lt;br/&gt;
   ....&lt;/p&gt;

&lt;p&gt;   public void register(...) &lt;/p&gt;
{
      ...
       // User registration process...
       RegistrationEmail email = new RegistrationEmail();
      ...
      emailService.send(email);  // This is the same as assigning an derived class instance to a base class and will fail!!!!!!!!!!
      }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Now Andy, based on the example above, do you have any suggestions or work around for this type of usage.&lt;/p&gt;</comment>
                            <comment id="119745" author="juergen.hoeller" created="Tue, 22 Sep 2015 17:34:36 +0000"  >&lt;p&gt;Closing groups of outdated issues. Please reopen if still relevant.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="24345">SPR-5221</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10020">
                    <name>Related</name>
                                            <outwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="22825">SPR-4963</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        1 year, 13 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 11 Sep 2008 00:53:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>juergen.hoeller</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00yrr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5678</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>