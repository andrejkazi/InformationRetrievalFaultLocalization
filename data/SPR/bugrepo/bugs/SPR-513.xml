<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:30:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-513/SPR-513.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-513] DefaultListableBeanFactory.getBeansOfType() returns no results when a proxied class is specified</title>
                <link>https://jira.spring.io/browse/SPR-513</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;The DefaultListableBeanFactory.isBeanTypeMatch() method only considers the value returned bean.getClass() when determining whether the bean type matches the type specified.  Callers of this method must consider that a bean may be a proxied class (like the HttpInvokerProxyFactoryBean) in which case the call to getClass() will return the Proxy instead of the implementing class.&lt;/p&gt;

&lt;p&gt;Since the getBeansOfType method relies on isBeanTypeMatch to determine if a bean is of the specfied type, it must handle the case where a bean is actually a Proxy.  &lt;/p&gt;

&lt;p&gt;The following implementation illustrates a potential solution.  If the call to getBeanTypeMatch() returns false and the RootBeanDefinition of the bean being checked for the specified type is assignable from the specified type, then that bean is included in the result.&lt;/p&gt;

&lt;p&gt;public Map getBeansOfType(Class type, boolean includePrototypes, boolean includeFactoryBeans) throws BeansException {&lt;br/&gt;
    Map result = new HashMap();&lt;br/&gt;
    Iterator it = beanDefinitionNames.iterator();&lt;br/&gt;
    do {&lt;br/&gt;
        if (!it.hasNext())&lt;br/&gt;
            break;&lt;br/&gt;
        String beanName = (String) it.next();&lt;br/&gt;
        RootBeanDefinition rbd = getMergedBeanDefinition(beanName, false);&lt;br/&gt;
        if (!rbd.isAbstract() &amp;amp;&amp;amp; rbd.hasBeanClass() &amp;amp;&amp;amp; (includePrototypes || rbd.isSingleton()))&lt;br/&gt;
            if ((org.springframework.beans.factory.FactoryBean.class).isAssignableFrom(rbd.getBeanClass())) &lt;/p&gt;
{
                if (includeFactoryBeans &amp;amp;&amp;amp; (includePrototypes || isSingleton(beanName)) &amp;amp;&amp;amp; (isBeanTypeMatch(beanName, type) || (type.isAssignableFrom(rbd.getBeanClass()))))
                    addBeanToResultMap(beanName, result);
            }
&lt;p&gt; else if (type == null || type.isAssignableFrom(rbd.getBeanClass()))&lt;br/&gt;
                addBeanToResultMap(beanName, result);&lt;br/&gt;
    } while (true);&lt;br/&gt;
    String singletonNames[] = getSingletonNames();&lt;br/&gt;
    for (int i = 0; i &amp;lt; singletonNames.length; i++) &lt;/p&gt;
{
        String beanName = singletonNames[i];
        RootBeanDefinition rbd = getMergedBeanDefinition(beanName, false);
        if (!containsBeanDefinition(beanName) &amp;amp;&amp;amp; isSingleton(beanName) &amp;amp;&amp;amp; (isBeanTypeMatch(beanName, type) || (type.isAssignableFrom(rbd.getBeanClass())) &amp;amp;&amp;amp; (includeFactoryBeans || !isFactoryBean(beanName))))
            addBeanToResultMap(beanName, result);
    }

&lt;p&gt;    return result;&lt;br/&gt;
}&lt;/p&gt;</description>
            <key id="10816">SPR-513</key>
            <summary>DefaultListableBeanFactory.getBeansOfType() returns no results when a proxied class is specified</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="alexkwolfe">Alex Wolfe</reporter>
                        <labels>
                    </labels>
                <created>Thu, 2 Dec 2004 16:53:08 +0000</created>
                <updated>Tue, 7 Dec 2004 01:35:40 +0000</updated>
                            <resolved>Tue, 7 Dec 2004 01:35:40 +0000</resolved>
                                    <version>1.1.2</version>
                                    <fixVersion>1.1.3</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="11665" author="alexkwolfe" created="Thu, 2 Dec 2004 17:33:22 +0000"  >&lt;p&gt;Upon further inspection, this issue appears to be a bit more involved.&lt;/p&gt;

&lt;p&gt;The Spring Rich Client project&apos;s RemotingSecurityConfigurer class expects the getBeansOfType method to return remoting factory beans.  That class is reponsible for configuring remoting services to authenticate using the logged in user&apos;s name and password.  &lt;/p&gt;

&lt;p&gt;Due to the implementation of AbstractBeanFactory.getType, it is by design that FactoryBean implementations return the type of object being created by the factory, not the factory class itself.  When I request all beans of type FactoryBean, then I get back a number of different classes, none of which are FactoryBeans.  This seems a bit odd. &lt;/p&gt;

&lt;p&gt;Still this problem seems to be more with the code written for the rich client.  Though it does beg the question:  If I want to retrieve objects of type FactoryBean from the ApplicationContext, how do I do it?  &lt;/p&gt;

&lt;p&gt;Also, maybe the JavaDoc on getBeansOfType could be clarified.  Should it be explicitly stated the the includeFactoryBeans parameter will cause the method to return objects that will not be of the specified type? Instead they will be of the type created by the FactoryBean implementation specified in the type parameter.&lt;/p&gt;

&lt;p&gt;Also of importance may be that FactoryBeans who return Proxies return unexpected results when calling the AbstractFactoryBean.getType method.  For FactoryBeans that return proxies, maybe it would be best to get the underlying type of the proxy and return that?  I don&apos;t know the answer.  &lt;/p&gt;

&lt;p&gt;Either way, I&apos;m not really sure this should be a bug against Spring.&lt;/p&gt;</comment>
                            <comment id="11666" author="alexkwolfe" created="Thu, 2 Dec 2004 17:46:40 +0000"  >&lt;p&gt;Sorry.  I&apos;d like to ammend my last post.  In it I claimed:&lt;/p&gt;

&lt;p&gt;When I request all beans of type FactoryBean, then I get back a number of different classes, none of which are FactoryBeans.&lt;/p&gt;

&lt;p&gt;This is inaccurate.  It should instead read:&lt;/p&gt;

&lt;p&gt;When I request all beans of type FactoryBean, then I get no results even though there are beans of type FactoryBean.  This is because getBeansOfType compares the result of AbstractBeanFactory.getType to the requested type.&lt;/p&gt;

&lt;p&gt;The JavaDoc for getBeansOfType reads:&lt;/p&gt;

&lt;p&gt;&quot;If FactoryBean&apos;s getObjectType() returns null and the bean is a singleton, the type of the actually created objects should be evaluated. Prototypes without explicit object type specification should be ignored.&quot;&lt;/p&gt;

&lt;p&gt;If a caller wants beans of type FactoryBean but this method considers the type of the actually created object then the method will be comparing FactoryBean to the class returned by getObjectType().  Unless the FactoryBean returns another FactoryBean of the requested type, then calls to this method for FactoryBeans will always yield zero results.&lt;/p&gt;

&lt;p&gt;I stand by my original fix suggestion.&lt;/p&gt;</comment>
                            <comment id="11703" author="juergen.hoeller" created="Tue, 7 Dec 2004 01:35:40 +0000"  >&lt;p&gt;I&apos;ve just reworked getBeansOfType to detect a passed-in type that refers to a FactoryBean itself rather than the created object. In that case, it will return all matching FactoryBean instances in the result map, with &quot;&amp;amp;&quot; prefixes before the bean names (the identifier for a FactoryBean itself). If the passed-in type is not assignable to FactoryBean, normal behavior applies (as before).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        12 years, 4 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 7 Dec 2004 01:35:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04xv3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28860</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>