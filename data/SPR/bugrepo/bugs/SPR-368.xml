<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:03:55 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-368/SPR-368.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-368] AOP proxy creation breaks property initialisation</title>
                <link>https://jira.spring.io/browse/SPR-368</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Creation of a simple AOP proxy using the auto-proxy-creator breaks property initialisation for a bean where one constructor calls another constructor to set a member to a default value.&lt;/p&gt;

&lt;p&gt;Check the attached source code for an example.&lt;/p&gt;

&lt;p&gt;Erwin&lt;/p&gt;</description>
            <key id="10616">SPR-368</key>
            <summary>AOP proxy creation breaks property initialisation</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robh">Rob Harrop</assignee>
                                    <reporter username="klr8">Erwin Vervaet</reporter>
                        <labels>
                    </labels>
                <created>Mon, 4 Oct 2004 06:29:46 +0000</created>
                <updated>Wed, 2 Feb 2005 20:53:09 +0000</updated>
                            <resolved>Wed, 2 Feb 2005 20:53:09 +0000</resolved>
                                    <version>1.1 final</version>
                    <version>1.1.1</version>
                                    <fixVersion>1.1.5</fixVersion>
                                    <component>Core:AOP</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="11193" author="klr8" created="Mon, 4 Oct 2004 06:33:46 +0000"  >&lt;p&gt;This zip file contain a package called &quot;bug&quot; with sample code illustrating the issue. There are 4 files in this package:&lt;br/&gt;
bug.xml -&amp;gt; Spring bean definitions&lt;br/&gt;
LogInterceptor.java -&amp;gt; very simple method interceptor&lt;br/&gt;
SpringBug.java -&amp;gt; main class&lt;br/&gt;
TestBean.java -&amp;gt; bean used in sample&lt;/p&gt;</comment>
                            <comment id="11205" author="juergen.hoeller" created="Tue, 5 Oct 2004 02:30:20 +0000"  >&lt;p&gt;This is caused by the way CGLIB works: It creates a runtime subclass of your target class for proxies, instantiating those subclasses via the respective default constructor.&lt;/p&gt;

&lt;p&gt;So what you&apos;re experiencing is the following:&lt;br/&gt;
1. A instance of your target class (TestBean) is created.&lt;br/&gt;
2. The instance of your target class is populated (setA call).&lt;br/&gt;
3. A CGLIB proxy for your target class (using a runtime subclass of it) is created.&lt;br/&gt;
4. The constructor of that CGLIB proxy invokes the constructor of its superclass, which is the default constructor of your target class.&lt;br/&gt;
5. The constructor of your target class, invoked for the CGLIB proxy, calls setA with a default value.&lt;br/&gt;
6. The CGLIB proxy delegates setA to the target object, overwriting the value of A with the default value.&lt;br/&gt;
7. Result: Your target object has the default value again, rather than the populated one from step 2.&lt;/p&gt;

&lt;p&gt;I&apos;m aware that the above is highly untuitive. But unfortunately, I don&apos;t see a way to avoid this with CGLIB: It&apos;s a consequence of the way CGLIB works... Note that JDK dynamic proxies don&apos;t show such weird behavior, as they are plain interface-based proxies!&lt;/p&gt;

&lt;p&gt;So I recommend to switch to JDK dynamic proxies, through letting your target classes implement interfaces: In that case, the AOP proxy factory will preferably create JDK dynamic proxies for your targets (as long as you don&apos;t explictly specify &quot;proxyTargetClass=true&quot;).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11206" author="colin.sampaleanu" created="Tue, 5 Oct 2004 03:36:48 +0000"  >&lt;p&gt;Ughhh, this is nasty if there&apos;s no workaround. We can&apos;t really expect people to know if classes they are proxying (for which they may not have source) do internal calls between constructors.&lt;/p&gt;</comment>
                            <comment id="11207" author="euxx" created="Tue, 5 Oct 2004 04:03:33 +0000"  >&lt;p&gt;Actually in most cases it is possible to detect if constructor is changing some properties or calling other nondefault constructors.&lt;/p&gt;</comment>
                            <comment id="11213" author="klr8" created="Tue, 5 Oct 2004 05:48:27 +0000"  >&lt;p&gt;Would it be impossible to defer proxy-&amp;gt;target delegation untill after the proxy is fully constructed using a state flag or something?&lt;br/&gt;
That way you could prevent the construction of the proxy messing with the state of the target, which seems logical.&lt;/p&gt;

&lt;p&gt;Erwin&lt;/p&gt;</comment>
                            <comment id="11219" author="herbyderby" created="Tue, 5 Oct 2004 12:20:11 +0000"  >&lt;p&gt;There is a workaround, as suggested above. Have a state flag in your interceptor which is set once the object has been constructed. Until that time, dispatch all method calls to the base class via the MethodProxy &quot;invokeSuper&quot; method (instead of &quot;invoke&quot;). Hibernate does exactly this in their proxy implementation.&lt;/p&gt;

&lt;p&gt;CGLIB used to ignore all methods invoked via the constructor, but it is useful to be able to capture them, sometimes. Just maybe not for Spring.&lt;/p&gt;

&lt;p&gt;Let me know if you need help putting a patch together.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;</comment>
                            <comment id="11255" author="juergen.hoeller" created="Sun, 10 Oct 2004 08:36:28 +0000"  >&lt;p&gt;Fixed by Rob Harrop, committed to CVS.&lt;/p&gt;</comment>
                            <comment id="11525" author="klr8" created="Wed, 17 Nov 2004 06:17:16 +0000"  >&lt;p&gt;I retested with 1.1.2 and the problem is still there...?&lt;br/&gt;
Should this be reopened?&lt;/p&gt;

&lt;p&gt;Erwin&lt;/p&gt;</comment>
                            <comment id="11545" author="robh" created="Thu, 18 Nov 2004 19:13:08 +0000"  >&lt;p&gt;Re-opened for investigation.&lt;/p&gt;</comment>
                            <comment id="11566" author="juergen.hoeller" created="Sun, 21 Nov 2004 22:04:21 +0000"  >&lt;p&gt;Looks like this requires special support in CGLIB. As it is unlikely to get a stable CGLIB update in time for 1.1.3, we will target this for 1.2 RC1 instead.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11938" author="vloka" created="Mon, 10 Jan 2005 08:38:26 +0000"  >&lt;p&gt;I have run into a similar situation.&lt;br/&gt;
I have a webapp with a SimpleController (MultiActionController) as an entry point. The method name resolver for this SimpleController is PropertiesMethodNameResolver. I am using &quot;org.springframework.aop.framework.ProxyFactoryBean&quot; to intercept methods on this controller.&lt;/p&gt;

&lt;p&gt;When I run the webapp, the &quot;enhanced&quot; simple controller uses the default InternalPathMethodNameResolver instead of the configured PropertiesMethodNameResolver.&lt;/p&gt;

&lt;p&gt;Are there any other known negative consequences to intercepting methods using springframework&apos;s ProxyFactoryBean ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Vasanth.&lt;/p&gt;</comment>
                            <comment id="11946" author="robh" created="Tue, 11 Jan 2005 01:19:15 +0000"  >&lt;p&gt;Vasanth,&lt;/p&gt;

&lt;p&gt;There are no real drawbacks to intercepting methods at all with Spring AOP, it is just in the case of the CGLIB proxy when proxying a class rather than an interface there is potential for state to be reset.&lt;/p&gt;

&lt;p&gt;To avoid this you should use the standard, and recommended, mechanism of using interfaces rather than classes for your proxies. In general, I would also recommend that you use thr JDK Proxy based proxies unless performance is a real issue. The Proxy-based approach is substantially simpler than the CGLIB approach and is therefore easier to maintain and debug.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="12216" author="robh" created="Wed, 2 Feb 2005 20:53:09 +0000"  >&lt;p&gt;Fixed for both advised and unadvised methods called inside the constructor. Uses new features in CGLIB 2.1 to skip interception during construction for all methods. Tests to verify in CglibProxyTests are testMethodInvocationDuringConstructor and testUnadvisedProxyCreationWithCallDuringConstructor.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="10264" name="bug.zip" size="1550" author="klr8" created="Mon, 4 Oct 2004 06:33:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 48 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Oct 2004 02:30:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i03o4f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21450</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>