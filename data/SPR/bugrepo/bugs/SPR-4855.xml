<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:49:33 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-4855/SPR-4855.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-4855] Migrate Repeat and Retry from Spring Batch</title>
                <link>https://jira.spring.io/browse/SPR-4855</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Migrate Repeat and Retry from Spring Batch.  They are almost completely self-contained now (on trunk), so it shouldn&apos;t be a tough job - just need to decide where to put them.  Maybe the tests might have some batch dependencies, but they would be easily factored out.  There is also a dependency on some utility stuff in org.springframework.batch.support which would need to be moved over or equivalents provided in core.&lt;/p&gt;

&lt;p&gt;The only real work will be migrating the StatefulRetryOperationsInterceptor (very useful).  It currently depends on ItemKeyGenerator and NewItemIdentifier, for good reasons, so equivalents will have to be provided.  When this is refactored it might also be a good idea to revisit the whole stateful retry concept - it could be implemented as an extension of the RetryOperations interface instead of through a callback / policy pairing as it is now.&lt;/p&gt;</description>
            <key id="22271">SPR-4855</key>
            <summary>Migrate Repeat and Retry from Spring Batch</summary>
                <type id="2" iconUrl="https://jira.spring.io/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="cbeams">Chris Beams</assignee>
                                    <reporter username="david_syer">Dave Syer</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 May 2008 01:28:16 +0000</created>
                <updated>Tue, 28 Feb 2012 04:38:49 +0000</updated>
                            <resolved>Tue, 28 Feb 2012 04:38:48 +0000</resolved>
                                    <version>2.5.4</version>
                                                    <component>Core</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                    <timeoriginalestimate seconds="0">0d</timeoriginalestimate>
                            <timeestimate seconds="0">0d</timeestimate>
                                        <comments>
                            <comment id="36008" author="david_syer" created="Fri, 23 May 2008 01:29:21 +0000"  >&lt;p&gt;I would like to deprecate the existing implementations in Spring Batch 2.0 (with replacements in Spring Core 3.0), and then remove in 2.1.&lt;/p&gt;</comment>
                            <comment id="41761" author="ramnivas" created="Fri, 19 Dec 2008 05:30:02 +0000"  >&lt;p&gt;When moving the retry support to Spring Core, please consider making RetryCallback.doWithRetry() declare to throw Thowable (instead of current Exception). That will make writing callbacks much simpler and less error-prone for the cases where the underlying operation declares to throw Throwable (e.g. AspectJ proceed(), AOP alliance interceptor, Spring&apos;s MethodBeforeAdvice.* etc., and dynamic proxy&apos;s InvocationHandler.handler()). Currently, users need to catch the exception and if it is an Error, wrap it in a subtype of Exception. Unless done with good care, Errors may get translated into Exception (runtime or checked)--not a good thing.&lt;/p&gt;

&lt;p&gt;Case in point, here is a snippet from an aspect that advises certain join points to automatically retry.&lt;/p&gt;

&lt;p&gt;   @Around(&quot;retryOperation()&quot;)&lt;br/&gt;
   public Object retry(final ProceedingJoinPoint pjp) throws Throwable {&lt;br/&gt;
       RetryCallback&amp;lt;Object&amp;gt; worker = new RetryCallback&amp;lt;Object&amp;gt;() {&lt;br/&gt;
           public Object doWithRetry(RetryContext retryContext) throws Exception {&lt;br/&gt;
               try &lt;/p&gt;
{
                   return pjp.proceed();
               }
&lt;p&gt; catch (Exception ex) &lt;/p&gt;
{
                   throw ex;
               }
&lt;p&gt; catch (Throwable ex) &lt;/p&gt;
{ // can only be Error
                   throw new RetryWrappedException(ex);
               }
&lt;p&gt;          }};&lt;/p&gt;

&lt;p&gt;       try &lt;/p&gt;
{
           return retryTemplate.execute(worker);
       }
&lt;p&gt; catch (RetryWrappedException ex) &lt;/p&gt;
{
           throw ex.getCause();
       }
&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;br/&gt;
class RetryWrappedException extends Exception {&lt;br/&gt;
   public RetryWrappedException(Throwable ex) &lt;/p&gt;
{
       super(ex);
   }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;If RetryCallback.doWithRetry() were to declare to throw Throwable, the advice will be much nicer (and more importantly, a lot less error-prone), and won&apos;t need RetryWrappedException.&lt;/p&gt;

&lt;p&gt;   @Around(&quot;retryOperation()&quot;)&lt;br/&gt;
   public Object retry(final ProceedingJoinPoint pjp) throws Throwable {&lt;br/&gt;
       RetryCallback&amp;lt;Object&amp;gt; worker = new RetryCallback&amp;lt;Object&amp;gt;() {&lt;br/&gt;
           public Object doWithRetry(RetryContext retryContext) throws Exception {&lt;br/&gt;
              return pjp.proceed();&lt;br/&gt;
          }};&lt;br/&gt;
       return retryTemplate.execute(worker);&lt;br/&gt;
   }&lt;/p&gt;</comment>
                            <comment id="41769" author="david_syer" created="Sat, 20 Dec 2008 07:54:29 +0000"  >&lt;p&gt;Actually, I thought I was neutral about this, but I looked back through the Batch versions and RetryCallback used to declare that it throws Throwable (in 1.x), and that didn&apos;t make sense so we changed it in 2.0.  In practice no non-Exception is really retryable (unless the user has implemented a custom Throwable that is not an Exception, which I&apos;m not sure is really best practice, and is certainly rare).  In particular an Error should be fatal (that&apos;s the convention anyway), so it shouldn&apos;t be retried.  So I think Exception is the right choice, and if it means that corner cases like the AOP interceptor above have to catch and wrap, then that is to be expected (maybe actually it should throw an Error above if the Throwable is not an Exception - at least it should be IllegalStateException because it shouldn&apos;t happen).&lt;/p&gt;</comment>
                            <comment id="42208" author="ramnivas" created="Sat, 24 Jan 2009 15:50:53 +0000"  >&lt;p&gt;While I agree that non-Exception (i.e. Error) shouldn&apos;t be retried, I do not agree that this should be enforced by the callback &amp;#8211; it should be a job of a RetryPolicy (such as ExceptionClassifierRetryPolicy) to make such a decision. The callback itself should be neutral i.e. if it has been called, it should be just execute its work and throw whatever exceptions/errors come along. In fact, the current design (&quot;throws Exception&quot;) forces catching Errors and demoting them to a wrapped Exception. Now a a caller (or a RetryPolicy) is likely to treat the caught exception as a normal exception (i.e. not an Error), and likely make an erroneous choice.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; maybe actually it should throw an Error above if the Throwable is not an Exception &lt;/p&gt;

&lt;p&gt;How can it throw an Error if the doWithRetry() declares to throw Exception?&lt;/p&gt;</comment>
                            <comment id="42209" author="ramnivas" created="Sat, 24 Jan 2009 16:05:27 +0000"  >&lt;p&gt;Noticed an error in my second snippet. It should be:&lt;/p&gt;

&lt;p&gt;@Around(&quot;retryOperation()&quot;)&lt;br/&gt;
public Object retry(final ProceedingJoinPoint pjp) throws Throwable {&lt;br/&gt;
    RetryCallback&amp;lt;Object&amp;gt; worker = new RetryCallback&amp;lt;Object&amp;gt;() {&lt;br/&gt;
        public Object doWithRetry(RetryContext retryContext) throws Throwable {&lt;br/&gt;
            return pjp.proceed();&lt;br/&gt;
        }};&lt;br/&gt;
    return retryTemplate.execute(worker);&lt;br/&gt;
}&lt;/p&gt;</comment>
                            <comment id="42210" author="ramnivas" created="Sat, 24 Jan 2009 16:44:07 +0000"  >&lt;p&gt;My point about not able to throw Error is not valid since an Error can always be thrown without declaring as such. I still, however, think that dealing with retry-ability of exception should be upto a RetryPolicy and not the callback template.&lt;/p&gt;</comment>
                            <comment id="42641" author="juergen.hoeller" created="Wed, 18 Feb 2009 01:41:43 +0000"  >&lt;p&gt;I&apos;m pushing this back to Spring 3.2, since Spring Batch 2.0 is now still based on Spring 2.5... and we have plenty of new code to deal with in 3.0 M3 already. I hope this works for you.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="46942" author="david_syer" created="Wed, 23 Sep 2009 19:08:06 +0000"  >&lt;p&gt;See &lt;a href=&quot;https://jira.spring.io/browse/BATCH-973&quot; title=&quot;Switch RetryPolicy back to Throwable instead of Exception as in 1.x&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BATCH-973&quot;&gt;&lt;del&gt;BATCH-973&lt;/del&gt;&lt;/a&gt; for more details of the Throwable/Exception debate.&lt;/p&gt;</comment>
                            <comment id="76312" author="cbeams" created="Tue, 28 Feb 2012 04:38:49 +0000"  >&lt;p&gt;No longer relevant; see the standalone &lt;a href=&quot;https://github.com/springsource/spring-retry&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/springsource/spring-retry&lt;/a&gt; project&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="42385">SPR-9170</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        4 years, 43 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 19 Dec 2008 05:30:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02tj3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16493</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>