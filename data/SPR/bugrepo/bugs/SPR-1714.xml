<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:43:11 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1714/SPR-1714.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1714] @within() and @annotation() do not match with objects that should match</title>
                <link>https://jira.spring.io/browse/SPR-1714</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;This the configuration:&lt;/p&gt;

&lt;p&gt;    &amp;lt;aop:config&amp;gt;&lt;br/&gt;
        &amp;lt;aop:pointcut id=&quot;withinDeprecated&quot; expression=&quot;@within(annotation)&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;aop:pointcut id=&quot;annotationDeprecated&quot; expression=&quot;@annotation(annotation)&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;aop:aspect ref=&quot;deprecationLogger&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;aop:advice method=&quot;logWarningForUsageOfDeprecatedClass&quot; kind=&quot;before&quot; pointcut-ref=&quot;withinDeprecated&quot;/&amp;gt;&lt;br/&gt;
            &amp;lt;aop:advice method=&quot;logWarningForUsageOfDeprecatedClass&quot; kind=&quot;before&quot; pointcut-ref=&quot;annotationDeprecated&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;/aop:aspect&amp;gt;&lt;br/&gt;
    &amp;lt;/aop:config&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;deprecatedClass&quot; class=&quot;com.apress.beginning_spring.chapter4.annotations.DeprecatedClass&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;classWithDeprecatedMethod&quot; class=&quot;com.apress.beginning_spring.chapter4.annotations.ClassWithDeprecatedMethod&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;deprecationLogger&quot; class=&quot;com.apress.beginning_spring.chapter4.annotations.DeprecationLogger&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;This it DeprecationLogger:&lt;/p&gt;

&lt;p&gt;public class DeprecationLogger {&lt;br/&gt;
    private static Log log = LogFactory.getLog(DeprecationLogger.class);&lt;/p&gt;

&lt;p&gt;    public void logWarningForUsageOfDeprecatedClass(Deprecated annotation) &lt;/p&gt;
{
        log.info(&quot;Usage of deprecated class or method.&quot;);
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;This is DeprecatedClass:&lt;/p&gt;

&lt;p&gt;@Deprecated&lt;br/&gt;
public class DeprecatedClass {&lt;br/&gt;
    private static Log log = LogFactory.getLog(DeprecatedClass.class);&lt;/p&gt;

&lt;p&gt;    public void doOperation() &lt;/p&gt;
{
        log.info(&quot;Executing deprecated operation.&quot;);
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;This is ClassWithDeprecatedMethod:&lt;/p&gt;

&lt;p&gt;public class ClassWithDeprecatedMethod {&lt;br/&gt;
    @Deprecated public void doDeprecatedOperation() {&lt;/p&gt;

&lt;p&gt;    }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;This is my test case:&lt;/p&gt;

&lt;p&gt;public class DeprecatedClassIntegrationTests extends AbstractDependencyInjectionSpringContextTests {&lt;br/&gt;
    protected String[] getConfigLocations() {&lt;br/&gt;
        return new String[] &lt;/p&gt;
{
            &quot;classpath:deprecated-context.xml&quot;
        }
&lt;p&gt;;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    private DeprecatedClass deprecatedClass;&lt;/p&gt;

&lt;p&gt;    public void setDeprecatedClass(DeprecatedClass deprecatedClass) &lt;/p&gt;
{
        this.deprecatedClass = deprecatedClass;
    }

&lt;p&gt;    private ClassWithDeprecatedMethod classWithDeprecatedMethod;&lt;/p&gt;

&lt;p&gt;    public void setClassWithDeprecatedMethod(ClassWithDeprecatedMethod classWithDeprecatedMethod) &lt;/p&gt;
{
        this.classWithDeprecatedMethod = classWithDeprecatedMethod;
    }

&lt;p&gt;    public void testDeprecatedClassIsAopProxy() &lt;/p&gt;
{
        assertTrue(AopUtils.isAopProxy(this.deprecatedClass));
    }

&lt;p&gt;    public void testClassWithDeprecatedMethodIsAopProxy() &lt;/p&gt;
{
        assertTrue(AopUtils.isAopProxy(this.classWithDeprecatedMethod));
    }

&lt;p&gt;    public void testDoOperation() &lt;/p&gt;
{
        this.deprecatedClass.doOperation();
    }

&lt;p&gt;    public void testDoDeprecatedOperation() &lt;/p&gt;
{
        this.classWithDeprecatedMethod.doDeprecatedOperation();
    }

&lt;p&gt;    private DeprecationLogger deprecationLogger;&lt;/p&gt;

&lt;p&gt;    public void setDeprecationLogger(DeprecationLogger deprecationLogger) &lt;/p&gt;
{
        this.deprecationLogger = deprecationLogger;
    }

&lt;p&gt;    public void testDeprecationLoggerNotAopProxy() &lt;/p&gt;
{
        assertFalse(AopUtils.isAopProxy(deprecationLogger));
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;This test fails on testDeprecatedClassIsAopProxy and testClassWithDeprecatedMethodIsAopProxy while testDoOperation and testDoDeprecatedOperation do not produce any log messages.&lt;/p&gt;

&lt;p&gt;It seems like @within() and @annotation() don&apos;t pick up the annotations on the target classes. Toggle the debug option on the compiler does affect the test results.&lt;/p&gt;</description>
            <key id="13370">SPR-1714</key>
            <summary>@within() and @annotation() do not match with objects that should match</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="adrian.colyer">Adrian Colyer</assignee>
                                    <reporter username="devijvers">Steven Devijver</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Feb 2006 22:40:27 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:27 +0000</updated>
                            <resolved>Sun, 23 Jul 2006 21:35:02 +0000</resolved>
                                    <version>2.0 M2</version>
                                    <fixVersion>2.0 RC3</fixVersion>
                                    <component>Core:AOP</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="17185" author="adrian.colyer" created="Fri, 14 Apr 2006 03:29:58 +0000"  >&lt;p&gt;This is caused by a bug in the AspectJ implementation of Java15AnnotationFinder. It asks Bcel for all the annotations on a type / member and builds a set of AJ ResolvedTypes from them. However... the Bcel method Annotation.getTypeName() called by the finder has special logic to &quot;chop&quot; type names in the java.lang package, removing the java.lang prefix. AspectJ then tries to match &quot;Deprecation&quot; against &quot;java.lang.Deprecation&quot; and finds that the types do not match. The solution is to change AspectJ to call Annotation.getTypeSignature() which will not chop the name.&lt;/p&gt;

&lt;p&gt;This issue should only affect matching on annotations defined in the java.lang package.&lt;/p&gt;</comment>
                            <comment id="17186" author="adrian.colyer" created="Fri, 14 Apr 2006 04:34:35 +0000"  >&lt;p&gt;Now fixed in the AspectJ tree, and will be resolved in Spring when a new aspectjweaver.jar is dropped into lib (ie. next time we pick up a new version of AspectJ). Users who need matching on annotations in the java.lang package before this time can always download any aspectj build dated 15/04/06 or later from &lt;a href=&quot;http://www.eclipse.org/aspectj&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.eclipse.org/aspectj&lt;/a&gt; and update aspectjweaver.jar themselves.&lt;/p&gt;

&lt;p&gt;In fixing this I uncovered and fixed a related issue in which the mayNeedDynamicTest operation was returning false for the binding forms of @annotation and @within when it could be statically determined that they always match. In fact Spring needs this to return true so that matching happens on each execution in order to bind the parameter for the advice execution. This is also now fixed in the AspectJ tree.&lt;/p&gt;</comment>
                            <comment id="17635" author="juergen.hoeller" created="Mon, 15 May 2006 09:20:51 +0000"  >&lt;p&gt;Adrian, what&apos;s the state of this issue in AspectJ? I assume this did not make it into AspectJ 1.5.1a... Will we get an AspectJ update in time for Spring 2.0 RC2/final?&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="17781" author="adrian.colyer" created="Tue, 30 May 2006 21:42:02 +0000"  >&lt;p&gt;It&apos;s fixed in AspectJ development builds, but did not make 1.5.1a. It will be in AJ 1.5.2, but we&apos;re not going to be releasing that for a few weeks yet. Users who hit this issue can upgrade aspectjweaver.jar to one from a dev build (this is documented in the reference guide). All that remains for Spring is to upgrade to AspectJ 1.5.2 when it ships - that will be picked up by the 2.1 train now.&lt;/p&gt;</comment>
                            <comment id="17782" author="adrian.colyer" created="Tue, 30 May 2006 21:44:42 +0000"  >&lt;p&gt;moving to fix version 2.1 when we will be able to pick up the AspectJ 1.5.2 release.&lt;/p&gt;</comment>
                            <comment id="18732" author="adrian.colyer" created="Sun, 23 Jul 2006 21:35:02 +0000"  >&lt;p&gt;Aspectj libraries in Spring have been updated to 1.5.2 level (by robh, on July 11th, 2006).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 23 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 14 Apr 2006 03:29:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04urj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28358</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>