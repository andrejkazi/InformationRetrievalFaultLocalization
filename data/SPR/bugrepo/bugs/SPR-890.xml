<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:29:52 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-890/SPR-890.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-890] issue with query.setReadOnly(true) in H3 SessionFactoryUtils#applyTransactionTimeout</title>
                <link>https://jira.spring.io/browse/SPR-890</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I just upgraded my web app to Spring 1.2 RC2 and Hibernate 3.0.1. I updated all spring references to the hibernate3 subpackage and followed the other migration steps.&lt;/p&gt;

&lt;p&gt;When I ran my web app, I noticed a strange and severe issue. Several stateful web requests that were previously working were not persisting to the database after the upgrade. &lt;/p&gt;

&lt;p&gt;I am using Spring MVC. My service API&apos;s that are called from the web controller are wrapped with the following transactional attributes.&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;transactionAttributes&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;props&amp;gt;&lt;br/&gt;
     &amp;lt;prop key=&quot;insert*&quot;&amp;gt;PROPAGATION_REQUIRED&amp;lt;/prop&amp;gt;&lt;br/&gt;
     &amp;lt;prop key=&quot;update*&quot;&amp;gt;PROPAGATION_REQUIRED&amp;lt;/prop&amp;gt;&lt;br/&gt;
     &amp;lt;prop key=&quot;save*&quot;&amp;gt;PROPAGATION_REQUIRED&amp;lt;/prop&amp;gt;&lt;br/&gt;
     &amp;lt;prop key=&quot;*&quot;&amp;gt;PROPAGATION_REQUIRED,readOnly&amp;lt;/prop&amp;gt;&lt;br/&gt;
 &amp;lt;/props&amp;gt;&lt;br/&gt;
&amp;lt;/property&amp;gt;&lt;/p&gt;

&lt;p&gt;With Spring 1.1, Hibernate 2.1.8 the following worked fine in my setup :&lt;/p&gt;

&lt;p&gt;1) user requests a page, edits some data and submits the form&lt;/p&gt;

&lt;p&gt;2) in controller, I call myservice.find(...) &lt;span class=&quot;error&quot;&gt;&amp;#91;a readonly txn&amp;#93;&lt;/span&gt; in onBindAndValidate()/formBackingObject(). The find() method eventually calls getHibernateTemplate().find(..)&lt;/p&gt;

&lt;p&gt;3) if errors present, errors are added by calling errors.reject(..) and Spring MVC framework redisplays the form the user with error messages. The invalid data that was bound to the object before the onBindAndValidate() call are discarded (because txn is readonly) and not saved to the DB.&lt;/p&gt;

&lt;p&gt;4) if no errors are present, service method to save bound domain objects is called : myservice.save(myobj) &lt;span class=&quot;error&quot;&gt;&amp;#91;a non-readonly txn&amp;#93;&lt;/span&gt; which eventually calls getHibernateTemplate().saveOrUpdate(myobj) and the data is persisted to the database by Hibernate.&lt;/p&gt;

&lt;p&gt;With Spring 1.2 RC2, Hibernate 3.0.1 I ran into problems. After running my app through a debugger here&apos;s what I found.&lt;/p&gt;

&lt;p&gt;Basically what is happening with Spring 1.2 RC2/H3 is that in step 2) when getHibernateTemplate().find(..) is called, all objects returned by this query are marked are as org.hibernate.engine.Status.READ_ONLY query.setReadOnly(true) is called.&lt;/p&gt;

&lt;p&gt;org.springframework.orm.hibernate3.HibernateTemplate#find(..)&lt;br/&gt;
   --&amp;gt;HibernateTemplate#prepareQuery(..)&lt;br/&gt;
      ---&amp;gt;SessionFactoryUtils.applyTransactionTimeout(..) &lt;br/&gt;
         ---&amp;gt;&lt;br/&gt;
if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {&lt;br/&gt;
  query.setReadOnly(true);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;I noticed that the above code is new to the hibernate3 versions of the classes and did not exist in the &quot;classic&quot; H2 version.&lt;/p&gt;

&lt;p&gt;Now when I reach step 4), getHibernateTemplate().saveOrUpdate(myobj) is eventually called via myservice.save(myobj). However since myobj was returned by myservice.find() is step 2) and marked as readonly, when saveOrUpdate is called on it, the changes are not persisted to the database.&lt;/p&gt;

&lt;p&gt;Note that if I declare my service API txn attibutes as&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;transactionAttributes&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;props&amp;gt;&lt;br/&gt;
     &amp;lt;prop key=&quot;*&quot;&amp;gt;PROPAGATION_REQUIRED&amp;lt;/prop&amp;gt;&lt;br/&gt;
 &amp;lt;/props&amp;gt;&lt;br/&gt;
&amp;lt;/property&amp;gt;&lt;/p&gt;

&lt;p&gt;then the problem is that when invalid data is entered by users, onBindAndValidate does add to the errors instance and the form is redisplayed to the user with error messages but the changes to the bound domain object with bad data is persisted to the database. And this is not desirable.&lt;/p&gt;

&lt;p&gt;Please let me know if I&apos;m missing something.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Sanjiv&lt;/p&gt;</description>
            <key id="11448">SPR-890</key>
            <summary>issue with query.setReadOnly(true) in H3 SessionFactoryUtils#applyTransactionTimeout</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="sjivan">Sanjiv Jivan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 19 Apr 2005 09:40:04 +0000</created>
                <updated>Thu, 21 Apr 2005 04:46:26 +0000</updated>
                            <resolved>Tue, 19 Apr 2005 17:35:24 +0000</resolved>
                                    <version>1.2 RC1</version>
                                    <fixVersion>1.2 final</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13063" author="juergen.hoeller" created="Tue, 19 Apr 2005 17:35:24 +0000"  >&lt;p&gt;OK, so Query.setReadOnly(true) seems to produce persistent objects that are read-only &lt;b&gt;forever&lt;/b&gt;, even when detached. I wasn&apos;t aware of that; well, not really a surprise given the lack of API docs in Hibernate3.&lt;/p&gt;

&lt;p&gt;Anyway, I&apos;ve removed that setReadOnly(true) call for the time being, as we don&apos;t know whether the objects will be modified outside the transaction, even when loaded within a read-only transaction.&lt;/p&gt;

&lt;p&gt;Feel free to give the next nightly snapshot a try (&lt;a href=&quot;http://www.springframework.org/downloads/nightly&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/downloads/nightly&lt;/a&gt;), and let me know whether it works for you then.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="13066" author="sjivan" created="Tue, 19 Apr 2005 18:41:45 +0000"  >&lt;p&gt;Thanks for quickly addressing this. I haven&apos;t been able to verify it with the nightly build because of another issue:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://opensource.atlassian.com/projects/spring/browse/SPR-892&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource.atlassian.com/projects/spring/browse/SPR-892&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ll did however comment out the following code in Spring 1.2 RC1&lt;/p&gt;

&lt;p&gt;SessionFactoryUtils.applyTransactionTimeout(..) :&lt;/p&gt;

&lt;p&gt;if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {&lt;br/&gt;
  query.setReadOnly(true);&lt;br/&gt;
} &lt;/p&gt;

&lt;p&gt;and built locally. Everything ran as expected after doing so.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Sanjiv&lt;/p&gt;</comment>
                            <comment id="13080" author="sjivan" created="Thu, 21 Apr 2005 04:46:26 +0000"  >&lt;p&gt;Verified with Spring build spring-framework-1.2-build.250-20050421.zip (after upgrading to acegi 0.8.2).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 37 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 19 Apr 2005 17:35:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04x1r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28728</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>