<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:50:09 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-135/SPR-135.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-135] No PropertyEditor for java.lang.Boolean available</title>
                <link>https://jira.spring.io/browse/SPR-135</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Spring contains a PropertyEditor that allows Spring to automatically populate boolean properties of JavaBeans, but doesn&apos;t have a PropertyEditor that allows for automatic population of java.lang.Boolean properties using the same syntax.  This property editor would be useful if you want to force a user of a class to configure a Boolean property before the class can be used (rather than specifying default values for the boolean property, which is required if you are using a primitive boolean).&lt;/p&gt;

&lt;p&gt;I can provide a use case for this behavior and a stack trace of the error if needed.&lt;/p&gt;</description>
            <key id="10300">SPR-135</key>
            <summary>No PropertyEditor for java.lang.Boolean available</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="sgarlatm">Matthew Sgarlata</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 May 2004 01:31:26 +0000</created>
                <updated>Thu, 27 May 2004 22:17:31 +0000</updated>
                            <resolved>Thu, 27 May 2004 22:17:31 +0000</resolved>
                                    <version>1.0.1</version>
                                    <fixVersion>1.0.2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="10396" author="juergen.hoeller" created="Fri, 21 May 2004 00:47:57 +0000"  >&lt;p&gt;Primitive types are automatically covered by the standard JavaBeans infrastructure of the JDK; however, their object counterparts are not.&lt;/p&gt;

&lt;p&gt;Beyond the standard JavaBeans editors, Spring provides a selection of additional PropertyEditors in the org.springframework.beans.propertyeditors package. Most of them are automatically applied by BeanWrapperImpl.&lt;/p&gt;

&lt;p&gt;In the case of java.lang.Boolean and all java.lang.Number subclasses, the corresponding editors are &lt;b&gt;not&lt;/b&gt; registered automatically. The main reason is that it&apos;s not clear how to parse an empty String value: Is that an invalid value, or does it indicate setting the property to null?&lt;/p&gt;

&lt;p&gt;The corresponding PropertyEditors are CustomBooleanEditor and CustomNumberEditor. You can easily register those with a BeanWrapper or a DataBinder via the respective &quot;registerCustomEditor&quot; methods, for example in the &quot;initBinder&quot; callback of a command/form web controller.&lt;/p&gt;

&lt;p&gt;CustomNumberEditor and also CustomDateEditor (for java.util.Date) allow for localized resolution of String values, via given NumberFormat respectively DateFormat instances. This is particularly important for binding request parameters in a web environment.&lt;/p&gt;

&lt;p&gt;For bean definitions in an application context, you can implement a BeanFactoryPostProcessor that registers custom PropertyEditors. There&apos;s also a prebuilt CustomEditorConfigurer that allows registration of an editor bean per type.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10397" author="sgarlatm" created="Fri, 21 May 2004 05:53:48 +0000"  >&lt;p&gt;My opinion is that Spring could guess that an empty string should be treated as a null and true and false should be considered true and false, respectively.  I think this behavior would make the framework a little easier to use out-of-the-box.  The definition could always be overriden in the application&apos;s configuration if needed.  I think there is precedent for frameworks making choices like this that will fit most situations, but still allow advanced users to customize behavior if necessary.&lt;/p&gt;</comment>
                            <comment id="10419" author="asenft" created="Thu, 27 May 2004 16:49:08 +0000"  >
&lt;p&gt;Just a remark: Why bothering about empty strings? There should be now the possibility to use &amp;lt;/null&amp;gt; to indicate a true null reference.&lt;/p&gt;

&lt;p&gt;Beside that, I would also agree on providing default editors for Boolean and Number types, using the same format as the according primitives. That should be pretty intuitive and can be overridden if needed.&lt;/p&gt;

&lt;p&gt;Just my 2 cents.&lt;br/&gt;
Andreas&lt;/p&gt;</comment>
                            <comment id="10421" author="juergen.hoeller" created="Thu, 27 May 2004 22:17:31 +0000"  >&lt;p&gt;Added default editors for Boolean and Number objects, basically using special incarnations of CustomBooleanEditor and CustomNumberEditor. CustomNumberEditor uses Integer.valueOf/toString etc for parsing/rendering in this case, rather than a NumberFormat.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        12 years, 31 weeks, 6 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 21 May 2004 00:47:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01zef:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11612</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>