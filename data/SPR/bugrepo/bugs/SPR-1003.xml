<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:58:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1003/SPR-1003.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1003] Introduce OGNL and OgnlExpressionFactoryBean </title>
                <link>https://jira.spring.io/browse/SPR-1003</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;A FactoryBean which can use the powerful OGNL expression language&lt;br/&gt;
with OGNL support,developers can invoke method,static method,static field and some advanced operation straightforward and easy.&lt;/p&gt;

&lt;p&gt;the sourcecode&lt;br/&gt;
/*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Created on 2005-6-2&lt;br/&gt;
 */&lt;br/&gt;
package org.snowway.spring.extension;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;import java.util.Collections;&lt;br/&gt;
import java.util.Hashtable;&lt;br/&gt;
import java.util.Map;&lt;/p&gt;

&lt;p&gt;import org.springframework.beans.BeansException;&lt;br/&gt;
import org.springframework.beans.FatalBeanException;&lt;br/&gt;
import org.springframework.beans.factory.FactoryBean;&lt;br/&gt;
import org.springframework.context.ApplicationContext;&lt;br/&gt;
import org.springframework.context.ApplicationContextAware;&lt;/p&gt;

&lt;p&gt;import ognl.Ognl;&lt;br/&gt;
import ognl.OgnlException;&lt;br/&gt;
/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@author snowway&lt;/li&gt;
	&lt;li&gt;@version $Id$&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;A FactoryBean which can use the powerful OGNL expression language&amp;lt;br&amp;gt;&lt;/li&gt;
	&lt;li&gt;need runtime OGNL support(e.g. ognl-2.6.5.jar)&amp;lt;br&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;the default root object for OGNL expression is ApplicationContext instance&amp;lt;br&amp;gt;&lt;br/&gt;
 */&lt;br/&gt;
public class OgnlExpressionFactoryBean implements FactoryBean,ApplicationContextAware{&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	//the ognl expression&lt;br/&gt;
	private String expression;&lt;/p&gt;

&lt;p&gt;	//the naming context for the evaluation&lt;br/&gt;
	private Map context;&lt;/p&gt;

&lt;p&gt;	private ApplicationContext applicationContext;&lt;/p&gt;

&lt;p&gt;	//the ognl root object,default is ApplicationContext instance&lt;br/&gt;
	private Object root;&lt;/p&gt;

&lt;p&gt;	//is user define custom root object&lt;br/&gt;
	private boolean _hasSetRootExplicit = false;&lt;/p&gt;

&lt;p&gt;	/* (non-Javadoc)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@see org.springframework.context.ApplicationContextAware#setApplicationContext(org.springframework.context.ApplicationContext)&lt;br/&gt;
	 */&lt;br/&gt;
	public void setApplicationContext(ApplicationContext applicationContext)&lt;br/&gt;
			throws BeansException 
{

		this.applicationContext = applicationContext;
		//when no custom root object,use ApplicationContext default
		if(!_hasSetRootExplicit)
			this.root = this.applicationContext;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@param expression the ognl expression to set.&lt;br/&gt;
	 */&lt;br/&gt;
	public void setExpression(String expression) 
{
		this.expression = expression;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@param context the naming context for the evaluation&lt;br/&gt;
	 */&lt;br/&gt;
	public void setContext(Map context) 
{
		this.context = context;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@param root the root object for the OGNL expression&lt;br/&gt;
	 */&lt;br/&gt;
	public void setRoot(Object root) 
{
		_hasSetRootExplicit = true;
		this.root = root;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	public Object getObject() throws Exception {&lt;br/&gt;
		if(expression==null)&lt;br/&gt;
			throw new IllegalArgumentException(&quot;ognl expression cannot be null!&quot;);&lt;/p&gt;

&lt;p&gt;		//the return object after ognl evaluation&lt;br/&gt;
		Object returnObject = null;&lt;br/&gt;
		try&lt;/p&gt;
{
			returnObject = OgnlExpressionEvaluator.evaluate(expression, context, root);
		}
&lt;p&gt;catch(OgnlException ex)&lt;/p&gt;
{
			//a better way is throw appropriate Exception insteadof RuntimeException
			//I write RuntimeException for the sake of simplicity
			throw new RuntimeException(&quot;error in evaluation &quot;,ex);
		}

&lt;p&gt;		if(returnObject==null)&lt;br/&gt;
			throw new FatalBeanException(&quot;OgnlExpressionFactoryBean is not allowed to return null, &quot; +&lt;br/&gt;
				    &quot;but the expression &apos;&quot; + this.expression + &quot;&apos; return null&quot;);&lt;/p&gt;

&lt;p&gt;		return returnObject;&lt;br/&gt;
	}&lt;br/&gt;
	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;unknown type&lt;br/&gt;
	 */&lt;br/&gt;
	public Class getObjectType() 
{
		return null;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	public boolean isSingleton() &lt;/p&gt;
{
		return true;
	}


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@author snowway&lt;/li&gt;
	&lt;li&gt;@version $Id$&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;a helper class for evaluate ognl expression and cache the compiled expression object&lt;br/&gt;
	 */&lt;br/&gt;
	private static class OgnlExpressionEvaluator{&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;		//a map for pre-compiled ognl expression object&lt;br/&gt;
		private static Map expressions = new Hashtable();&lt;/p&gt;

&lt;p&gt;		/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@param expression the OGNL expression&lt;/li&gt;
	&lt;li&gt;@param context the naming context for the evaluation&lt;/li&gt;
	&lt;li&gt;@param root the root object for the OGNL expression&lt;br/&gt;
	     */&lt;br/&gt;
	    public static Object evaluate(String expression,&lt;br/&gt;
	    		Map context,Object root) throws OgnlException{&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	    	//the context can not be null,otherwise OGNL will throw NullPointerException&lt;br/&gt;
	        if(context == null)&lt;br/&gt;
	            context = Collections.EMPTY_MAP;&lt;/p&gt;

&lt;p&gt;	        //try to retrieve pre-compiled ognl expression object&lt;br/&gt;
	        Object compiledObject = expressions.get(expression);&lt;/p&gt;

&lt;p&gt;	        //compile first if failed to retrieve pre-compiled object&lt;br/&gt;
	        if(compiledObject==null)&lt;/p&gt;
{
	            expressions.put(expression,compiledObject = Ognl.parseExpression(expression));
	        }

&lt;p&gt;	        //evaluate&lt;br/&gt;
	        return Ognl.getValue(compiledObject,context,root);&lt;br/&gt;
	    }&lt;br/&gt;
	}&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;the demo xml&lt;br/&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
&amp;lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot;&lt;br/&gt;
		&quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&amp;gt;&lt;br/&gt;
&amp;lt;beans&amp;gt;&lt;br/&gt;
	&amp;lt;!--&lt;br/&gt;
		static method invocation&lt;br/&gt;
		it will return java system properties&lt;br/&gt;
		@ represent static method or field invocation&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;sysprops&quot; class=&quot;org.snowway.spring.extension.OgnlExpressionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;expression&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;&lt;br/&gt;
				@java.lang.System@getProperties()&lt;br/&gt;
			&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!--&lt;br/&gt;
		static filed reference&lt;br/&gt;
		it will return java.io.PrintStream object&lt;br/&gt;
		@ represent static method or field invocation&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;printStream&quot; class=&quot;org.snowway.spring.extension.OgnlExpressionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;expression&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;@java.lang.System@out&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!--&lt;br/&gt;
		method invocation return value&lt;br/&gt;
		it will return &quot;ABCDE&quot;&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;uppercaseString&quot; class=&quot;org.snowway.spring.extension.OgnlExpressionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;expression&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;&quot;abcde&quot;.toUpperCase()&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!--&lt;br/&gt;
		use existing bean as the root of OGNL expression&lt;br/&gt;
		it will return java.version system property value (e.g. 1.4.2_05)&lt;br/&gt;
		the root object is java.util.Properties,so you can invoke java.util.Properties.getProperty method&lt;br/&gt;
		it can alse write as #this.getProperty(&quot;java.version&quot;),#this represent the root now&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;javaVersion&quot; class=&quot;org.snowway.spring.extension.OgnlExpressionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;expression&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;&lt;br/&gt;
				getProperty(&quot;java.version&quot;)&lt;br/&gt;
			&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;root&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref local=&quot;sysprops&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!--&lt;br/&gt;
		use naming context in OGNL evaluation&lt;br/&gt;
		it will return such as &quot;1.4.2_05 ABCDE&quot;&lt;br/&gt;
		when you need more object for evaluation,you can put object to naming context.&lt;br/&gt;
		you can use #mapkey for object in naming contenxt&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;javaVersionAndUppercaseString&quot;&lt;br/&gt;
		class=&quot;org.snowway.spring.extension.OgnlExpressionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;expression&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;&lt;br/&gt;
				#sysprops.getProperty(&quot;java.version&quot;) + &quot; &quot; +#uppercaseString&lt;br/&gt;
			&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;context&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;map&amp;gt;&lt;br/&gt;
				&amp;lt;entry key=&quot;sysprops&quot;&amp;gt;&lt;br/&gt;
					&amp;lt;ref local=&quot;sysprops&quot;/&amp;gt;&lt;br/&gt;
				&amp;lt;/entry&amp;gt;&lt;br/&gt;
				&amp;lt;entry key=&quot;uppercaseString&quot;&amp;gt;&lt;br/&gt;
					&amp;lt;ref local=&quot;uppercaseString&quot;/&amp;gt;&lt;br/&gt;
				&amp;lt;/entry&amp;gt;&lt;br/&gt;
			&amp;lt;/map&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;


&lt;p&gt;	&amp;lt;!--&lt;br/&gt;
		ApplicationContext bean reference&lt;br/&gt;
		it will return user property(a list of Map.Entry item)&lt;br/&gt;
		i use ApplicationContext object as OGNL root object for convenience.&lt;br/&gt;
		getBean is the method of ApplicationContext&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;userprops&quot; class=&quot;org.snowway.spring.extension.OgnlExpressionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;expression&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;&lt;br/&gt;
				&amp;lt;!--&lt;br/&gt;
					collection selection&lt;br/&gt;
					the syntax is collection.{? expression_return_true_or_false }&lt;br/&gt;
					in the {},#this is current item in collection,not the root object of OGNL&lt;br/&gt;
					when expression_return_true_or_false evaluate to true,the current item is reserved&lt;br/&gt;
					e.g. listeners.{? #this instanceof java.awt.event.ActionListener}&lt;br/&gt;
				--&amp;gt;&lt;br/&gt;
				getBean(&quot;sysprops&quot;).entrySet().{? #this.key.startsWith(&quot;user&quot;)}&lt;br/&gt;
			&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!--&lt;br/&gt;
		collection projection&lt;br/&gt;
		it will return &lt;span class=&quot;error&quot;&gt;&amp;#91;2,3,4&amp;#93;&lt;/span&gt;&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;addOneForEachElement&quot; class=&quot;org.snowway.spring.extension.OgnlExpressionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;expression&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;&lt;br/&gt;
				&amp;lt;!--&lt;br/&gt;
					collection projection&lt;br/&gt;
					the syntax is collection.&lt;/p&gt;
{ expression }
&lt;p&gt;					in the {},#this is current item in collection,not the root object for OGNL&lt;br/&gt;
					collection projection expression will iterate all item,and each item will pass&lt;br/&gt;
					into expression and return the expression value&lt;/p&gt;

&lt;p&gt;					use the #var=expression syntax to define a variable.&lt;br/&gt;
					one more thing,OGNL use , to separate expressions, and the entire expression result&lt;br/&gt;
					is the last one&lt;br/&gt;
				--&amp;gt;&lt;br/&gt;
				&amp;lt;![CDATA[&lt;br/&gt;
					#list = new java.util.ArrayList(),&lt;br/&gt;
					#list.add(1),#list.add(2),#list.add(3),&lt;br/&gt;
					#list.&lt;/p&gt;
{ #this + 1 }
&lt;p&gt;					]]&amp;gt;&lt;br/&gt;
			&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;!--&lt;br/&gt;
		object navigation&lt;br/&gt;
		it will return &quot;my name is:snowway and my birthday is:Tue Sep 18 00:00:00 CST 1979 &quot;&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
	&amp;lt;bean id=&quot;objectNavigation&quot; class=&quot;org.snowway.spring.extension.OgnlExpressionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;expression&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;&lt;br/&gt;
				&amp;lt;!--&lt;br/&gt;
					use #&lt;/p&gt;
{key1:value1,key2:value2}
&lt;p&gt; to define a map&lt;br/&gt;
					use #@java.util.LinkedHashMap@&lt;/p&gt;
{key1:value1,key2:value2}
&lt;p&gt;	to define specified map&lt;br/&gt;
					map.key == map&lt;span class=&quot;error&quot;&gt;&amp;#91;key&amp;#93;&lt;/span&gt;&lt;br/&gt;
				--&amp;gt;&lt;br/&gt;
				&amp;lt;![CDATA[&lt;br/&gt;
					#map = #@java.util.LinkedHashMap@&lt;/p&gt;
{&quot;name&quot;:&quot;snowway&quot;,
						    &quot;age&quot;:26,
						    &quot;email&quot;:&quot;snowway.xue@gmail.com&quot;,
							&quot;birthday&quot;:new java.util.GregorianCalendar(1979,8,18)}
&lt;p&gt;,&lt;br/&gt;
					&quot;my name is:&quot;&lt;ins&gt;#map&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;name&amp;#39;&amp;#93;&lt;/span&gt;&lt;/ins&gt;&quot; and my birthday is:&quot;+#map.birthday.time&lt;br/&gt;
					]]&amp;gt;&lt;br/&gt;
			&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;br/&gt;
	&amp;lt;!--&lt;br/&gt;
		please read OGNL LanguageGuide(www.ognl.org) for other expression usage&lt;br/&gt;
	--&amp;gt;&lt;br/&gt;
&amp;lt;/beans&amp;gt;&lt;/p&gt;</description>
            <key id="11660">SPR-1003</key>
            <summary>Introduce OGNL and OgnlExpressionFactoryBean </summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="robh">Rob Harrop</assignee>
                                    <reporter username="snowway">&#34203;&#20255;</reporter>
                        <labels>
                    </labels>
                <created>Thu, 2 Jun 2005 14:49:58 +0000</created>
                <updated>Mon, 13 Mar 2006 09:06:15 +0000</updated>
                            <resolved>Mon, 13 Mar 2006 09:06:15 +0000</resolved>
                                                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13433" author="snowway" created="Thu, 2 Jun 2005 14:52:32 +0000"  >&lt;p&gt;the sourcecode and xml file&lt;/p&gt;</comment>
                            <comment id="13434" author="snowway" created="Thu, 2 Jun 2005 14:53:54 +0000"  >&lt;p&gt;the ognl runtime support jar&lt;/p&gt;</comment>
                            <comment id="16743" author="robh" created="Fri, 10 Mar 2006 01:39:36 +0000"  >&lt;p&gt;This describes a subset of what we want to do with &lt;a href=&quot;https://jira.spring.io/browse/SPR-4&quot; title=&quot;Introducing Expression Language Support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-4&quot;&gt;&lt;del&gt;SPR-4&lt;/del&gt;&lt;/a&gt;, so I am closing this and all work will be done under that issue.&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="10012">SPR-4</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="10760" name="OgnlExpressionFactoryBean.rar" size="3270" author="snowway" created="Thu, 2 Jun 2005 14:52:32 +0000"/>
                            <attachment id="10761" name="ognl-2.6.5.jar" size="167919" author="snowway" created="Thu, 2 Jun 2005 14:53:53 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 42 weeks, 6 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 10 Mar 2006 01:39:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i039cf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19056</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>