<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:13:15 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1638/SPR-1638.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1638] Memory leak in ProxyFactory when using CGLIB proxies</title>
                <link>https://jira.spring.io/browse/SPR-1638</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I have a memory leak when using the ProxyFactory.&lt;/p&gt;

&lt;p&gt;This has been tested with the following configuration :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;cglib-nodep-2.1_3.jar&lt;/li&gt;
	&lt;li&gt;spring 1.2RC2 and spring 1.2.6&lt;/li&gt;
	&lt;li&gt;IBM&apos;s JVM and SUN&apos;s JVM&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here is the unit test to demonstrate the problem :&lt;/p&gt;


&lt;p&gt;import junit.framework.TestCase;&lt;/p&gt;

&lt;p&gt;import org.aopalliance.intercept.MethodInterceptor;&lt;br/&gt;
import org.aopalliance.intercept.MethodInvocation;&lt;br/&gt;
import org.springframework.aop.framework.ProxyFactory;&lt;br/&gt;
import org.springframework.aop.support.NameMatchMethodPoi ntcutAdvisor;&lt;/p&gt;

&lt;p&gt;public class TestProxyFactoryMemoryLeak extends TestCase {&lt;/p&gt;

&lt;p&gt;    public void testMemoryLeak() {&lt;br/&gt;
        Object target = new Object();&lt;br/&gt;
        MethodInterceptor methodInterceptor = new DummyMethodInterceptor();&lt;/p&gt;

&lt;p&gt;        while (true) &lt;/p&gt;
{
            ProxyFactory proxyFactory = new ProxyFactory();
            NameMatchMethodPointcutAdvisor advisor = new NameMatchMethodPointcutAdvisor(methodInterceptor); 
            advisor.addMethodName(&quot;dummy&quot;);
            proxyFactory.addAdvisor(advisor);
            proxyFactory.setProxyTargetClass(true);
            proxyFactory.setTarget(target);
            proxyFactory.getProxy();
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    private class DummyMethodInterceptor implements MethodInterceptor {&lt;br/&gt;
        public Object invoke(MethodInvocation methodInvocation) throws Throwable &lt;/p&gt;
{
            return methodInvocation.proceed();
        }
&lt;p&gt;    }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Eric Ballet-Baz&lt;/p&gt;</description>
            <key id="13194">SPR-1638</key>
            <summary>Memory leak in ProxyFactory when using CGLIB proxies</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robh">Rob Harrop</assignee>
                                    <reporter username="ericbb">Eric Ballet Baz</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 Jan 2006 22:41:32 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:40 +0000</updated>
                            <resolved>Tue, 11 Apr 2006 20:39:38 +0000</resolved>
                                    <version>1.2.6</version>
                                    <fixVersion>2.0 M4</fixVersion>
                                    <component>Core:AOP</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16153" author="asenft" created="Wed, 25 Jan 2006 17:53:14 +0000"  >
&lt;p&gt;Could this be related with the CGLIB class-caching issues elaborated here?&lt;br/&gt;
&lt;a href=&quot;http://forum.springframework.org/showthread.php?t=13361&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/showthread.php?t=13361&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Andreas&lt;/p&gt;</comment>
                            <comment id="16158" author="robh" created="Wed, 25 Jan 2006 19:29:32 +0000"  >&lt;p&gt;As  Andreas points out this is an issue related to class caching in CGLIB. Right now we take quite a conservative approach and assume that pointcuts, advisors and advice are only equal if they pass the == test. To make this work in your example you should create just a single instance of the NameMatchMethodPointcutAdvisor and reuse it. That way you will see that the same class is reused. A good test of this is to try creating around 5000 instances of the proxy with a VM size of 24MB. When using the same instance of the advice and advisor you will see that all 5000 are created in around 2 seconds. When using new instances each time you will never even create 5000 proxies and it will take a long timeto get the around 3000 proxies where the JVM will die.&lt;/p&gt;

&lt;p&gt;For the 1.2.7 release we are going to leave this as is with the two known workarounds remaining:&lt;/p&gt;

&lt;p&gt;1. Use JDK proxies - &lt;b&gt;much&lt;/b&gt; more efficient overall when creating many proxies programatically.&lt;br/&gt;
2. When using CGLIB, reuse the Advisor, Advice and Pointcut instances where possible or implement equals() and hashCode().&lt;/p&gt;

&lt;p&gt;For Spring 2.0, we will take a much less conservative and much more optimal approach for testing proxy class equality. &lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="16613" author="robh" created="Tue, 28 Feb 2006 23:05:14 +0000"  >&lt;p&gt;I&apos;m shifting this to RC1 due to time pressures. The most comprehensive and desirable fix here requires a reasonable amount of work and can also be coupled with a general tidy up in that area. I&apos;ll be doing all of this work as part of the RC1 push.&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 44 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 25 Jan 2006 17:53:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0105z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5904</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>