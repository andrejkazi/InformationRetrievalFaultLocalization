<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 20:01:49 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CONFIGURATION-418/CONFIGURATION-418.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CONFIGURATION-418] incorrect backslash parsing</title>
                <link>https://issues.apache.org/jira/browse/CONFIGURATION-418</link>
                <project id="12310467" key="CONFIGURATION">Commons Configuration</project>
                    <description>&lt;p&gt;I am using Commons Configuration (PropertiesConfiguration) and some of my data are windows shares: &lt;br class=&quot;atl-forced-newline&quot; /&gt;share1 or &lt;br class=&quot;atl-forced-newline&quot; /&gt;share2. The problem is the parsing return different things depending how the keys are defined. For example, these keys&lt;/p&gt;

&lt;p&gt;share=\\\\share1&lt;br/&gt;
share=\\\\share2&lt;/p&gt;

&lt;p&gt;are different than:&lt;/p&gt;

&lt;p&gt;share=\\\\share1, \\\\share2&lt;/p&gt;

&lt;p&gt;The first one returns two backslashes (&quot;&lt;br class=&quot;atl-forced-newline&quot; /&gt;share1&quot; and &quot;&lt;br class=&quot;atl-forced-newline&quot; /&gt;share2&quot;) and the second returns just one (&quot;\share1&quot; and &quot;\share2&quot;). I think the problem is in PropertyConverter line 525, cos the backslash is hidden twice when multivalue parsing is done:&lt;/p&gt;

&lt;p&gt;if (c != delimiter &amp;amp;&amp;amp; c != LIST_ESC_CHAR) &lt;/p&gt;
                {
                    // no, also add escape character
                    token.append(LIST_ESC_CHAR);
                }&lt;br/&gt;
&lt;br/&gt;
In my understanding the second condition produces this strange issue and it should be like this:&lt;br/&gt;
&lt;br/&gt;
if (c != delimiter) &lt;br/&gt;
                {
                    // no, also add escape character
                    token.append(LIST_ESC_CHAR);
                }

&lt;p&gt;Check that cos I can be missing something...&lt;/p&gt;

&lt;p&gt;TIA&lt;/p&gt;</description>
                <environment>&lt;p&gt;Commons Configuration 1.6&lt;/p&gt;</environment>
        <key id="12465792">CONFIGURATION-418</key>
            <summary>incorrect backslash parsing</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rickyepoderi">Ricky Martin</reporter>
                        <labels>
                    </labels>
                <created>Mon, 31 May 2010 14:49:18 +0000</created>
                <updated>Thu, 24 Mar 2016 20:20:44 +0000</updated>
                            <resolved>Sat, 13 Jul 2013 19:48:04 +0000</resolved>
                                    <version>1.6</version>
                                    <fixVersion>2.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12874155" author="oliver.heger@t-online.de" created="Tue, 1 Jun 2010 18:54:58 +0000"  >&lt;p&gt;It may be that the current version in subversion contains some changes related to the handling of backslahses and escaping, but I am not sure. So would it be possible for you to checkout the most recent version and test with it? Otherwise I will have a look in some days. Thanks.&lt;/p&gt;</comment>
                            <comment id="12874181" author="rickyepoderi" created="Tue, 1 Jun 2010 19:32:05 +0000"  >&lt;p&gt;Hi Oliver,&lt;/p&gt;

&lt;p&gt;I checked out the trunk:&lt;/p&gt;

&lt;p&gt;$ svn checkout &lt;a href=&quot;http://svn.apache.org/repos/asf/commons/proper/configuration/trunk&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/commons/proper/configuration/trunk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the error is still the same. I send you the files and my straight forward diff:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Little sample.properties which shows the problem.&lt;/li&gt;
	&lt;li&gt;A direct Main.java which lists the keys and values.&lt;/li&gt;
	&lt;li&gt;The PropertyConverter.diff which shows how I corrected the problem (maybe a bit straight forward).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The result of the Main.java using sample.properties is the following:&lt;/p&gt;

&lt;p&gt;share1=&lt;span class=&quot;error&quot;&gt;&amp;#91;\share1, \share1&amp;#93;&lt;/span&gt;&lt;br/&gt;
share2=&lt;a href=&quot;file://share2, //share2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;\\share2, \\share2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which clearly shows the different behavior if comma separated is used or not.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12874182" author="rickyepoderi" created="Tue, 1 Jun 2010 19:33:52 +0000"  >&lt;p&gt;The three files commented to test the issue.&lt;/p&gt;</comment>
                            <comment id="12874188" author="rickyepoderi" created="Tue, 1 Jun 2010 19:37:18 +0000"  >&lt;p&gt;I forgot the Main&lt;/p&gt;</comment>
                            <comment id="12876049" author="oliver.heger@t-online.de" created="Sun, 6 Jun 2010 15:53:14 +0000"  >&lt;p&gt;Thanks for the proposed patch. It solves the problem described by this issue, but unfortunately causes another unit test to fail.&lt;/p&gt;

&lt;p&gt;Our rules for escaping list delimiters and other escaping characters have become so complex that it is easy to lose overview. Per default, a comma is interpreted as list delimiter character. This can be escaped by a backslash as in&lt;br/&gt;
&lt;tt&gt;options = 1\, 2 or 3&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Now there is often the requirement to store path names in configuration files. In Windows environments this can cause problems with the escaping of the list delimiter, e.g.:&lt;br/&gt;
&lt;tt&gt;test.dirs = C:\\Temp\\,D:&lt;br class=&quot;atl-forced-newline&quot; /&gt;data&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;Here the trailing backslash of the first list element would be interpreted as escape character for the list delimiter. Therefore it is also possible to escape the escape character for the list delimiter:&lt;br/&gt;
&lt;tt&gt;test.dirs = C:\\Temp\\\\,D:&lt;br class=&quot;atl-forced-newline&quot; /&gt;data&lt;/tt&gt;&lt;br/&gt;
This is the reason for the condition &lt;tt&gt;&amp;amp;&amp;amp; c != LIST_ESC_CHAR&lt;/tt&gt; which your patch removed.&lt;/p&gt;

&lt;p&gt;In your case you use names of network shares starting with a double backslash. If multiple of these shares are declared in a single line using a list delimiter, these duplicated backslashes are interpreted as escaped backslashes and so one of them is removed. This escaping is only evaluated if a list delimiter is involved, so the properties actually have to look different if they are defined in a single line or in multiple lines. I think, the user guide has to be updated to reflect this.&lt;/p&gt;

&lt;p&gt;To avoid escaping you have to duplicate the backslahes again. Your example then becomes:&lt;br/&gt;
&lt;tt&gt;test.share1 = \\\\\\\\share1a, \\\\\\\\share1b&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;However, when testing I found that there is still a bug in the escaping logic which does not handle such constellations correctly. I am working on a fix.&lt;/p&gt;</comment>
                            <comment id="12876140" author="rickyepoderi" created="Mon, 7 Jun 2010 07:14:05 +0000"  >&lt;p&gt;I understand Oliver, although it is a bit weird. So when you need more than one consecutive backslash in a comma separated key you need to escape them twice (one for the general escaping and a second for comma separated parsing). &lt;/p&gt;

&lt;p&gt;What I do not know it is why comma separated parsing is performed in a second phase... That is the final reason for this mess, but I am sure that exceeds me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks a lot!&lt;/p&gt;</comment>
                            <comment id="12876386" author="oliver.heger@t-online.de" created="Mon, 7 Jun 2010 20:02:20 +0000"  >&lt;p&gt;Well, to be honest, I am not happy with the current state either. It is pretty complex and hard to understand. However, given the requirements, I do not know how we can make it simpler:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If a property value can contain a list delimiter, there must be a possibility to escape it.&lt;/li&gt;
	&lt;li&gt;Then there must be a way to escape the sequence of an escaped list delimiter.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am open for suggestions. I am currently updating the user guide, and I hope this helps a bit to grasp the concept.&lt;/p&gt;</comment>
                            <comment id="12876392" author="sebb@apache.org" created="Mon, 7 Jun 2010 20:18:38 +0000"  >&lt;p&gt;The escaping should not depend on whether a list delimiter is present.&lt;br/&gt;
Therefore the parsing needs to be done in a single pass, otherwise there will always be an ambiguity.&lt;/p&gt;

&lt;p&gt;If parsing is done in a single pass, the code knows if the comma has been escaped or not.&lt;/p&gt;

&lt;p&gt;The following are the possibilities - should be easy enough to parse:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;\\ =&amp;gt; \
\, =&amp;gt; , but not a list delimiter
\\, =&amp;gt; \ followed by list delimiter
\\\, =&amp;gt; \, (not a list delimiter)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It&apos;s then trivial to encode property definitions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;escape any backslashes&lt;/li&gt;
	&lt;li&gt;escape any list delimiters that are not supposed to be list delimiters.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12876555" author="oliver.heger@t-online.de" created="Tue, 8 Jun 2010 05:49:05 +0000"  >&lt;p&gt;Just to make sure I understand you correctly: With parsing in two passes you mean that the presence of a list delimiter influences the escaping algorithm, so that list elements may have to be defined in a different way when they are put on a single line or on multiple lines, right?&lt;/p&gt;

&lt;p&gt;Yes, I agree, this should be made consistent. I don&apos;t know why it is currently implemented this way, but the code is there probably for a long time now. So I wonder whether we should change the parsing in a minor release because this impacts the way certain properties have to be defined and might break existing applications. Therefore I tend to close this ticket (a bug actually has been fixed) and open a new one, targeted to a 2.0 release, with the goal to rework the parsing algorithm. WDYT?&lt;/p&gt;</comment>
                            <comment id="12876568" author="rickyepoderi" created="Tue, 8 Jun 2010 07:06:22 +0000"  >&lt;p&gt;Yes! I just tried to say exactly what Sebb said:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Share=\\\\share =&amp;gt; share=&quot;\\share&quot;  
  =&amp;gt; two backslash escaped (1 value)
test.dirs=C:\\Temp\\,D: =&amp;gt; test.dirs=[&quot;C:\Temp\&quot;, &quot;D:&quot;] 
  =&amp;gt; two backslash escaped and two values (2 values)
lala=C:\\Temp\,D: =&amp;gt; lala=&quot;C:\Temp,D:&quot; 
  =&amp;gt; backslash escaped and comma escaped (1 value)
lala2=C:\\Temp\\\,D =&amp;gt; lala2=[&quot;C:\Temp\D:&quot;] 
  =&amp;gt; two backslashes escaped and comma escaped (1 value)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;The problem is there is a first phase when escapes are treated and one value is returned, and a second phase when comma separated values are splitted from the String returned by previous phase, here escapes are treated again... That is the reason weird things happen.&lt;/p&gt;</comment>
                            <comment id="12876634" author="sebb@apache.org" created="Tue, 8 Jun 2010 11:22:57 +0000"  >&lt;p&gt;@Oliver: yes, two-pass parsing means that the escaping requirements depend on whether list delimiters are present or not.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure how one can properly handle the behaviour change. It&apos;s a bit different from an API change, as it is the data that would need to be fixed, rather than code. This makes it much harder for users to deal with, as the data may even not be theirs. So breaking compatibility would mean that some users cannot upgrade.&lt;/p&gt;

&lt;p&gt;So I think the only way forward now would be to add the new behaviour as an option. Perhaps as a ctor argument. Or maybe a new class.&lt;/p&gt;

&lt;p&gt;Not sure a new JIRA is needed; but if so, it should be linked to this one.&lt;/p&gt;</comment>
                            <comment id="12876769" author="oliver.heger@t-online.de" created="Tue, 8 Jun 2010 19:07:34 +0000"  >&lt;p&gt;PropertiesConfiguration allows setting an IOFactory which is responsible for creating the readers and writers for reading and writing properties files. So we could provide alternative implementations which handle backslash escaping correctly. I have difficulties to find a meaningful name for these alternative implementations. Maybe &lt;em&gt;StringentPropertiesReader&lt;/em&gt;?&lt;/p&gt;</comment>
                            <comment id="12882981" author="oliver.heger@t-online.de" created="Sun, 27 Jun 2010 19:39:22 +0000"  >&lt;p&gt;The problem is worse than I thought. This two-pass parsing is already (indirectly) performed by the addProperty() method in the AbstractConfiguration base class. So all configuration classes derived from this class (basically all) are affected in theory. Currently you have to use different escaping for backslashes when you call addProperty() with a value containing a list delimiter or for a value without a delimiter. Because many file-based configurations call addProperty() in their load() method loading of configuration files is also affected in many cases - but not in all: XMLConfiguration for instance is using a different strategy for splitting property values.&lt;/p&gt;

&lt;p&gt;One approach to solve this problem and make handling of list delimiters and escape characters more consistent would be to introduce a new interface - maybe &lt;tt&gt;ListDelimiterHandler&lt;/tt&gt; - and delegate parsing of property values to a concrete implementation. It has to be ensured then that all split operations for property values are done through this interface. Probably this interface also has to be used when writing configuration files because the escaping performed by write has to be compatible with the parsing done when adding properties.&lt;/p&gt;

&lt;p&gt;However, I doubt whether this is worth the effort. Would really anybody provide a custom implementation of such an interface or is it easier to work around the current inconsistencies (provided they are well documented)? Also, there is still the issue with backwards compatibility of existing configuration files which may be affected when we change the current behavior.&lt;/p&gt;</comment>
                            <comment id="12898740" author="oliver.heger@t-online.de" created="Sun, 15 Aug 2010 19:54:37 +0000"  >&lt;p&gt;Setting fix version to 2.0. I see no way to fix this problem with a reasonable effort in a compatible way.&lt;/p&gt;</comment>
                            <comment id="13696384" author="oliver.heger@t-online.de" created="Sun, 30 Jun 2013 17:40:46 +0000"  >&lt;p&gt;As an update: Currently, there is ongoing work on version 2.0 of Commons Configuration which will introduce some new concepts and break backwards compatibility. For this new release I am going to try out the approach with a &lt;tt&gt;ListDelimiterHandler&lt;/tt&gt; interface. The plan is to drop the properties &lt;tt&gt;listDelimiter&lt;/tt&gt; and &lt;tt&gt;delimiterParsingDisabled&lt;/tt&gt; from &lt;tt&gt;AbstractConfiguration&lt;/tt&gt; and move all logic related to list delimiter handling to a concrete &lt;tt&gt;ListDelimiterHandler&lt;/tt&gt; implementation which can be assigned to the configuration.&lt;/p&gt;

&lt;p&gt;We can provide different implementations of &lt;tt&gt;ListDelimiterHandler&lt;/tt&gt;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;one which disables list splitting completely; this would correspond to setting &lt;tt&gt;delimiterParsingDisabled&lt;/tt&gt; to &lt;b&gt;true&lt;/b&gt;.&lt;/li&gt;
	&lt;li&gt;one which implements the same splitting logic as was used in Configuration 1.x; this can be used if compatibility with already existing configuration files is needed&lt;/li&gt;
	&lt;li&gt;one which implements a more consistent split and escape behavior as described in this ticket; this is then the recommended implementation for new applications that want to use list splitting&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These implementations should cover the most typical use cases. If special behavior is needed, a custom &lt;tt&gt;ListDelimiterHandler&lt;/tt&gt; implementation can be created.&lt;/p&gt;</comment>
                            <comment id="13707823" author="oliver.heger@t-online.de" created="Sat, 13 Jul 2013 19:48:04 +0000"  >&lt;p&gt;The handling of list delimiters has been completely reworked as described in my last comment. The changes are available in SVN in revision 1502873.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12653711">CONFIGURATION-547</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12446053" name="Main.java" size="587" author="rickyepoderi" created="Tue, 1 Jun 2010 19:37:18 +0000"/>
                            <attachment id="12446052" name="PropertyConverter.diff" size="719" author="rickyepoderi" created="Tue, 1 Jun 2010 19:33:52 +0000"/>
                            <attachment id="12446050" name="sample.properties" size="67" author="rickyepoderi" created="Tue, 1 Jun 2010 19:33:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Jun 2010 18:54:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>110865</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 20 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0lm3r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>124231</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>