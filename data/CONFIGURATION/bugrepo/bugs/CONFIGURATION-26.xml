<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 19:48:28 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CONFIGURATION-26/CONFIGURATION-26.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CONFIGURATION-26] Consider returning a concatenation of the list properties with getString()</title>
                <link>https://issues.apache.org/jira/browse/CONFIGURATION-26</link>
                <project id="12310467" key="CONFIGURATION">Commons Configuration</project>
                    <description>&lt;p&gt;in AbstractConfiguration.resolveContainerStore (javadoc):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Returns an object from the store described by the key. If the value is a&lt;/li&gt;
	&lt;li&gt;List object, replace it with the first object in the list.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;but what if getProperty returns a List because this is the type of the property? &lt;br/&gt;
 this code will silently grab the first elemen. I don&apos;t understand why. Probably &lt;br/&gt;
the reason is that some class extending AbstractConfiguration returns List for &lt;br/&gt;
properties. In this case I think the better approach is to have that class &lt;br/&gt;
return the first element instead, rather than returning the List and letting &lt;br/&gt;
AbstractConfiguration (which is used by many other implementations, including &lt;br/&gt;
outside of the configuration package) handle it&lt;/p&gt;</description>
                <environment></environment>
        <key id="12342125">CONFIGURATION-26</key>
            <summary>Consider returning a concatenation of the list properties with getString()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ittayd@qlusters.com">Ittay Dror</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Mar 2005 23:44:53 +0000</created>
                <updated>Thu, 24 Mar 2016 20:20:56 +0000</updated>
                            <resolved>Sat, 24 Aug 2013 20:00:38 +0000</resolved>
                                                    <fixVersion>2.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12408919" author="oliver.heger@t-online.de" created="Mon, 21 Mar 2005 23:59:34 +0000"  >&lt;p&gt;The method resolveContainerStore() is only called by methods that return a&lt;br/&gt;
scalar value like getString(), getBoolean() etc. It is not involved in&lt;br/&gt;
getProperty() calls. So if getProperty() returns a list, this list is passed to&lt;br/&gt;
the caller withput modifications.&lt;/p&gt;

&lt;p&gt;I think that the name resolveContainerStore() is not very fitting though, it&lt;br/&gt;
comes from the ancient times where there was another organization for storing&lt;br/&gt;
properties internally.&lt;/p&gt;</comment>
                            <comment id="12408920" author="ittayd@qlusters.com" created="Tue, 22 Mar 2005 00:07:51 +0000"  >&lt;p&gt;for an external client calling getProperty, yes, it will return the List.&lt;/p&gt;

&lt;p&gt;But lets say I have a property named &apos;foo&apos; whose value is set to be some list. &lt;br/&gt;
Now, I&apos;ve written a buggy code and use getString(&quot;foo&quot;). instead of getting an &lt;br/&gt;
error (exception), this will silently be ignored. furthermore, what if i &lt;br/&gt;
intended to have the property value &lt;b&gt;converted&lt;/b&gt; to string (get something like &lt;br/&gt;
&apos;1,2,3&apos;, instead i&apos;ll get &apos;1&apos;).&lt;/p&gt;

&lt;p&gt;==&amp;gt; resolveContainerStore should use what getProperty() returns, and not &lt;br/&gt;
manipulate it. &lt;/p&gt;

&lt;p&gt;this relates to issue 34098 which i&apos;ve opened. namely, things should be &lt;br/&gt;
consistent:&lt;br/&gt;
getProperty(String) should throw a NoSuchElementException (as it sometimes does) &lt;br/&gt;
if the key doesn&apos;t exists. if isThrowXXX is used, then it should always return &lt;br/&gt;
null. so should the other getXXX methods (not sometimes an empty object, like in &lt;br/&gt;
getProperties). &lt;/p&gt;

</comment>
                            <comment id="12408921" author="ebourg" created="Tue, 22 Mar 2005 01:45:31 +0000"  >&lt;p&gt;(In reply to comment #1)&lt;br/&gt;
&amp;gt; I think that the name resolveContainerStore() is not very fitting though, it&lt;br/&gt;
&amp;gt; comes from the ancient times where there was another organization for storing&lt;br/&gt;
&amp;gt; properties internally.&lt;/p&gt;

&lt;p&gt;Oliver, what about renaming this method into getScalar() or toScalar() and move&lt;br/&gt;
it to ConfigurationUtils or PropertyConverter ? It would extract the first&lt;br/&gt;
element of the specified list or array. Then we would replace:&lt;/p&gt;

&lt;p&gt;Object value = resolveContainerStore(key);&lt;/p&gt;

&lt;p&gt;with:&lt;/p&gt;

&lt;p&gt;Object value = PropertyConverter.toScalar(getProperty(key));&lt;/p&gt;
</comment>
                            <comment id="12408922" author="ebourg" created="Tue, 22 Mar 2005 03:25:19 +0000"  >&lt;p&gt;I&apos;m not sure to understand your issue so I&apos;ll try to reformulate it, let me know&lt;br/&gt;
if I&apos;m wrong. Given a configuration containing a list property:&lt;/p&gt;

&lt;p&gt;List list = new ArrayList();&lt;br/&gt;
list.add(&quot;foo&quot;);&lt;br/&gt;
list.add(&quot;bar&quot;);&lt;br/&gt;
config.setProperty(&quot;key&quot;, list);&lt;/p&gt;

&lt;p&gt;Calling config.getString(&quot;key&quot;) should throw an exception instead of returning&lt;br/&gt;
the first element, right ? This would happen when a &quot;strict mode&quot; similar to the&lt;br/&gt;
throwExceptionOnMissing flag is enabled. When the strict mode is disabled, you&lt;br/&gt;
expect the getString() method to return a concatenation of the values in the&lt;br/&gt;
list, that&apos;s &quot;foo,bar&quot;.&lt;/p&gt;

&lt;p&gt;But what happens if the property is a list of Integers and the strict mode is&lt;br/&gt;
disabled ? &lt;/p&gt;

&lt;p&gt;List list = new ArrayList();&lt;br/&gt;
list.add(new Integer(1));&lt;br/&gt;
list.add(new Integer(2));&lt;br/&gt;
config.setProperty(&quot;key&quot;, list);&lt;/p&gt;

&lt;p&gt;The values can&apos;t be concatenated in this case, so what is the result of&lt;br/&gt;
getInt(&quot;key&quot;) ?&lt;/p&gt;</comment>
                            <comment id="12408923" author="ittayd@qlusters.com" created="Tue, 22 Mar 2005 04:26:16 +0000"  >&lt;p&gt;I don&apos;t expect getString() to throw an exception right away, I expect it to be&lt;br/&gt;
written like this:&lt;br/&gt;
    Object o = getProperty(key); // throws NoSuchElementException if no such prop.&lt;br/&gt;
    return ConvertUtils.convert(o, String.class); // try to convert to string&lt;br/&gt;
                                                  // if not possible, throw &lt;br/&gt;
                                                  // ConvertException&lt;/p&gt;

&lt;p&gt;or, more generically:&lt;br/&gt;
public Object getProperty(String key, Class cls) &lt;/p&gt;
{
    return ConvertUtils.convert(getProperty(key), cls);
}

&lt;p&gt;(the exceptions should be runtime)&lt;/p&gt;

&lt;p&gt;therefore, getString() will return a concatenation, and getInt will throw an&lt;br/&gt;
exception, as should be the case. &lt;/p&gt;

&lt;p&gt;if the user wants to get the first element of the list, he can freely do it:&lt;br/&gt;
getList(key).get(0). &lt;/p&gt;</comment>
                            <comment id="12408924" author="oliver.heger@t-online.de" created="Tue, 22 Mar 2005 05:48:39 +0000"  >&lt;p&gt;(In reply to comment #3)&lt;br/&gt;
&amp;gt; Oliver, what about renaming this method into getScalar() or toScalar() and move&lt;br/&gt;
&amp;gt; it to ConfigurationUtils or PropertyConverter ? It would extract the first&lt;br/&gt;
&amp;gt; element of the specified list or array. Then we would replace:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Object value = resolveContainerStore(key);&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; with:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Object value = PropertyConverter.toScalar(getProperty(key));&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I may have to think a bit about this suggestion. To be honest I don&apos;t like the&lt;br/&gt;
fix for resolveContainerStore() (the bunch of if-else-statements) very much.&lt;/p&gt;

&lt;p&gt;What about the following approach: I know we once removed that old&lt;br/&gt;
getPropertyDirect() method, but when I was thinking about interpolation, I had&lt;br/&gt;
the idea of introducing two new methods in AbstractConfiguration like the following:&lt;/p&gt;

&lt;p&gt;protected Object getSingleProperty(String key);&lt;/p&gt;

&lt;p&gt;protected abstract List getMultipleProperty(String key);&lt;/p&gt;

&lt;p&gt;Then scalar getter methods like getString() would call the former and getters&lt;br/&gt;
for lists and arrays would use the latter. There could also be a default&lt;br/&gt;
implementation for getSingleProperty() which calls getMultipleProperty() and&lt;br/&gt;
returns either null or the first element.&lt;/p&gt;

&lt;p&gt;One big advantage is that properties with multiple values are always treated as&lt;br/&gt;
lists. So we don&apos;t need a bunch of if-statements for conversions, but getter&lt;br/&gt;
methods for arrays could obtain their values directly from the list.&lt;/p&gt;

&lt;p&gt;So with this approach it is in the responsibility of a concrete Configuration&lt;br/&gt;
implementation to store its properties in a way that multiple values for a&lt;br/&gt;
property can be returned as a list. But with our current implementation (and&lt;br/&gt;
especially the way AbstractConfiguration.addProperty() is implemented) this is&lt;br/&gt;
no problem, it should be already the case. It would be problematic if somebody&lt;br/&gt;
calls an addPropertyDirect() implementation in a subclass with a complex value,&lt;br/&gt;
but we could add a warning in the javadocs that this is not legal.&lt;/p&gt;

&lt;p&gt;Well, in short what I try to say is that we should distinguish only between two&lt;br/&gt;
types of properties: scalars and lists. Other stuff like arrays should be&lt;br/&gt;
converted to a list when it is added (which is already done by addProperty).&lt;/p&gt;</comment>
                            <comment id="12408925" author="oliver.heger@t-online.de" created="Tue, 22 Mar 2005 06:10:46 +0000"  >&lt;p&gt;Ittay,&lt;/p&gt;

&lt;p&gt;I aggree with your points about the behavior of getter methods when the&lt;br/&gt;
requested property is missing. Then, if the &quot;exception mode&quot; is enabled, always&lt;br/&gt;
an exception should be thrown.&lt;/p&gt;

&lt;p&gt;But I can&apos;t follow your points about handling of list and single properties. I&lt;br/&gt;
was always fine with the feature that getString() would return the first element&lt;br/&gt;
of a list. Your idea with supporting convertes from bean utils is interesting,&lt;br/&gt;
but I would add it to DataConfiguration rather than to the core Configuration&lt;br/&gt;
classes (and I am not sure if this feature is really needed).&lt;/p&gt;

&lt;p&gt;My impression is that that a typical user of the Configuration API has at least&lt;br/&gt;
a certain idea about the properties defined in the configuration files. More&lt;br/&gt;
over in most cases the configuration files will be written in a way to match the&lt;br/&gt;
needs of the application. So it seems reasonable that the Configuration API&lt;br/&gt;
supports a set of default data types the properties can be converted to, but I&lt;br/&gt;
see no need to implement a fully featured data conversion framework.&lt;/p&gt;

&lt;p&gt;So I guess if we implemented some of the points mentioned in the discussion&lt;br/&gt;
above, e.g. concatenation operations for lists, throwing exceptions but only in&lt;br/&gt;
a &quot;strict&quot; mode, we might confuse most of the users - I surely would be confused&lt;br/&gt;
&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; So, I say KISS - keep it stupid and simple!&lt;/p&gt;</comment>
                            <comment id="12408926" author="ittayd@qlusters.com" created="Tue, 22 Mar 2005 15:45:40 +0000"  >&lt;p&gt;i totaly agree with KISS, which is my point:&lt;br/&gt;
1. a getString() which takes the first element of a list is not KISS - a kiss is&lt;br/&gt;
that getString returns the property converted to a string. to put it in another&lt;br/&gt;
way, if my property is &quot;a,b,c&quot; i&apos;ll get &quot;a&quot; in return, but if it is &quot;a-b-c&quot;,&lt;br/&gt;
i&apos;ll get &quot;a-b-c&quot;. why? because i used &apos;-&apos; instead of &apos;,&apos;? a KISS is that i&apos;ll&lt;br/&gt;
get &apos;a,b,c&apos; or &apos;a-b-c&apos; respectively - i get the property as-is, converted to&lt;br/&gt;
string. that way your model is very clear: &apos;getXXX() returns the property&lt;br/&gt;
converted to XXX&apos;, you&apos;re current model is: &apos;getXXX() returns the property&lt;br/&gt;
converted to XXX, unless the property is a List, in which case it returns the&lt;br/&gt;
first element&apos;. moreover, in your current documentation this isn&apos;t even&lt;br/&gt;
described properly, for example, it is not mentioned for getBoolean(). &lt;/p&gt;


&lt;p&gt;2. about throwing an exception: the thing is you do throw this exception in many&lt;br/&gt;
cases, sometimes depending on a flag, sometimes not.&lt;/p&gt;

&lt;p&gt;to summarize, my KISS model for properties is:&lt;br/&gt;
1. there are two types of properties: mandatory and optional. mandatory&lt;br/&gt;
properties mean that the client has to define them, there&apos;s no default. for&lt;br/&gt;
example, a URL of some server. for such properties, the code uses getXXX(key)&lt;br/&gt;
methods, which throw an exception if the property doesn&apos;t exist (which the code&lt;br/&gt;
can then catch, print an error and exit). optional properties are ones where the&lt;br/&gt;
code allows the client to override some default value. for this the code uses&lt;br/&gt;
getXXX(key, default), which doens&apos;t throw an exception if the property doesn&apos;t&lt;br/&gt;
exist. no flags. this is, i believe, very natural. if i have a default, i use&lt;br/&gt;
the optional form, if not, i use the mandatory form. the framework doesn&apos;t try&lt;br/&gt;
to guess defaults for me.&lt;/p&gt;

&lt;p&gt;2. the model for the return value is always &apos;getXXX() returns the property&lt;br/&gt;
converted to XXX&apos; an exception is thrown if the conversion fails. this exception&lt;br/&gt;
is a runtime exception, because it means some logical fault in the code.&lt;br/&gt;
conversion is done on the whole property value, not part of it. that way, a&lt;br/&gt;
client always knows what he&apos;s getting. if he wants the first value of a list&lt;br/&gt;
property he can get it like getList(key).get(0). very simple.&lt;/p&gt;

&lt;p&gt;3. conversion is done in such a way so that custom converters can be added. that&lt;br/&gt;
way, if i want to get a property converted to MyClass, i call getProperty(key,&lt;br/&gt;
MyClass.class). simple. there&apos;s no alternative in the framework today, because i&lt;br/&gt;
have to work with what the interface in Configuration gives me, which will no&lt;br/&gt;
doubtly blow up as users will reqruie more getXXX methods.&lt;/p&gt;


&lt;p&gt;1 &amp;amp; 2 give a very simple model to use. look also at bug # 34098, for a more&lt;br/&gt;
detailed in how the current implementation is far from KISS and confuses the&lt;br/&gt;
user by not being consistent in the values it returns (this is not purely&lt;br/&gt;
academic, but as a result of bugs i faced because, for example, i expected&lt;br/&gt;
getProperties(key) to return null if key doesn&apos;t exist, but instead got an empty&lt;br/&gt;
properties list, maybe convenient in some cases, but not KISS - no standard&lt;br/&gt;
returned value) &lt;/p&gt;</comment>
                            <comment id="12408927" author="ittayd@qlusters.com" created="Tue, 22 Mar 2005 15:54:35 +0000"  >&lt;p&gt;about getMultipleProperty, where will getProperties() map here? it returns a&lt;br/&gt;
non-scalar value, but not a List. What if I want (and I want) to implement a&lt;br/&gt;
getMap() function (which btw, means I can&apos;t work with the Configuration interface)?&lt;/p&gt;</comment>
                            <comment id="12408928" author="ittayd@qlusters.com" created="Tue, 22 Mar 2005 16:08:34 +0000"  >&lt;p&gt;ok, here&apos;s my suggestion of how Configuration should be modeled.&lt;/p&gt;

&lt;p&gt;The basic methods will be:&lt;br/&gt;
   Object getProperty(String key) throws PropertyDoesNotExistException;&lt;/p&gt;

&lt;p&gt;   Object getProperty(String key, Object default) throws ConversionException;&lt;/p&gt;

&lt;p&gt;   Object getProperty(String key, Class cls) throws&lt;br/&gt;
PropertyDoesNotExistException, ConversionException;&lt;/p&gt;

&lt;p&gt;   Object getProperty(String key, Converter conv) throws&lt;br/&gt;
PropertyDoesNotExistException, ConversionException;&lt;/p&gt;

&lt;p&gt;   Object getProperty(String key, Object default, Converter conv) throws&lt;br/&gt;
ConversionException;&lt;br/&gt;
(the exceptions can/should be RuntimeExceptions, or other exceptions, like&lt;br/&gt;
NoSuchElementException)&lt;/p&gt;

&lt;p&gt;all the rest of the getXXX() methods are syntactic sugar, one-liners that call&lt;br/&gt;
one of the getProperty() methods (second and third forms).&lt;/p&gt;

&lt;p&gt;Converter has the API: convert(Objec o, Class cls) to convert o to an instance&lt;br/&gt;
of cls. converters can be registered as converting to some class (which is what&lt;br/&gt;
getProperty(key,cls) uses.&lt;/p&gt;

&lt;p&gt;that&apos;s it, simple (the client needs to know only of the first 2 forms if he is&lt;br/&gt;
not interested in sophisticated conversions, and the return values are very&lt;br/&gt;
consistent, no need to read the documentation for each getXXX() method), yet&lt;br/&gt;
powerful (allowing me, for example, to convert a property to Map, Date etc. very&lt;br/&gt;
easily)&lt;/p&gt;

&lt;p&gt;note that most of the implementation will be in getProperty(key, default,&lt;br/&gt;
converter) while the rest just call it (sometimes checking containsKey() before)&lt;/p&gt;</comment>
                            <comment id="12408929" author="oliver.heger@t-online.de" created="Tue, 22 Mar 2005 16:37:47 +0000"  >&lt;p&gt;About PropertyDoesNotExistException: We once changed the semantic of our&lt;br/&gt;
getXXX(String key) methods to always throw an exception if the property does not&lt;br/&gt;
exist. This caused lots of protests by our users who demanded null return values&lt;br/&gt;
instead, so the solution with the throwExceptionOnMissing-Flag was introduced. I&lt;br/&gt;
think we can&apos;t change this again.&lt;/p&gt;

&lt;p&gt;About the conversion methods: As I pointed out I don&apos;t see data conversion as a&lt;br/&gt;
main feature of a Configuration framework. However your approach would allow to&lt;br/&gt;
refactor a bunch of code dealing with data conversion (especially in&lt;br/&gt;
PropertiesUtils) into small and flexible converter classes that can be even&lt;br/&gt;
customized by the user. This is very nice.&lt;/p&gt;

&lt;p&gt;The problem I see with this is that it is surely not easy to design a functional&lt;br/&gt;
hierarchy of converter classes. The &lt;span class=&quot;error&quot;&gt;&amp;#91;convert&amp;#93;&lt;/span&gt; sandbox project has tried exactly&lt;br/&gt;
that and has failed so far. So if such a conversion framework existed and could&lt;br/&gt;
be easily embedded into Configuration, I would give it a go. But I don&apos;t want to&lt;br/&gt;
develop one in the Configuration project.&lt;/p&gt;</comment>
                            <comment id="12408930" author="ittayd@qlusters.com" created="Tue, 22 Mar 2005 17:24:40 +0000"  >&lt;p&gt;i use the converters in commons beanutils. works very nicely.&lt;/p&gt;

&lt;p&gt;i&apos;d also use commons el for the interpolation. &lt;/p&gt;

&lt;p&gt;about not throwing an exception: 1. this is where the mandatory vs. optional&lt;br/&gt;
difference comes to play. if a client wants null when the property doesn&apos;t&lt;br/&gt;
exist, it means the code can handle such a case --&amp;gt; this is an optional property&lt;br/&gt;
--&amp;gt; he should use getProperty(key, null). however, having the flag can be&lt;br/&gt;
syntactic sugar (in the sense that it means that getProperty(key) will be&lt;br/&gt;
treated as getProperty(key, null)). so it doesn&apos;t hurt.&lt;/p&gt;
</comment>
                            <comment id="12408931" author="ebourg" created="Wed, 23 Mar 2005 02:02:29 +0000"  >&lt;p&gt;(In reply to comment #5)&lt;br/&gt;
&amp;gt; therefore, getString() will return a concatenation, and getInt will throw an&lt;br/&gt;
&amp;gt; exception, as should be the case. &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; if the user wants to get the first element of the list, he can freely do it:&lt;br/&gt;
&amp;gt; getList(key).get(0). &lt;/p&gt;

&lt;p&gt;On the other hand one could argue that if the user wants a concatenation of the&lt;br/&gt;
array he&apos;s free to do it with &lt;/p&gt;

&lt;p&gt;StringUtils.join(config.getStringArray(key), &quot;,&quot;);&lt;/p&gt;
</comment>
                            <comment id="12408932" author="ebourg" created="Wed, 23 Mar 2005 02:19:53 +0000"  >&lt;p&gt;(In reply to comment #6)&lt;br/&gt;
&amp;gt; Well, in short what I try to say is that we should distinguish only between two&lt;br/&gt;
&amp;gt; types of properties: scalars and lists. Other stuff like arrays should be&lt;br/&gt;
&amp;gt; converted to a list when it is added (which is already done by addProperty).&lt;/p&gt;

&lt;p&gt;I&apos;m not sure this is possible unfortunately, we can&apos;t always ensure that the&lt;br/&gt;
configuration contains only lists and not arrays because we didn&apos;t add the&lt;br/&gt;
properties ourself. JNDIConfiguration comes to mind, but also a configuration&lt;br/&gt;
based on the Windows registry, I tried once to implement one and sometimes the&lt;br/&gt;
registry returns an array.&lt;/p&gt;
</comment>
                            <comment id="12408933" author="ittayd@qlusters.com" created="Wed, 23 Mar 2005 02:23:14 +0000"  >&lt;p&gt;(In reply to comment #13)&lt;/p&gt;

&lt;p&gt;obviously, it just depends what is straight forward. to me, the straight forward &lt;br/&gt;
thing is that getString returns the string representation of the actual property &lt;br/&gt;
value and that the string representation of a List is something like &quot;item1,&lt;br/&gt;
item2,item3&quot;. having said that, i also mentioned that it is not like we&apos;re &lt;br/&gt;
leaving the user that wants to get the first element with no options.&lt;/p&gt;</comment>
                            <comment id="12408934" author="oliver.heger@t-online.de" created="Wed, 23 Mar 2005 16:03:17 +0000"  >&lt;p&gt;(In reply to comment #12)&lt;br/&gt;
Do the beanutils converters really provide all features we would need? E.g. I am&lt;br/&gt;
missing stuff like Collection -&amp;gt; XXX array.&lt;/p&gt;

&lt;p&gt;After having slept a night over this problem I think that your suggestion could&lt;br/&gt;
be easily implemented on top of the Configuration API. Create a new class&lt;br/&gt;
ConverterConfiguration or whatever that may or may not be a Configuration&lt;br/&gt;
decorator, but hold a reference to an original Configuration. In your proposed&lt;br/&gt;
methods call the original Configuration&apos;s getProperty() method and act on the&lt;br/&gt;
result as appropriate, e.g. perform type conversions. I would see this new class&lt;br/&gt;
as an addition or maybe as a replacement for DataConfiguration.&lt;/p&gt;

&lt;p&gt;This would have the advantage that the core API needn&apos;t be changed and no&lt;br/&gt;
additional dependency for a converter framework needs to be added. Users who can&lt;br/&gt;
live with the provided standard data types just use a simple Configuration,&lt;br/&gt;
others make use of the extended conversion features.&lt;/p&gt;

&lt;p&gt;And another word about throwing exceptions on missing properties: I am quite&lt;br/&gt;
sure that we simply cannot change the current semantics now. If we did this,&lt;br/&gt;
after an update to the new Configuration version a major part of the&lt;br/&gt;
applications that use this API is likely to crash with unexpected exceptions&lt;br/&gt;
being thrown. That won&apos;t make us any new friends...&lt;/p&gt;</comment>
                            <comment id="12408935" author="ittayd@qlusters.com" created="Thu, 24 Mar 2005 14:26:06 +0000"  >&lt;p&gt;(In reply to comment #16)&lt;/p&gt;

&lt;p&gt;I guess beanutils won&apos;t cover everything. However, ConvertUtils has a registry &lt;br/&gt;
of converters where you can register whatever converter you want. This is how I &lt;br/&gt;
convert all of our enums.&lt;/p&gt;

&lt;p&gt;About API changes: I agree that you have a problem there. I&apos;ve tried the &lt;br/&gt;
approach of creating my own class on top of yours, but ended up writing too much &lt;br/&gt;
code to be worth it. I decided to roll my own (I already have an implementation &lt;br/&gt;
of prefrences, I just needed to update it with new functionality). Maybe I&apos;ll &lt;br/&gt;
post it to you when it is ready.&lt;/p&gt;</comment>
                            <comment id="12408936" author="ebourg" created="Wed, 29 Jun 2005 09:51:52 +0000"  >&lt;p&gt;I changed the summary to make it more descriptive and keep the discussion&lt;br/&gt;
focused on a main issue. I hope I caught the exact intent of the reporter.&lt;/p&gt;</comment>
                            <comment id="12463123" author="oliver.heger@t-online.de" created="Mon, 8 Jan 2007 20:47:35 +0000"  >&lt;p&gt;Setting fix version to the next major release because this will probably involve an API change.&lt;/p&gt;</comment>
                            <comment id="13435884" author="bacar" created="Thu, 16 Aug 2012 10:15:07 +0000"  >&lt;p&gt;Last updates on this issue were in 2007 - did anything happen?&lt;/p&gt;

&lt;p&gt;I would argue that &lt;tt&gt;getString()&lt;/tt&gt; should return the value from the property file &lt;em&gt;verbatim&lt;/em&gt; - not the first item in the list, but not concatenated either - I&apos;m concerned concatenation could end up slightly changing the format, using the wrong delimiter, etc. (Ittay&apos;s suggestion of returning &quot;the string representation of a List&quot; is somewhat ambiguous - does he/she mean &lt;tt&gt;List.toString()&lt;/tt&gt;? This may not be what&apos;s wanted).&lt;/p&gt;

&lt;p&gt;What is the use case for having &lt;tt&gt;getString&lt;/tt&gt; return the first item of a list anyway? I have to say as a newcomer to commons config, this is &lt;em&gt;very&lt;/em&gt; unexpected behaviour. If someone wants the first item of a list, surely they &lt;em&gt;know&lt;/em&gt; that and can just request &lt;tt&gt;config.getStringArray(&quot;foo&quot;)[0]&lt;/tt&gt;, which is clear and explicit.&lt;/p&gt;

&lt;p&gt;As it stands I don&apos;t appear to have a way to parse the following config meaningfully:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
foo=hello, world! 
bar=first,second 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;with foo as a string (&quot;hello, world!&quot;) and bar as a list (&lt;/p&gt;
{&quot;first&quot;, &quot;second&quot;}
&lt;p&gt;).&lt;/p&gt;

&lt;p&gt;I recently asked about how to do this on SO &lt;a href=&quot;http://stackoverflow.com/questions/11973773/can-i-use-both-arrays-and-non-arrays-with-apache-commons-config&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/11973773/can-i-use-both-arrays-and-non-arrays-with-apache-commons-config&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13441411" author="oliver.heger@t-online.de" created="Fri, 24 Aug 2012 19:09:48 +0000"  >&lt;p&gt;There have not been any updates on this issue. Obviously, there are different use cases, and every solution has its pros and cons.&lt;/p&gt;

&lt;p&gt;Your idea to let &lt;tt&gt;getString()&lt;/tt&gt; return the string verbatim would be an option. However, with the current implementation this is not easy to achieve because the parsing of list delimiters is already done when the configuration file is read. So when &lt;tt&gt;getString()&lt;/tt&gt; is called, the value of the property is actually a list. Also, there are other ways to define list properties, e.g. by repeating a property key. How should such cases be handled?&lt;/p&gt;

&lt;p&gt;There are plans to add a small framework for data type conversion. Client code should be able to register custom type converters which are invoked when a configuration property is requested in a specific data type. Maybe this approach can help here, too. There would be a converter for converting a list to a string. Then a client could override this converter with an implementation which fits specific needs.&lt;/p&gt;</comment>
                            <comment id="13749454" author="oliver.heger@t-online.de" created="Sat, 24 Aug 2013 20:00:38 +0000"  >&lt;p&gt;While the requested feature is still not supported out of the box, it is now possible to achieve the desired effect by using a custom &lt;tt&gt;ConversionHandler&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Each configuration object is now associated with a &lt;tt&gt;ConversionHandler&lt;/tt&gt; object. The conversion handler is responsible for all kinds of data type conversions. This includes conversions from complex objects (like arrays or lists) to single values. Here a custom &lt;tt&gt;ConversionHandler&lt;/tt&gt; implementation can hook in to return a verbatim string value or whatever it sees appropriate.&lt;/p&gt;

&lt;p&gt;There is already a default implementation called &lt;tt&gt;DefaultConversionHandler&lt;/tt&gt; which offers some protected methods a subclass may override to adapt conversions. The user&apos;s guide was updated to describe these new features.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34103</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 21 Mar 2005 23:59:34 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>110640</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 14 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i19x73:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>266012</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>