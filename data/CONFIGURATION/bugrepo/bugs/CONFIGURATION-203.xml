<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 19:29:00 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CONFIGURATION-203/CONFIGURATION-203.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CONFIGURATION-203] Make Configuration Serializable</title>
                <link>https://issues.apache.org/jira/browse/CONFIGURATION-203</link>
                <project id="12310467" key="CONFIGURATION">Commons Configuration</project>
                    <description>&lt;p&gt;It would be nice if org.apache.commons.configuration.Configuration extended java.io.Serializable and its implementations were serializable as well.  Theoretically, most configurations are constructed from &quot;serialized&quot; data sources.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12342383">CONFIGURATION-203</key>
            <summary>Make Configuration Serializable</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="thedew">Joe Wolf</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Jul 2005 00:22:27 +0000</created>
                <updated>Thu, 24 Mar 2016 20:13:01 +0000</updated>
                                            <version>1.1</version>
                                    <fixVersion>2.x</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12409849" author="ebourg" created="Thu, 21 Jul 2005 05:15:41 +0000"  >&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CONFIGURATION-150&quot; title=&quot;[configuration] Make Configuration Serialzable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CONFIGURATION-150&quot;&gt;&lt;del&gt;COM-2230&lt;/del&gt;&lt;/a&gt; has been marked as a duplicate of this bug. ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12409850" author="ebourg" created="Thu, 21 Jul 2005 05:29:42 +0000"  >&lt;p&gt;That would make sense since java.util.Properties and ExtendedProperties are&lt;br/&gt;
Serializable. We may want to implement Clonable as well.&lt;/p&gt;</comment>
                            <comment id="12409851" author="ebourg" created="Fri, 22 Jul 2005 02:12:42 +0000"  >&lt;p&gt;Actually it may not be wise to mark Configuration as Serializable, the&lt;br/&gt;
configurations bound to an external resource like JNDIConfiguration,&lt;br/&gt;
DatabaseConfiguration and the web configurations cannot be serialized. The&lt;br/&gt;
FileConfiguration interface is a better candidate for extending Serializable.&lt;/p&gt;</comment>
                            <comment id="12409852" author="ebourg" created="Fri, 22 Jul 2005 03:17:21 +0000"  >&lt;p&gt;This is not as trivial as I thought initially... I made FileConfiguration&lt;br/&gt;
extends Serializable and wrote a test case serializing a PropertiesConfiguration&lt;br/&gt;
to a file. This led me to the following changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;make ReloadingStrategy extend Serializable as well&lt;/li&gt;
	&lt;li&gt;change the type of the reloadLock in AbtractFileConfiguration to something&lt;br/&gt;
else than Object that is serializable. I picked String. I tried to make it&lt;br/&gt;
transient, but it resulted in a NullPointerException when accessing the&lt;br/&gt;
deserialized configuration because it was not initialized. I tried to move the&lt;br/&gt;
initialization in the no arg constructor but it didn&apos;t work, I&apos;m not sure to&lt;br/&gt;
understand why this constructor isn&apos;t called when the deserialized instance is&lt;br/&gt;
build.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It still failed after these changes, because the deserialized configuration was&lt;br/&gt;
actually empty. It appears that the Map in BaseConfiguration is not serialized.&lt;br/&gt;
I put a similar Map in AbstractFileConfiguration and it got serialized property,&lt;br/&gt;
but by simply moving this Map to BaseConfiguration it disappeared from the&lt;br/&gt;
serialized file, I have no idea why.&lt;/p&gt;

&lt;p&gt;I tested with the JDK 1.4.2_08.&lt;/p&gt;

&lt;p&gt;Here is the test added to TestPropertiesConfiguration:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testSerialization() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;code-comment&quot;&gt;// remove the previous serialization file
&lt;/span&gt;        File file = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;code-quote&quot;&gt;&quot;target/configuration.ser&quot;&lt;/span&gt;);
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (file.exists()) {
            file.delete();
        }

        &lt;span class=&quot;code-comment&quot;&gt;// write the configuration to the configuration.ser file
&lt;/span&gt;        ObjectOutputStream out = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ObjectOutputStream(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(file));
        out.writeObject(conf);
        out.close();

        &lt;span class=&quot;code-comment&quot;&gt;// load the configuration from the file
&lt;/span&gt;        ObjectInputStream in = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ObjectInputStream(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FileInputStream(file));
        PropertiesConfiguration conf2 = (PropertiesConfiguration) in.readObject();
        in.close();

        &lt;span class=&quot;code-comment&quot;&gt;// check the deserialized configuration
&lt;/span&gt;        assertNotNull(&lt;span class=&quot;code-quote&quot;&gt;&quot;deserialized configuration &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, conf2);
        assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;filename&quot;&lt;/span&gt;, conf.getFileName(), conf2.getFileName());
        assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;basepath&quot;&lt;/span&gt;, conf.getBasePath(), conf2.getBasePath());
        assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;header&quot;&lt;/span&gt;, conf.getHeader(), conf2.getHeader());

        assertFalse(&lt;span class=&quot;code-quote&quot;&gt;&quot;deserialized configuration empty&quot;&lt;/span&gt;, conf2.isEmpty());
        Iterator keys = conf.getKeys();
        &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (keys.hasNext())
        {
            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; key = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;) keys.next();
            assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;missing key from the deserialized configuration : &quot;&lt;/span&gt; +
key, conf2.containsKey(key));
            assertEquals(&quot;wrong value in the deserialized configuration &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the
key &quot; + key, conf.getProperty(key), conf2.getProperty(key));
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12409853" author="ebourg" created="Fri, 22 Jul 2005 03:23:07 +0000"  >&lt;p&gt;Marking BaseConfiguration as Serializable fixes that, a patch is on the way! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12409854" author="oliver.heger@t-online.de" created="Fri, 22 Jul 2005 18:47:32 +0000"  >&lt;p&gt;I fully agree that serializable configurations are a useful feature.&lt;/p&gt;

&lt;p&gt;However an implementation may be complicated and tricky, especially because a&lt;br/&gt;
configuration may hold references to some other objects: a reloading strategy&lt;br/&gt;
has already been mentioned, an XML document (XMLConfiguration), later maybe&lt;br/&gt;
event listeners, helper objects for interpolation, or strategies for locating&lt;br/&gt;
the source files. Forcing all of these objects to be serializable is a too&lt;br/&gt;
strong restriction IMO. And declaring all these fields as transient may cause&lt;br/&gt;
other problems.&lt;/p&gt;

&lt;p&gt;As an alternative approach: What if not the configuration objects as a whole are&lt;br/&gt;
serialized, but only the important portions (containing the properties)? There&lt;br/&gt;
could be an interface like that:&lt;/p&gt;

&lt;p&gt;public interface SerializableConfiguration&lt;/p&gt;
{
  /** Returns serializable data of this configuration.*/
  Serializable getSerializable();

  /** Initializes this configuration from serialized data.*/
  void initFromSerializable(Serializable data) throws ConfigurationException;
}

&lt;p&gt;This is a bit less convenient to use, but will probably save us a lot of trouble.&lt;/p&gt;</comment>
                            <comment id="12409855" author="ebourg" created="Fri, 22 Jul 2005 19:17:25 +0000"  >&lt;p&gt;Or simply use ConfigurationUtils to convert the configuration into a Properties&lt;br/&gt;
which is Serializable, or load/save the configuration on a stream.&lt;/p&gt;

&lt;p&gt;However I&apos;m not sure this solution will suit the needs. I can think of two use&lt;br/&gt;
cases that would require serializable configurations:&lt;br/&gt;
1. access to a configuration through RMI&lt;br/&gt;
2. restoring a configuration put in a HttpSession when the web container is&lt;br/&gt;
restarted&lt;/p&gt;

&lt;p&gt;In these cases the state of the configuration also matters, we cannot just save&lt;br/&gt;
the properties.&lt;/p&gt;

&lt;p&gt;Another issue worth noting, the delimiter declared in AbstractConfiguration is&lt;br/&gt;
currently static, and consequently not serialized. We will have to change it&lt;br/&gt;
into an instance variable, this has been already discussed but implementing the&lt;br/&gt;
serialization is an additional motivation.&lt;/p&gt;</comment>
                            <comment id="12478222" author="joehni" created="Tue, 6 Mar 2007 00:22:00 +0000"  >&lt;p&gt;You may consider implementing the writeReplace method. This allows you to serialize every Configuration into a tailored version especially designed for serialization. You may even have different impls e.g. a different one for hierarchical configs. However, some features like reloading do not make really sense for some sources ... what is a file URL really worth after serialization?&lt;/p&gt;</comment>
                            <comment id="12656362" author="ralph.goers@dslextreme.com" created="Sun, 14 Dec 2008 04:16:40 +0000"  >&lt;p&gt;I&apos;m trying to understand the use case for this. Under what circumstances would this be useful? Why wouldn&apos;t &quot;serialization&quot; simply mean calling save?&lt;/p&gt;</comment>
                            <comment id="12680243" author="joehni" created="Mon, 9 Mar 2009 19:43:08 +0000"  >&lt;p&gt;No, it means also passing it as argument in a EJB call or saving it in a session.&lt;/p&gt;</comment>
                            <comment id="12701183" author="jcbollinger" created="Tue, 21 Apr 2009 15:47:00 +0000"  >&lt;p&gt;I would recommend that org.apache.commons.configuration.Configuration not be modified to extend Serializable, because that imposes a requirement on &lt;b&gt;all&lt;/b&gt; implementations to be serializable.  I think that&apos;s far too strong.  Moreover, it is not necessary for enabling clients to be serializable: an otherwise serializable object that refers to a org.apache.commons.configuration.Configuration (by that formal type) is serializable if the Configuration &lt;b&gt;implementation&lt;/b&gt; is Serializable, regardless of whether the Configuration interface extends java.io.Serializable.&lt;/p&gt;

&lt;p&gt;With that said, it is highly desirable to make the provided concrete Configuration implementations serializable wherever possible.  That will enable them to be passed over RMI (including to remote EJBs) and to be held by passivated objects (sessions, EJB instances, etc.), among other uses.  On the other hand, implementations tied to live sources (JNDI, database) are unlikely candidates for being serializable.&lt;/p&gt;

&lt;p&gt;This is a big endeavor, even in the more limited form I&apos;m suggesting.  Perhaps it would be useful to split it up.&lt;/p&gt;</comment>
                            <comment id="12701189" author="jcbollinger" created="Tue, 21 Apr 2009 16:22:05 +0000"  >&lt;p&gt;Also, I&apos;d guess that implementing this task properly probably requires some refactoring that would make it more suitable for release 2.0 than for release 1.x.  For example, BaseConfiguration probably should be serializable, but some of its subclasses (i.e. AbstractFileConfiguration and its descendents) probably shouldn&apos;t.&lt;/p&gt;</comment>
                            <comment id="12701819" author="oliver.heger@t-online.de" created="Thu, 23 Apr 2009 06:09:29 +0000"  >&lt;p&gt;John, I agree with most of your points.&lt;/p&gt;

&lt;p&gt;However, I wonder whether we really can make a concrete Configuration implementation serializable. The problem is that each important implementation is associated with a bunch of helper objects like interpolators, lookups, expression strategies, etc. Many of these objects would have to be made serializable, too, and its questionable whether this is feasible or even desired.&lt;/p&gt;

&lt;p&gt;Maybe we need a different approach. One way could be to have a method like &lt;tt&gt;Serializable getContent()&lt;/tt&gt; in the &lt;tt&gt;Configuration&lt;/tt&gt; interface. This method would return a serializable object storing the pure data of the configuration. In addition, concrete Configuration implementations could define a constructor that takes a &lt;tt&gt;Serializable&lt;/tt&gt; object and initializes the configuration with this data.&lt;/p&gt;

&lt;p&gt;Based on this mechanism we could define a &quot;canonical configuration serialization format&quot;, probably XML-based as XML is capable of storing all the hierarchical structure. This would allow for easy data conversion, e.g. the data from a &lt;tt&gt;PropertiesConfiguration&lt;/tt&gt; is fetched and then an &lt;tt&gt;XMLConfiguration&lt;/tt&gt; is constructed with it.&lt;/p&gt;

&lt;p&gt;Of course, this is not as convenient as serializing &lt;tt&gt;Configuration&lt;/tt&gt; objects directly. But maybe it&apos;s the closest thing we can get?&lt;/p&gt;</comment>
                            <comment id="12701823" author="ralph.goers@dslextreme.com" created="Thu, 23 Apr 2009 06:37:34 +0000"  >&lt;p&gt;Frankly, I don&apos;t really understand how having a Configuration being Serializable is particularly useful and the complexity involved in this seems to be way out of proportion with the benefit.&lt;/p&gt;

&lt;p&gt;In the case of a CompositeConfiguration that would mean serializing all the configurations that participate and then including them in the serialized composite. What is the benefit vs creating a new Composite using the configurations that make it up. In the case of DefaultConfigurationBuilder, which is an &quot;extended&quot; XMLConfiguration, the serialized form of this would be extremely complex. Some of this could be mitigated by having the serialized form embed the initial configuration file used by DefaultConfigurationBuilder and marking the fields transient, but if you do that why not just go the whole route and have it build a new CombinedConfiguration?&lt;/p&gt;

&lt;p&gt;And what would be the point of storing an XML serialized format of the Configuration when the configuration data itself is an XML document?  That is just seems silly.  &lt;/p&gt;

&lt;p&gt;Also, at the very least it seems highly unlikely this will be accomplished in 1.x. So if this isn&apos;t closed as wontfix then I would suggest the version be changed to 2.0.&lt;/p&gt;</comment>
                            <comment id="12702713" author="oliver.heger@t-online.de" created="Sat, 25 Apr 2009 15:39:53 +0000"  >&lt;p&gt;Serializing a Configuration only to make it persistent certainly does not make much sense. But the other use cases listed in this ticket seem valid to me.&lt;/p&gt;

&lt;p&gt;Consider a web application that creates a Configuration with settings for a user on log in. This Configuration should be stored in the Session, so it should be serializable. It may also be used as a parameter of a call to a remote EJB, which also requires it to be serializable.&lt;/p&gt;

&lt;p&gt;But as I said, I don&apos;t believe that we can make concrete Configuration implementations themselves serializable, only the pure data they contain. In the case of combined configurations that would mean creating a serializable data object containing the data of all child configurations involved.&lt;/p&gt;

&lt;p&gt;Anyway, I agree that this issue will probably not be addressed in the 1.x series. So I am going to change the fix version.&lt;/p&gt;</comment>
                            <comment id="12702857" author="ralph.goers@dslextreme.com" created="Sun, 26 Apr 2009 07:20:53 +0000"  >&lt;p&gt;With regards to the situations you mentioned I would strongly argue that there are much better solutions than serializing the whole configuration. Especially in the case of the EJB, in a properly designed system the client side and the server side would usually have completely different configuration data so passing the full set of configuration would be a waste. Furthermore, passing the data would hardly be better than having the server side just read its configuration.  &lt;/p&gt;

&lt;p&gt;If we assume that the configuration itself wouldn&apos;t be Serializable, as we both seem to agree, then storing something else in the session isn&apos;t of much value since you would have to keep reconstructing the Configuration to actually access the data. If you really wanted to do this it would make much more sense to just add save(OutputStream) to the base Configuration interface. Then the application could save any configuration to a byte array and load it back in again later. As for the end user data in the session, that really should be some sort of UserPreferences object, not a serialized configuration object. The UserPreferences object could certainly be backed by a Configuration, but once the object is built the Configuration would never be needed again in that session unless the user changes a setting.&lt;/p&gt;

&lt;p&gt;I have no problem setting this to 2.0. I am just stating my doubts that anything will ever happen with this issue.&lt;/p&gt;</comment>
                            <comment id="12702889" author="jcbollinger" created="Sun, 26 Apr 2009 14:15:48 +0000"  >&lt;p&gt;The argument that developers just shouldn&apos;t do that isn&apos;t very appealing to me, though it is an accurate description of one of the outcomes of the fact that Configurations aren&apos;t serializable.  Moreover, it misses the point of why serializability is useful: the main use case is &lt;b&gt;not&lt;/b&gt; the client passing configuration to the server to configure it (or vise versa); rather it is serialization of objects on either side that hold references to their own configuration so that they can be passed over RMI (including to remote EJBs) or written to external storage (e.g. to passivate the object).  It doesn&apos;t matter how or whether the configuration is &lt;b&gt;used&lt;/b&gt; after serialization / deserialization because you don&apos;t even get there successfully.&lt;/p&gt;

&lt;p&gt;With that said, I agree that many of the concrete Configuration implementations probably resist being made serializable.  If enabling externalization of configuration objects were a priority then I would argue for a redesign of the API to separate the data structure(s) for configuration from the mechanisms for loading / reloading them.  That would be a rather dramatic shift, however, and I suspect there isn&apos;t going to be much support for doing that.&lt;/p&gt;

&lt;p&gt;As for adding a save(OutputStream) method to Configuration, I don&apos;t think that is meaningfully different from making Configuration extend Serializable.  If a configuration can implement save(OutputStream) then it can also implement the readObject() and writeObject() methods that would enable it to be serialized and deserialized by the standard mechanism.&lt;/p&gt;</comment>
                            <comment id="13604289" author="oliver.heger@t-online.de" created="Sat, 16 Mar 2013 15:01:22 +0000"  >&lt;p&gt;In times of CDI, wouldn&apos;t it be possible to write an extension which loads a configuration and injects it into interested beans based on annotation? Or even inject only specific configuration property values? This approach allows using configuration objects in a JEE environment without requiring that they have to be serializable. Maybe something for the DeltaSpike project?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12636585">CONFIGURATION-531</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12342392">CONFIGURATION-155</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35804</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 21 Jul 2005 05:15:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>110771</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 38 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i19x7r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>266015</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>