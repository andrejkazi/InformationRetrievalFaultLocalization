<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="CONFIGURATION">
	<bug id="598" opendate="2015-04-10 12:38:48" fixdate="2015-04-10 20:13:09" resolution="Fixed">
		<buginformation>
			<summary>There are 2 different ConfigurationBuilder interfaces</summary>
			<description>(This is my first time entering a bug here; at least searching with ConfigurationBuilder here did not bring any relevant issues so I wanted to post this)
There are 2 different ConfigurationBuilder interfaces: 
one is org.apache.commons.configuration2.ConfigurationBuilder and other is
org.apache.commons.configuration2.builder.ConfigurationBuilder
The base package has 


Configuration 	getConfiguration()


while the builder package has 


T 	getConfiguration()


and the (&amp;lt;T extends Configuration&amp;gt; as generic parameter in the interface)
I assume this is a bug, since nothing implements the base package one and all ConfigurationBuilder implementations implement the one in the builder subpackage. It is at least confusing in case the base package one is intended just for clients to implement. Also documentation points to the builder package one.
</description>
			<version>2.0-alpha1</version>
			<fixedVersion>2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.apache.commons.configuration2.ConfigurationBuilder.java</file>
		</fixedFiles>
	</bug>
	<bug id="609" opendate="2015-08-25 12:19:06" fixdate="2015-09-01 14:27:29" resolution="Fixed">
		<buginformation>
			<summary>When using a VFSFileSystem on a PropertiesConfiguration, processing an include token defaults back to DefaultFileSystem</summary>
			<description>I have uploaded two files to HDFS.

bob.properties:
==
include=fred.properties
==

fred.properties
==
key=value
==

If I load fred.properties and evaluated the "key", value is returned as expected. If I load bob.properties, I get a ConfigurationException.
Here is the code snippet, please change setFileName() to reflect both cases:
		FileSystem fsTest = new VFSFileSystem();
		fsTest.setFileOptionsProvider(new HDFSOptionsProvider());
		Parameters params = new Parameters();
		FileBasedConfigurationBuilder&amp;lt;FileBasedConfiguration&amp;gt; builder =
		    new FileBasedConfigurationBuilder&amp;lt;FileBasedConfiguration&amp;gt;(PropertiesConfiguration.class)
		    .configure(params.fileBased()
		    	.setLocationStrategy(new FileSystemLocationStrategy())
		    	.setBasePath("hdfs://localhost:8020/user/myusername")
		        .setFileName("bob.properties")
		        .setFileSystem(fsTest));
		Configuration config;
		try 
{
			config = builder.getConfiguration();
			System.out.println(config.getString("key"));
		}
 catch (ConfigurationException e) 
{
			e.printStackTrace();
		}

--------------------
HDFSOptionsProvider.java:
==
public class HDFSOptionsProvider implements FileOptionsProvider {
	@Override
	public Map&amp;lt;String, Object&amp;gt; getOptions() 
{
		Map&amp;lt;String, Object&amp;gt; opts = new HashMap&amp;lt;String, Object&amp;gt;();
		opts.put("DefaultProvider", HdfsFileProvider.class);
		return  opts;
	}
}
==
-------------
Here is the Exception trace:
15/08/25 14:14:46 INFO impl.StandardFileSystemManager: Using "/tmp/vfs_cache" as temporary files store.
15/08/25 14:14:47 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
org.apache.commons.configuration2.ex.ConfigurationException: Unable to load the configuration from the URL hdfs://localhost:8020/user/myusername/fred.properties
	at org.apache.commons.configuration2.io.DefaultFileSystem.getInputStream(DefaultFileSystem.java:56)
	at org.apache.commons.configuration2.io.FileHandler.load(FileHandler.java:979)
	at org.apache.commons.configuration2.io.FileHandler.load(FileHandler.java:740)
	at org.apache.commons.configuration2.PropertiesConfiguration.loadIncludeFile(PropertiesConfiguration.java:1419)
	at org.apache.commons.configuration2.PropertiesConfiguration.propertyLoaded(PropertiesConfiguration.java:571)
	at org.apache.commons.configuration2.PropertiesConfigurationLayout.load(PropertiesConfigurationLayout.java:494)
	at org.apache.commons.configuration2.PropertiesConfiguration.read(PropertiesConfiguration.java:509)
	at org.apache.commons.configuration2.io.FileHandler.loadFromReader(FileHandler.java:1124)
	at org.apache.commons.configuration2.io.FileHandler.loadFromTransformedStream(FileHandler.java:1110)
	at org.apache.commons.configuration2.io.FileHandler.loadFromStream(FileHandler.java:1049)
	at org.apache.commons.configuration2.io.FileHandler.load(FileHandler.java:980)
	at org.apache.commons.configuration2.io.FileHandler.load(FileHandler.java:963)
	at org.apache.commons.configuration2.io.FileHandler.load(FileHandler.java:692)
	at org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder.initFileHandler(FileBasedConfigurationBuilder.java:312)
	at org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder.initResultInstance(FileBasedConfigurationBuilder.java:291)
	at org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder.initResultInstance(FileBasedConfigurationBuilder.java:60)
	at org.apache.commons.configuration2.builder.BasicConfigurationBuilder.createResult(BasicConfigurationBuilder.java:421)
	at org.apache.commons.configuration2.builder.BasicConfigurationBuilder.getConfiguration(BasicConfigurationBuilder.java:285)
	at com.secureops.config.TestLoadConf.main(TestLoadConf.java:33)
Caused by: java.io.IOException: VFS URLs can only be used with VFS APIs
	at org.apache.commons.configuration2.io.VFSFileSystem$VFSURLStreamHandler.openConnection(VFSFileSystem.java:368)
	at java.net.URL.openConnection(URL.java:975)
	at java.net.URL.openStream(URL.java:1041)
	at org.apache.commons.configuration2.io.DefaultFileSystem.getInputStream(DefaultFileSystem.java:52)
	... 18 more</description>
			<version>2.0</version>
			<fixedVersion>2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration2.PropertiesConfiguration.java</file>
			<file type="M">org.apache.commons.configuration2.TestPropertiesConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="610" opendate="2015-09-09 19:06:51" fixdate="2015-11-20 20:39:54" resolution="Fixed">
		<buginformation>
			<summary>Improve Configuration Variable Documentation</summary>
			<description>The JavaDoc for Class PropertiesConfiguration  lists a very handy feature of Configuration, which is variable substitution.  The behavior can be seen in the example file on the JavaDoc (good).
But it&amp;amp;apos;s not in the preceding list of features.  It would be nice to have a little writeup describing the intended behavior:  What is supposed to happen if you have an undefined ref?  What about nested refs?  What about circular refs? 
And it was interesting to find that the substitution occurred during get time rather than load (unexpected), and that if one calls the wrong get() method then the substitution will not happen.  (Is that intended behavior?)  This should be called out in the description as well as the individual method JavaDocs.</description>
			<version>2.0-alpha1</version>
			<fixedVersion>2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration2.XMLConfiguration.java</file>
			<file type="M">org.apache.commons.configuration2.INIConfiguration.java</file>
			<file type="M">org.apache.commons.configuration2.PropertiesConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="618" opendate="2016-02-05 08:07:39" fixdate="2016-02-07 18:15:12" resolution="Fixed">
		<buginformation>
			<summary>Accessing missing properties of immutable subset throws UndeclaredThrowableException instead of NoSuchElementException</summary>
			<description>When I access a non-existing property of a configuration that has ThrowExceptionOnMissing set an java.lang.reflect.UndeclaredThrowableException is thrown. I think the desired behaviour would be to pass the underlying java.util.NoSuchElementException through from the ImmutableConfigurationInvocationHandler.
Example code:


import org.apache.commons.configuration2.ImmutableConfiguration;
import org.apache.commons.configuration2.PropertiesConfiguration;

public class ImmutableConfigurationStacktraceTest {

	public static void main(String[] args) {
		//create empty PropertiesConfiguration
		PropertiesConfiguration propertiesConfiguration = new PropertiesConfiguration();
		//throw error when non-existing property is requested
		propertiesConfiguration.setThrowExceptionOnMissing(true);
		
		//get immutable subset handled by ImmutableConfigurationInvocationHandler
		ImmutableConfiguration subset = propertiesConfiguration.immutableSubset("");
		
		//this should throw java.util.NoSuchElementException
		subset.getString("whoops!");
	}

}


gives the stacktrace:


Exception in thread "main" java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy0.getString(Unknown Source)
	at test.main(test.java:10)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.apache.commons.configuration2.ImmutableConfigurationInvocationHandler.invoke(ImmutableConfigurationInvocationHandler.java:79)
	... 2 more
Caused by: java.util.NoSuchElementException: Key &amp;amp;apos;whoops!&amp;amp;apos; does not map to an existing object!
	at org.apache.commons.configuration2.AbstractConfiguration.throwMissingPropertyException(AbstractConfiguration.java:1873)
	at org.apache.commons.configuration2.AbstractConfiguration.convert(AbstractConfiguration.java:1784)
	at org.apache.commons.configuration2.AbstractConfiguration.getString(AbstractConfiguration.java:1343)
	... 7 more

</description>
			<version>2.0-beta2</version>
			<fixedVersion>2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration2.TestImmutableConfiguration.java</file>
			<file type="M">org.apache.commons.configuration2.ImmutableConfigurationInvocationHandler.java</file>
		</fixedFiles>
	</bug>
	<bug id="622" opendate="2016-04-13 20:59:47" fixdate="2016-04-16 15:02:56" resolution="Fixed">
		<buginformation>
			<summary>Writing INI file, keys with . become ..</summary>
			<description>Here is sample input config:
[learningtask]
trains.lp = 5
after new INIConfiguration(conf).write() it becomes:
[learningtask]
trains..lp = 5
seems related to the escaping of keys in the ExpressionEngine</description>
			<version>2.0</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration2.INIConfiguration.java</file>
			<file type="M">org.apache.commons.configuration2.TestINIConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="634" opendate="2016-06-21 17:32:18" fixdate="2016-06-24 15:52:33" resolution="Fixed">
		<buginformation>
			<summary>BasePath is incorrectly computed while init of CompositeConfiguration</summary>
			<description>The base path should be just "app" instead of 

file:///C:/path/to/app

 because of which the code is trying to locate config.properties in the following path: 

C:\path\to\file:\C:\path\to\app\config.properties

In the below snippet basepath is good when handler.locate() runs but fails when running handler.load()
org.apache.commons.configuration2.builder.FileLocatorUtils

protected void initFileHandler(FileHandler handler)
            throws ConfigurationException
    {
        initEncoding(handler);
        if (handler.isLocationDefined())
        {
            handler.locate();
            handler.load();
        }
    }


If you would like to see the basepath being manipulated keep a debug point at file.isFile() in the below snippet
org.apache.commons.configuration2.io.HomeDirectoryLocationStrategy

public URL locate(FileSystem fileSystem, FileLocator locator)
    {
        if (StringUtils.isNotEmpty(locator.getFileName()))
        {
            String basePath = fetchBasePath(locator);
            File file =
                    FileLocatorUtils.constructFile(basePath,
                            locator.getFileName());
            if (file.isFile())
            {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }


Snippet failing:


CompositeConfiguration config = new CompositeConfiguration();
config.addConfiguration(new SystemConfiguration());

final FileBasedConfigurationBuilder&amp;lt;FileBasedConfiguration&amp;gt; homeDirConfigurationBuilder
        = new FileBasedConfigurationBuilder&amp;lt;&amp;gt;(PropertiesConfiguration.class);
final PropertiesBuilderParameters homeDirProperties = new Parameters().properties();
final FileBasedConfigurationBuilder&amp;lt;FileBasedConfiguration&amp;gt; configurationBuilder
        = new FileBasedConfigurationBuilder&amp;lt;&amp;gt;(PropertiesConfiguration.class);
final PropertiesBuilderParameters properties = new Parameters().properties();

FileBasedConfigurationBuilder&amp;lt;FileBasedConfiguration&amp;gt; builder1 = homeDirConfigurationBuilder.configure(
        homeDirProperties.setLocationStrategy(new HomeDirectoryLocationStrategy(true))
                .setBasePath("app")
                .setListDelimiterHandler(new DefaultListDelimiterHandler(&amp;amp;apos;,&amp;amp;apos;))
                .setFileName("config.properties"));
FileBasedConfigurationBuilder&amp;lt;FileBasedConfiguration&amp;gt; builder2 = configurationBuilder.configure(
        properties.setLocationStrategy(new ClasspathLocationStrategy())
                .setListDelimiterHandler(new DefaultListDelimiterHandler(&amp;amp;apos;,&amp;amp;apos;))
                .setFileName("default_config.properties"));
try {
    // TODO Fails due to a bug in commons configuration FileLocatorUtils#createFullyInitializedLocatorFromURL
    config.addConfiguration(builder1.getConfiguration());
    config.addConfiguration(builder2.getConfiguration());
} catch (ConfigurationException e) {
    log.warn(configMarker, "Failed to load the properties file, loading defaults", e);
}


Stacktrace:

org.apache.commons.configuration2.ex.ConfigurationException: Could not locate: org.apache.commons.configuration2.io.FileLocator@353d0772[fileName=config.properties,basePath=file:///C:/path/to/app/,sourceURL=file:/C:/path/to/app/config.properties,encoding=ISO-8859-1,fileSystem=&amp;lt;null&amp;gt;,locationStrategy=org.apache.commons.configuration2.io.HomeDirectoryLocationStrategy@10e41621]
	at org.apache.commons.configuration2.io.FileLocatorUtils.locateOrThrow(FileLocatorUtils.java:346) ~[commons-configuration2-2.0.jar:2.0]
	at org.apache.commons.configuration2.io.FileHandler.load(FileHandler.java:972) ~[commons-configuration2-2.0.jar:2.0]
	at org.apache.commons.configuration2.io.FileHandler.load(FileHandler.java:702) ~[commons-configuration2-2.0.jar:2.0]
	at org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder.initFileHandler(FileBasedConfigurationBuilder.java:312) ~[commons-configuration2-2.0.jar:2.0]
	at org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder.initResultInstance(FileBasedConfigurationBuilder.java:291) ~[commons-configuration2-2.0.jar:2.0]
	at org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder.initResultInstance(FileBasedConfigurationBuilder.java:60) ~[commons-configuration2-2.0.jar:2.0]
	at org.apache.commons.configuration2.builder.BasicConfigurationBuilder.createResult(BasicConfigurationBuilder.java:421) ~[commons-configuration2-2.0.jar:2.0]
	at org.apache.commons.configuration2.builder.BasicConfigurationBuilder.getConfiguration(BasicConfigurationBuilder.java:285) ~[commons-configuration2-2.0.jar:2.0]

</description>
			<version>2.0</version>
			<fixedVersion>2.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration2.io.FileLocatorUtils.java</file>
			<file type="M">org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder.java</file>
		</fixedFiles>
	</bug>
	<bug id="627" opendate="2016-05-04 22:54:12" fixdate="2016-10-06 19:54:41" resolution="Fixed">
		<buginformation>
			<summary>BeanHelper exception on XMLConfiguration builder.getConfiguration()</summary>
			<description>Creating an XMLConfiguration from a file with a builder:


builder =
        new FileBasedConfigurationBuilder&amp;lt;XMLConfiguration&amp;gt;(
                XMLConfiguration.class)
                        .configure(params.xml()
                                .setFileName(
                                        propsFile.getCanonicalPath())
                                .setValidating(false));

config = builder.getConfiguration();


Causes a non-halting exception originating in org.apache.commons.configuration2.beanutils.BeanHelper, method 
private static boolean isPropertyWriteable(Object bean, String propName) with parameters XMLConfiguration, "validating".
The exception:

    May 04, 2016 3:29:26 PM org.apache.commons.beanutils.FluentPropertyBeanIntrospector introspect
    WARNING: Error when creating PropertyDescriptor for public final void org.apache.commons.configuration2.AbstractConfiguration.setProperty(java.lang.String,java.lang.Object)! Ignoring this property.
    java.beans.IntrospectionException: bad write method arg count: public final void org.apache.commons.configuration2.AbstractConfiguration.setProperty(java.lang.String,java.lang.Object)
        at java.beans.PropertyDescriptor.findPropertyType(PropertyDescriptor.java:657)
        at java.beans.PropertyDescriptor.setWriteMethod(PropertyDescriptor.java:327)
        at java.beans.PropertyDescriptor.&amp;lt;init&amp;gt;(PropertyDescriptor.java:139)
        at org.apache.commons.beanutils.FluentPropertyBeanIntrospector.createFluentPropertyDescritor(FluentPropertyBeanIntrospector.java:177)
        at org.apache.commons.beanutils.FluentPropertyBeanIntrospector.introspect(FluentPropertyBeanIntrospector.java:140)
        at org.apache.commons.beanutils.PropertyUtilsBean.fetchIntrospectionData(PropertyUtilsBean.java:2234)
        at org.apache.commons.beanutils.PropertyUtilsBean.getIntrospectionData(PropertyUtilsBean.java:2215)
        at org.apache.commons.beanutils.PropertyUtilsBean.getPropertyDescriptor(PropertyUtilsBean.java:950)
        at org.apache.commons.beanutils.PropertyUtilsBean.isWriteable(PropertyUtilsBean.java:1466)
        at org.apache.commons.configuration2.beanutils.BeanHelper.isPropertyWriteable(BeanHelper.java:521)
        at org.apache.commons.configuration2.beanutils.BeanHelper.initProperty(BeanHelper.java:357)
        at org.apache.commons.configuration2.beanutils.BeanHelper.initBeanProperties(BeanHelper.java:273)
        at org.apache.commons.configuration2.beanutils.BeanHelper.initBean(BeanHelper.java:192)
        at org.apache.commons.configuration2.beanutils.BeanHelper$BeanCreationContextImpl.initBean(BeanHelper.java:669)
        at org.apache.commons.configuration2.beanutils.DefaultBeanFactory.initBeanInstance(DefaultBeanFactory.java:162)
        at org.apache.commons.configuration2.beanutils.DefaultBeanFactory.createBean(DefaultBeanFactory.java:116)
        at org.apache.commons.configuration2.beanutils.BeanHelper.createBean(BeanHelper.java:459)
        at org.apache.commons.configuration2.beanutils.BeanHelper.createBean(BeanHelper.java:479)
        at org.apache.commons.configuration2.beanutils.BeanHelper.createBean(BeanHelper.java:492)
        at org.apache.commons.configuration2.builder.BasicConfigurationBuilder.createResultInstance(BasicConfigurationBuilder.java:447)
        at org.apache.commons.configuration2.builder.BasicConfigurationBuilder.createResult(BasicConfigurationBuilder.java:417)
    at org.apache.commons.configuration2.builder.BasicConfigurationBuilder.getConfiguration(BasicConfigurationBuilder.java:285)

</description>
			<version>2.0</version>
			<fixedVersion>2.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl.java</file>
		</fixedFiles>
		<links>
			<link type="Blocker" description="is blocked by">492</link>
			<link type="Duplicate" description="duplicates">477</link>
		</links>
	</bug>
</bugrepository>