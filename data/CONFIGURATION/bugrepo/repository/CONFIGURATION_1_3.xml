<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="CONFIGURATION">
	<bug id="230" opendate="2006-10-13 04:09:08" fixdate="2006-10-21 15:23:54" resolution="Fixed">
		<buginformation>
			<summary>XPathExpressionEngine nodeKey method create a wrong key for attribute node</summary>
			<description>In org.apache.commons.configuration.tree.xpath.XPathExpressionEngine line 178
            if (node.isAttribute())
            {
                buf.append(ATTR_DELIMITER);
            }

should be changed to 
            if (node.isAttribute()) 
{
	buf.append(NODE_PATH_DELIMITERS);
            }

Using ATTR_DELIMITER will create key like element@attribute rather than element/@attribute and make config reload fail.</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.tree.xpath.TestXPathExpressionEngine.java</file>
			<file type="M">org.apache.commons.configuration.TestXMLConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.tree.xpath.XPathExpressionEngine.java</file>
		</fixedFiles>
	</bug>
	<bug id="233" opendate="2006-10-21 18:16:07" fixdate="2006-10-28 15:11:24" resolution="Fixed">
		<buginformation>
			<summary>Incomplete interpolation in CompositeConfiguration.getList()</summary>
			<description>Interpolsation is mostly done by AbstractConfiguration. All classes that override get methods of AbstractConfiguration need to be careful not to break interpolsation.
The class CompositeConfiguration overrides getList() to easily chain the results of getList for its subconfigurations. The calls to getList() in the subconfigurations does interpolsation but only inside the subconfiguration. The combined lists never get interpolated in the whole CompositeConfiguration. So whenever a reference in the value refers to a property in another subconfiguration, interpolation breaks.
Since all the scalar get methods correctly interpolate between different sub configurations, I assume, that this special behavior in getList() is not intended.
A simple test case would be using the ConfigurationFactory with a config.xml, that uses two property files x.properties:
x.1=a
x.2=b
and y.properties:
y=$
{x.1}
, $
{x.2}

and then calling getList for the key "y".
The attached patch fixes the problem locally in CompositeConfiguration. It&amp;amp;apos;s not very elegant, but tries to keep the fix local.
The patch should work for 1.2, 1.3 and trunk, since getList() in CompositeConfiguration ist the same in these versions.</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.TestCompositeConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.CompositeConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="235" opendate="2006-10-26 17:49:49" fixdate="2006-10-30 20:52:16" resolution="Fixed">
		<buginformation>
			<summary>variable interpolation problem</summary>
			<description>interpolation of variables in Subsets doesn&amp;amp;apos;t work, if they are not accessed via getString(). The following
example illustrates the problem:
BaseConfiguration oBase = new BaseConfiguration();
oBase.addProperty( "a.b", new Integer(2) );
oBase.addProperty( "a.c", "$
{a.b}
" );
// as expected: 2
int iValueBaseConfig = oBase.getInt( "a.c" );
String strValueBaseConfig = oBase.getString("a.c");
// as expected: 2
String strValueSubset = oBase.subset("a").getString("c");
// ConversionException, &amp;amp;apos;c&amp;amp;apos; doesn&amp;amp;apos;t map to an Integer object
int iValueSubset = oBase.subset("a").getInt("c");
</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.TestBaseConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.SubsetConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="229" opendate="2006-10-03 14:52:04" fixdate="2006-11-02 21:28:00" resolution="Fixed">
		<buginformation>
			<summary>config : load for a configuration node is called before parsing is complete : attributes ignored</summary>
			<description>Hi there
i have noticed the following issue which appears to be a bug. (Tested on 1.3 however the version doesn&amp;amp;apos;t appear above)
createObject from FileConfigurationFactory(DigesterConfigurationFactory) set fileName and fires load of properties : 
public Object createObject(Attributes attributes) throws Exception
        {
            FileConfiguration conf = createConfiguration(attributes);
            conf.setBasePath(getBasePath());
            conf.setFileName(attributes.getValue(ATTR_FILENAME));
            try
            {
                log.info("Trying to load configuration " + conf.getFileName());
                conf.load();
            }

However digester invokes createObject when the object is instancied and before setting any attributes. 
All other attributes beside fileName and basePath are not read in time and therefore are ignored during load.
I guess load should be called when node initialization is complete, possibly using a proper digester rule. 
Regards,
andr
</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.TestConfigurationFactory.java</file>
			<file type="M">org.apache.commons.configuration.ConfigurationFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="242" opendate="2006-12-02 18:09:41" fixdate="2006-12-02 18:22:36" resolution="Fixed">
		<buginformation>
			<summary>The configuration returned by HierarchicalConfiguration.subset() does not globally interpolate</summary>
			<description>Interpolation is only performed in the subset configuration itself. If the referenced property is not in the subset (but somewhere else in the parent configuration), it cannot be resolved. Interpolation should take all properties of the parent configuration into account.</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.HierarchicalConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.TestSubnodeConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.TestHierarchicalConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="241" opendate="2006-12-02 00:03:48" fixdate="2006-12-02 18:45:38" resolution="Fixed">
		<buginformation>
			<summary>clearProperty() does not generate events</summary>
			<description>I am loading configuration information from multiple sources and have registered a listener with the resulting configuration object. Unfortunately the listener does not receive "clear property" events. I&amp;amp;apos;ve confirmed that it can properly receive other events (like "set property"), and that calls to "clearProperty()" do actually clear the property, so I believe this may be a bug in commons-configuration. I&amp;amp;apos;ve tried setting "details" to true, which had no effect. Below is a watered down version of what I am doing (note, my configuration file simply pulls in a property file containing this property: name.first=Mike):
ConfigurationFactory configurationFactory = new ConfigurationFactory();
URL configFileURL = ... get the config file ...
configurationFactory.setConfigurationURL(configFileURL);
Configuration configuration = ConfigurationFactory.getConfiguration();
configuration.addConfigurationListener(new ConfigurationListener() {
    public void configurationChanged(ConfigurationEvent e) 
{
        System.out.println(e.getPropertyName() + ": " + e.getPropertyValue());
    }
});
System.out.println(configuration.getProperty("name.first")); // prints "Mike"
configuration.claerProperty("name.first")); // no output whatsoever
System.out.println(configuration.getProperty("name.first")); // prints "null"</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.TestCompositeConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.CompositeConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="232" opendate="2006-10-16 12:23:51" fixdate="2006-12-22 18:22:43" resolution="Fixed">
		<buginformation>
			<summary>ConfigurationUtils spews directly on std.err when exceptions</summary>
			<description>ConfigurationUtils:
public static URL locate(String base, String name) {
  3 x :
  catch ([Malformed|IO]URLException e) 
{
    e.printStackTrace();
  }
}
.. say no more.
But while we&amp;amp;apos;re at it, the log-message (which, for some reason, actually goes to a logger, not uglily to the system) states "Configuration loaded from ..", which isn&amp;amp;apos;t true: The thing isn&amp;amp;apos;t loaded yet; it will be loaded.  "Loading configuration from .." would be better, or maybe "Will be loading configuration from ..". In addition, these log-lines could state what was the "base", and in particular the case where it loads from "base path", the whole line reads wrong.
For example: "Loading configuration ["+name+"] from base path ["+base+"].." and similar for the other lines.</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.AbstractFileConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.ConfigurationUtils.java</file>
			<file type="M">org.apache.commons.configuration.plist.XMLPropertyListConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="252" opendate="2007-02-01 15:19:07" fixdate="2007-02-03 16:20:50" resolution="Fixed">
		<buginformation>
			<summary>Detection of absolute fileNames when configuration sources are defined in a JAR file</summary>
			<description>When using several configuration sources, the sources are defined in a an xml attribute like 
fileName="usergui.properties"
The method org.apache.commons.configuration.ConfigurationUtils.getFile(String basePath, String fileName) converts the basePath and fileName into a File.
The JavaDoc says: "The parameter strings can be relative files, absolute files and URLs as well."
The file containing the definition of the configuration sources will become the basePath of this method.
After a log of debugging I found, that if the basePath start with "jar:" the method assumes that the fileName is relative, evene if it&amp;amp;apos;s absolute. This happens, because there&amp;amp;apos;s a ProtocolHandler for Jar files and "jar:" is a valid protocol. So the statement "new URL(new URL(basePath), fileName)" doesn&amp;amp;apos;t throw a MalformedUrlException.
Since the URL is valid, it&amp;amp;apos;s never checked, if the fileName may be absolute. 
Attention: this is only the case on Unix/Linux, since this is a valid URL
jar:file:/C:/myjar.jar!/my-config.xml/someprops.properties
while under Windows, a MalformedUrlException will be thrown, when the fileName is absolute: 
jar:file:/C:/myjar.jar!/my-config.xml/c:/someprops.properties
I attached a patch that checks, whether the URL protocol is "jar" and the fileName is absolute. If so, the absolute file will be used.</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.ConfigurationUtils.java</file>
			<file type="M">org.apache.commons.configuration.TestConfigurationUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="254" opendate="2007-02-28 21:22:26" fixdate="2007-03-01 21:20:54" resolution="Fixed">
		<buginformation>
			<summary>Wrong creation of XMLFileConfigurationDelegate in XMLConfiguration.clone()</summary>
			<description>The clone() operation on a XMLConfiguration does not work correctly due to the following problem:
private class XMLFileConfigurationDelegate extends FileConfigurationDelegate
{
     public void load(InputStream in) throws ConfigurationException
     {
            XMLConfiguration.this.load(in);
      }
}
Obviously the delegate references the XMLConfiguration instance it is created in. Thus when calling
public Object clone()
{
      XMLConfiguration copy = (XMLConfiguration) super.clone();
       // clear document related properties
       copy.document = null;
       copy.setDelegate(createDelegate());
       // clear all references in the nodes, too
       copy.getRoot().visit(new NodeVisitor()
       {
            public void visitBeforeChildren(Node node, ConfigurationKey key)
            {
                node.setReference(null);
             }
        }, null);
        return copy;
}
the delegate still references the original XMLConfiguration, thus will save the content of the original one
to file instead of the clone as expected! Changing the code like this
        copy.setDelegate(copy.createDelegate());
solves the problem! Now the cloned XMLConfiguration with all its  applied changes can be saved!</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.TestXMLConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.XMLConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="255" opendate="2007-03-01 18:20:24" fixdate="2007-03-03 20:23:32" resolution="Fixed">
		<buginformation>
			<summary>DatabaseConfiguration doesn&amp;apos;t support list delimiters in property values</summary>
			<description>The getList() and getStringArray() methods always return a one element list/array, when used with DatabaseConfiguration, even if the value of the queried property contains the list delimiter character.</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.DatabaseConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.TestDatabaseConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="256" opendate="2007-03-05 13:02:03" fixdate="2007-03-06 21:20:50" resolution="Fixed">
		<buginformation>
			<summary>MapConfiguration does not decode escaped Delimiters</summary>
			<description>Hello, I don&amp;amp;apos;t know how to reopen resolved bug. See: https://issues.apache.org/jira/browse/CONFIGURATION-30
There is BAD implementation in MapConfiguration.getProperty(String key) method:
As "return value" should be list.get(0) instead of "value".
PropertyConverter.split removes escape chars....
Suggested correction:
    public Object getProperty(String key)
    {
        Object value = map.get(key);
        if ((value instanceof String) &amp;amp;&amp;amp; (!isDelimiterParsingDisabled()))
        {
            List list = PropertyConverter.split((String) value, getListDelimiter());
            //MP: return list.size() &amp;gt; 1 ? list : value;
            return list.size() &amp;gt; 1 ? list : list.get(0); //MP: split removes escape chars
        }
        else
        {
            return value;
        }
    }
Test code:
Map m = new HashMap();
m.put("foo", "bar,baz");
m.put("bar", "bar, baz");
MapConfiguration mc = new MapConfiguration(m);
mc.setDelimiterParsingDisabled(false);
mc.setListDelimiter(&amp;amp;apos;,&amp;amp;apos;);
Configuration c = mc;
String bad = c.getString("foo"); //&amp;lt;-- returns "bar, baz" expected "bar, baz"
String ok = c.getString("bar"); // &amp;lt;-- returns "bar"
System.err.println("Bad: " + bad);
System.err.println("OK: " + ok);
Current result is:
Bad: bar\,baz
OK: bar</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.web.ServletConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.TestServletFilterConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.AppletConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.TestAbstractConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.ServletContextConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.MapConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.ServletFilterConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.TestMapConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.BaseWebConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.TestServletContextConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.TestAppletConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.TestServletRequestConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.TestServletConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.web.ServletRequestConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="259" opendate="2007-03-28 08:47:56" fixdate="2007-03-30 09:35:55" resolution="Fixed">
		<buginformation>
			<summary>ConfigurationFactory Merge is broken</summary>
			<description>I am trying to merge two Configuration using the ConfigurationFactory and the additional tag. It turns out that subsequent operations on the merged data provide wrong results. In particular, after creating a particular subset from a loaded configuration, the subset is empty. Strangely enough, when using DefaultConfigurationBuilder to load exactly the same configurations this works properly. 
So when initializing the configuration as follows, I get the following error:
URL configURL = getClass().getResource(configFile);
ConfigurationFactory factory = new ConfigurationFactory();
factory.setConfigurationURL(configURL);
myConfig = factory.getConfiguration();
60043
java.util.NoSuchElementException: &amp;amp;apos;HvNr&amp;amp;apos; doesn&amp;amp;apos;t map to an existing object
	at org.apache.commons.configuration.AbstractConfiguration.getLong(AbstractConfiguration.java:743)
	at de.awd.vertriebsportal.portal.person.TestConfiguration.main(TestConfiguration.java:84)
Exception in thread "main" 
But when initializing it like this everything works properly
DefaultConfigurationBuilder builder = new DefaultConfigurationBuilder();
            builder.setURL(configURL);
            myConfig = builder.getConfiguration();
60043
54564
I will attach full source code and xml files</description>
			<version>1.3</version>
			<fixedVersion>1.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.ConfigurationFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="253" opendate="2007-02-15 09:23:51" fixdate="2007-05-26 19:38:51" resolution="Fixed">
		<buginformation>
			<summary>FileConfiguration getFile(), getFileName(), getBasePath() are not always consistent</summary>
			<description>Taken from the maillinglist:
&amp;gt; I have a properties configuration which is loaded without a problem.
&amp;gt; Later in my application I will access the file which is aligned to 
&amp;gt; this configuration.
&amp;gt; 
&amp;gt;  
&amp;gt; 
&amp;gt; final IFileConfiguration _productConf = 
&amp;gt; _conf.getProductConfigurations().get(_productId);
&amp;gt; 
&amp;gt; log.debug("product conf file " + _productConf.getFile());
&amp;gt; 
&amp;gt; log.debug("product conf filename " + _productConf.getFileName());
&amp;gt; 
&amp;gt; log.debug("product conf base path " + _productConf.getBasePath());
&amp;gt; 
&amp;gt;  
&amp;gt; 
&amp;gt; The methods _productConf.getFile() and _productConf.getFileName() 
&amp;gt; returning null but the getBasePath() returns a path which is correct 
&amp;gt; (like file:/C:/Projects/workspace/myProject/project.properties). Seems 
&amp;gt; for me like a bug because the PropertiesConfiguration is loaded 
&amp;gt; correct and works.
&amp;gt; 
&amp;gt;  
&amp;gt; 
&amp;gt; By side: I have also set a file reloading strategy for this 
&amp;gt; configuration.
&amp;gt; 
&amp;gt;  
&amp;gt; 
&amp;gt; Any ideas what&amp;amp;apos;s happen in this case or where I can find the problem? 
&amp;gt; It would be nicer to get the File() instead the BasePath which has to 
&amp;gt; be converted into a URL before I can access the whole properties file.
&amp;gt; 
&amp;gt;  
&amp;gt; 
&amp;gt; Thanks in advance,
&amp;gt; 
&amp;gt;  
&amp;gt; 
&amp;gt; - Thomas Wabner
&amp;gt; 
&amp;gt; 
Thomas,
you are right, the conversions between a base path, a file name, and a File are not always consistent. How did you load the configuration (this determines, which internal fields are set)?
I would recommend to work with URLs, i.e. the method getURL(). A file-based configuration&amp;amp;apos;s URL is always defined.
If you like, you can open a Jira ticket for this problem.
Thanks.
Oliver
The file is loaded in this way:
_productConf = new ProductConfiguration();
_productConf.load(FileTools.getPathForList(_propductPathList).getPath());
means the load method gets an String and not an File.
</description>
			<version>1.3</version>
			<fixedVersion>1.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.TestFileConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.AbstractFileConfiguration.java</file>
		</fixedFiles>
	</bug>
</bugrepository>