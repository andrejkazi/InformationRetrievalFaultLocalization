<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="CONFIGURATION">
	<bug id="1" master="418" duplicate="547" opendate="2010-05-31 14:49:18" fixdate="2013-07-13 19:48:04" resolution="Fixed">
		<buginformation>
			<summary>incorrect backslash parsing Handling of backslashes</summary>
			<description>I am using Commons Configuration (PropertiesConfiguration) and some of my data are windows shares: share1 or share2. The problem is the parsing return different things depending how the keys are defined. For example, these keys
share=\\\\share1
share=\\\\share2
are different than:
share=\\\\share1, \\\\share2
The first one returns two backslashes ("share1" and "share2") and the second returns just one ("\share1" and "\share2"). I think the problem is in PropertyConverter line 525, cos the backslash is hidden twice when multivalue parsing is done:
if (c != delimiter &amp;amp;&amp;amp; c != LIST_ESC_CHAR) 
                {
                    // no, also add escape character
                    token.append(LIST_ESC_CHAR);
                }

In my understanding the second condition produces this strange issue and it should be like this:

if (c != delimiter) 
                {
                    // no, also add escape character
                    token.append(LIST_ESC_CHAR);
                }

Check that cos I can be missing something...
TIA Consider the following Unit Test:


    @Test
    public void properlyProcessesBackslash() throws Exception
    {
        final String key = "key";
        final String value = "\\\\";

        final XMLConfiguration xmlConfig = new XMLConfiguration();
        xmlConfig.addProperty(key, value);
        final StringWriter stringWriter = new StringWriter();
        xmlConfig.save(stringWriter);

        final String xml = stringWriter.toString();

        final XMLConfiguration roundTrippedXmlConfig = new XMLConfiguration();
        roundTrippedXmlConfig.load(new StringReader(xml));

        assertEquals(xmlConfig.getString(key), roundTrippedXmlConfig.getString(key));
    }


The test case fails and I think it shouldn&amp;amp;apos;t. The version that introduced this behaviour was 1.7, 1.6 works fine.</description>
			<version>1.7</version>
			<fixedVersion>2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.configuration.TestPropertiesConfiguration.java</file>
			<file type="M">org.apache.commons.configuration.PropertiesConfiguration.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">547</link>
			<link type="Duplicate" description="duplicates">418</link>
		</links>
	</bug>
</bugrepository>