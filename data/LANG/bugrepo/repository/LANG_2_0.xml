<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="LANG">
	<bug id="315" opendate="2007-02-06 13:52:59" fixdate="2007-02-06 22:49:59" resolution="Fixed">
		<buginformation>
			<summary>StopWatch: suspend() acts as split(), if followed by stop()</summary>
			<description>In my opinion, it is a bug that suspend() acts as split(), if followed by stop(); see below:
        StopWatch sw = new StopWatch();
        sw.start();
        Thread.sleep(1000);
        sw.suspend();
        // Time 1 (ok)
        System.out.println(sw.getTime());
        Thread.sleep(2000);
        // Time 1 (again, ok)
        System.out.println(sw.getTime());
        sw.resume();
        Thread.sleep(3000);
        sw.suspend();
        // Time 2 (ok)
        System.out.println(sw.getTime());
        Thread.sleep(4000);
        // Time 2 (again, ok)
        System.out.println(sw.getTime());
        Thread.sleep(5000);
        sw.stop();
        // Time 2 (should be, but is Time 3 =&amp;gt; NOT ok)
        System.out.println(sw.getTime());
suspend/resume is like a pause, where time counter doesn&amp;amp;apos;t continue. So a following stop()-call shouldn&amp;amp;apos;t increase the time counter, should it?</description>
			<version>2.0</version>
			<fixedVersion>2.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.apache.commons.lang.time.StopWatch.java</file>
			<file type="M">org.apache.commons.lang.time.StopWatchTest.java</file>
		</fixedFiles>
	</bug>
</bugrepository>