<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Wed Nov 30 23:11:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LANG-381/LANG-381.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[LANG-381] NumberUtils.min(floatArray) returns wrong value if floatArray[0] happens to be Float.NaN</title>
                <link>https://issues.apache.org/jira/browse/LANG-381</link>
                <project id="12310481" key="LANG">Commons Lang</project>
                    <description>&lt;p&gt;The min() method of NumberUtils returns the wrong result if  the first value of the array happens to be Float.NaN. The following code snippet shows the behaviour:&lt;/p&gt;

&lt;p&gt;        float a[] = new float[] &lt;/p&gt;
{(float) 1.2, Float.NaN, (float) 3.7, (float) 27.0, (float) 42.0, Float.NaN}
&lt;p&gt;;&lt;br/&gt;
        float b[] = new float[] &lt;/p&gt;
{Float.NaN, (float) 1.2, Float.NaN, (float) 3.7, (float) 27.0, (float) 42.0, Float.NaN}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;        float min = NumberUtils.min(a);&lt;br/&gt;
        System.out.println(&quot;min(a): &quot; + min); // output: 1.2&lt;br/&gt;
        min = NumberUtils.min(b);&lt;br/&gt;
        System.out.println(&quot;min(b): &quot; + min); // output: NaN&lt;/p&gt;

&lt;p&gt;This problem may exist for double-arrays as well. &lt;/p&gt;

&lt;p&gt;Proposal: Use Float.compare(float, float) or NumberUtils.compare(float, float) to achieve a consistent result.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12383623">LANG-381</key>
            <summary>NumberUtils.min(floatArray) returns wrong value if floatArray[0] happens to be Float.NaN</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="tv">Thomas Vandahl</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 Nov 2007 13:17:41 +0000</created>
                <updated>Sun, 6 Jan 2008 23:59:19 +0000</updated>
                            <resolved>Sun, 6 Jan 2008 23:59:19 +0000</resolved>
                                    <version>2.3</version>
                                    <fixVersion>2.4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12547564" author="bayard" created="Sun, 2 Dec 2007 03:51:31 +0000"  >&lt;p&gt;Confirmed; and same problem exists for doubles.&lt;/p&gt;</comment>
                            <comment id="12547565" author="bayard" created="Sun, 2 Dec 2007 03:58:46 +0000"  >&lt;p&gt;Float.compare(float, float) is 1.4 specific, however we have our own implementation in NumberUtils so should be able to use that.&lt;/p&gt;</comment>
                            <comment id="12547570" author="bayard" created="Sun, 2 Dec 2007 04:26:19 +0000"  >&lt;p&gt;Also a bug on the max() methods.&lt;/p&gt;</comment>
                            <comment id="12547571" author="bayard" created="Sun, 2 Dec 2007 04:33:47 +0000"  >&lt;p&gt;Looks like the min(double, double, double) (and probably others) have the same problem. Interesting given that they use Math.min.&lt;/p&gt;

&lt;p&gt;The bug on the max() methods is the inverse. They don&apos;t consider NaN to be &amp;gt; than all others as Float.compareTo does.&lt;/p&gt;</comment>
                            <comment id="12547572" author="bayard" created="Sun, 2 Dec 2007 04:40:56 +0000"  >&lt;p&gt;Last spammy comment on this I promise....&lt;/p&gt;

&lt;p&gt;This seems like a confusing bit. If we look at the JDK, we get:&lt;/p&gt;

&lt;p&gt;Math.min(Double.NaN, 1.0) =&amp;gt; NaN&lt;br/&gt;
Math.max(Double.NaN, 1.0) =&amp;gt; NaN&lt;/p&gt;

&lt;p&gt;However:&lt;/p&gt;

&lt;p&gt;Double.compare(Double.NaN, 1.0) =&amp;gt; 1&lt;br/&gt;
Double.compare(1.0, Double.NaN) =&amp;gt; -1&lt;/p&gt;

&lt;p&gt;That is, the JDK is not without its problems. It seems to me that the min/max methods need to take their leads from the JDK ones. So the (double, double, double) ones are implicitly correct as they are nothing more than wrappers for a couple of Math.min calls.&lt;/p&gt;

&lt;p&gt;This bug is not that NaN is returned, but that 1.2 is returned.&lt;/p&gt;

&lt;p&gt;ie) If NaN is found in min(double[]), then the min is NaN.&lt;br/&gt;
The same holds for max - it should never return 42.0 in the above example.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12547663" author="tv" created="Sun, 2 Dec 2007 20:32:46 +0000"  >&lt;p&gt;I see your point. I think the JavaDoc comment in Float.compareTo(Float) (since 1.2) says what was intended:&lt;/p&gt;

&lt;p&gt;&quot;There are two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators (&amp;lt;, &amp;lt;=, ==, &amp;gt;= &amp;gt;) when applied to primitive floats:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Float.NaN is considered by this method to be equal to itself and greater than all other float values (including Float.POSITIVE_INFINITY).&lt;/li&gt;
	&lt;li&gt;0.0f is considered by this method to be greater than -0.0f.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So assuming this is the correct way to do things, I guess the min-method should return 1.2 and the max-method should return NaN. In any case the result should not depend on the value of the first element of the array.&lt;/p&gt;</comment>
                            <comment id="12547665" author="psteitz" created="Sun, 2 Dec 2007 20:43:23 +0000"  >&lt;p&gt;The comparator has to impose a total ordering, so it has to put NaN somewhere.  The min/max functions do not have to do this - i.e., we could define the contract of min/max to be to return NaN iff there are no non-NaN values in the array, so NaNs are effectively excluded.  This is what we did in &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt;.  See, e.g., &lt;br/&gt;
&lt;a href=&quot;http://commons.apache.org/math/api-1.1/org/apache/commons/math/stat/StatUtils.html#min(double[],%20int,%20int&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://commons.apache.org/math/api-1.1/org/apache/commons/math/stat/StatUtils.html#min(double[],%20int,%20int&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="12547743" author="bayard" created="Mon, 3 Dec 2007 06:53:46 +0000"  >&lt;p&gt;The JDK already implies that the contract is that if a NaN appears in the min or max, then the min or max is NaN.&lt;/p&gt;

&lt;p&gt;Why not just go with that? Any idea if that is defined by IEEE?&lt;/p&gt;</comment>
                            <comment id="12548107" author="psteitz" created="Tue, 4 Dec 2007 03:31:05 +0000"  >&lt;p&gt;The orignial IEEE 754 spec prescribes behavior like the JDK, i.e. min(x, NaN) = max(x, NaN) = NaN.  This is under discussion for change in IEEE 745r.  See &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; for a summary of the issues.   The rationale for returning NaN in these cases is to propagate the signal that something has gone awry in computation somewhere - &lt;b&gt;not&lt;/b&gt; to pretend that the comparison actually makes sense.   A better approach for most applications, IMO, is to treat NaNs as missing data, especially in cases like the present where they appear as elements in a set.  In any case, the important thing is to document clearly what the API contract is.  I will adapt the &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt; code and test cases if this is what we want to do for lang.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/NaN&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/NaN&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12548950" author="bayard" created="Thu, 6 Dec 2007 07:33:20 +0000"  >&lt;p&gt;So, from &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_754r&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/IEEE_754r&lt;/a&gt; we get:&lt;/p&gt;

&lt;p&gt;*********************&lt;br/&gt;
min and max&lt;/p&gt;

&lt;p&gt;The min and max operations are defined but leave some leeway for the case where the inputs are equal in value but differ in representation. In particular:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;min(+0,-0) or min(-0,+0) must produce something with a value of zero but may always return the first argument.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In order to support operations such as windowing in which a NaN input should be quietly replaced with one of the end points, min and max are defined to select a number, x, in preference to a quiet NaN:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;min(x,NaN) = min(NaN,x) = x&lt;/li&gt;
	&lt;li&gt;max(x,NaN) = max(NaN,x) = x&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In the current draft, these functions are called minnum and maxnum to indicate their preference for a number over a NaN.&lt;br/&gt;
*********************&lt;/p&gt;

&lt;p&gt;Regardless of the various options, we need to make sure our pairs of min functions are equivalent; the (double, double, double) and the (double[]) variants.&lt;/p&gt;

&lt;p&gt;Our options for &apos;correct&apos; seem to be:&lt;/p&gt;

&lt;p&gt;1) JDK functionality; current IEEE. NaN is always the answer to min and max if an argument.&lt;br/&gt;
2) IEEE-754r. NaN is only the answer to min and max functions if there is no non NaN element.&lt;br/&gt;
3) Keep JDK functionality as is and add minnum/maxnum variants for IEEE-754r.&lt;/p&gt;

&lt;p&gt;I&apos;m surprised by the IEEE-754r change, it feels to me that I would prefer to have a clear sign that something went wrong and not have the other number be the minimum and no awareness of the problem having happened. I&apos;m tending towards 1) or 3).&lt;/p&gt;</comment>
                            <comment id="12549160" author="tv" created="Thu, 6 Dec 2007 19:59:46 +0000"  >&lt;p&gt;My vote goes for 2) or perhaps 3) if it must be. At least I&apos;d strongly suggest to add a word of explanation to the docs. The behavior should be consistent across all float comparisons in any case.&lt;/p&gt;</comment>
                            <comment id="12556186" author="bayard" created="Sat, 5 Jan 2008 07:33:38 +0000"  >&lt;p&gt;Patch attached that makes minimum and maximum obey the JDK rule of &quot;if it has NaN, then return NaN&quot;.&lt;/p&gt;</comment>
                            <comment id="12556188" author="bayard" created="Sat, 5 Jan 2008 07:47:34 +0000"  >&lt;p&gt;Attaching patch that makes min/max use the IEEE-754r approach. Turned out to be nice and easy.&lt;/p&gt;

&lt;p&gt;Javadoc improvement needed if this is used.&lt;/p&gt;</comment>
                            <comment id="12556195" author="bayard" created="Sat, 5 Jan 2008 08:31:36 +0000"  >&lt;p&gt;Attaching a patch with the JDK approach applied to NumberUtils methods, and a new IEEE754rUtils class added with those variants of the methods. Javadoc&apos;d etc.&lt;/p&gt;

&lt;p&gt;This is the one I plan to apply.&lt;/p&gt;</comment>
                            <comment id="12556454" author="bayard" created="Sun, 6 Jan 2008 23:59:19 +0000"  >&lt;p&gt;svn ci -m &quot;Applying third patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/LANG-381&quot; title=&quot;NumberUtils.min(floatArray) returns wrong value if floatArray[0] happens to be Float.NaN&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LANG-381&quot;&gt;&lt;del&gt;LANG-381&lt;/del&gt;&lt;/a&gt;. Fixes the minimum(float[]) type methods to correctly return NaN when it is in the array, and adds an IEEE754rUtils class that obeys the IEEE 754r update in which NaN in min/max methods should be ignored unless all values are NaN. &quot; src&lt;/p&gt;

&lt;p&gt;Adding         src/java/org/apache/commons/lang/math/IEEE754rUtils.java&lt;br/&gt;
Sending        src/java/org/apache/commons/lang/math/NumberUtils.java&lt;br/&gt;
Adding         src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java&lt;br/&gt;
Sending        src/test/org/apache/commons/lang/math/NumberUtilsTest.java&lt;br/&gt;
Transmitting file data ....&lt;br/&gt;
Committed revision 609475.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12372554" name="LANG-381-IEEE-754r.patch" size="5589" author="bayard" created="Sat, 5 Jan 2008 07:47:34 +0000"/>
                            <attachment id="12372553" name="LANG-381-JDK.patch" size="2983" author="bayard" created="Sat, 5 Jan 2008 07:33:38 +0000"/>
                            <attachment id="12372559" name="LANG-381-both.patch" size="17817" author="bayard" created="Sat, 5 Jan 2008 08:31:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 2 Dec 2007 03:51:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34123</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 48 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0d64f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>74768</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>