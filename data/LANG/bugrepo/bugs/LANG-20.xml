<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Wed Nov 30 23:42:25 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LANG-20/LANG-20.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[LANG-20] Infinite loop in ToStringBuilder.reflectionToString for inner classes</title>
                <link>https://issues.apache.org/jira/browse/LANG-20</link>
                <project id="12310481" key="LANG">Commons Lang</project>
                    <description>&lt;p&gt;ToStringBuilder.reflectionToString() enters an infinite loop when used with the &lt;br/&gt;
following example:&lt;/p&gt;

&lt;p&gt;/////////////////////////////&lt;br/&gt;
public class Outer {&lt;br/&gt;
  Inner inner = new Inner();&lt;br/&gt;
  class Inner {&lt;br/&gt;
    public String toString() &lt;/p&gt;
{
      return ToStringBuilder.reflectionToString(this);
    }
&lt;p&gt;  }&lt;br/&gt;
  public String toString() &lt;/p&gt;
{
    return ToStringBuilder.reflectionToString(this);
  }
&lt;p&gt;  public static void main(String[] args) &lt;/p&gt;
{
    Outer outer = new Outer();
    System.out.println(outer);
  }
&lt;p&gt;}&lt;br/&gt;
/////////////////////////////&lt;/p&gt;

&lt;p&gt;The reason is that the two classes refer to each other via the explicit field &lt;br/&gt;
inner and the implicit field Outer.this. &lt;/p&gt;

&lt;p&gt;The bug can be resolved by skipping the implicit fields. Is there any good &lt;br/&gt;
reason for printing those anyway?&lt;/p&gt;

&lt;p&gt;I am not sure what is the best way to detect if a field is an implicit field. &lt;br/&gt;
But I patched the code myself in a way that seemed to work:&lt;/p&gt;

&lt;p&gt;/////////////////////////////&lt;br/&gt;
public static String reflectionToString(Object object, ToStringStyle style, &lt;br/&gt;
        boolean outputTransients) {&lt;br/&gt;
    if (object == null) &lt;/p&gt;
{
        throw new IllegalArgumentException(&quot;The object must not be null&quot;);
    }
&lt;p&gt;    if (style == null) &lt;/p&gt;
{
        style = getDefaultStyle();
    }
&lt;p&gt;    Field[] fields = object.getClass().getDeclaredFields();&lt;br/&gt;
    Field.setAccessible(fields, true);&lt;br/&gt;
    ToStringBuilder builder = new ToStringBuilder(object, style);&lt;br/&gt;
    for (int i = 0; i &amp;lt; fields.length; ++i) {&lt;br/&gt;
        Field f = fields&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
        if (!f.getName().startsWith(&quot;this$&quot;)) {&lt;br/&gt;
          if (outputTransients || !Modifier.isTransient(f.getModifiers())) {&lt;br/&gt;
              if (!Modifier.isStatic(f.getModifiers())) {&lt;br/&gt;
                  try &lt;/p&gt;
{
                      builder.append(f.getName(), f.get(object));
                      
                  }
&lt;p&gt; catch (IllegalAccessException ex) &lt;/p&gt;
{
                      //this can&apos;t happen. Would get a Security exception 
instead
                      //throw a runtime exception in case the impossible 
happens.
                      throw new InternalError(&quot;Unexpected 
IllegalAccessException&quot;);
                  }
&lt;p&gt;              }&lt;br/&gt;
          }&lt;br/&gt;
        }&lt;br/&gt;
    }&lt;br/&gt;
    return builder.toString();&lt;br/&gt;
}&lt;br/&gt;
/////////////////////////////&lt;/p&gt;

&lt;p&gt;Notice the extra if statement that tests for field names starting with &quot;this$&quot;. &lt;br/&gt;
I don&apos;t know if this is guaranteed to work always, though.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: All&lt;br/&gt;
Platform: PC&lt;/p&gt;</environment>
        <key id="12340483">LANG-20</key>
            <summary>Infinite loop in ToStringBuilder.reflectionToString for inner classes</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="per@velschow.com">Per Velschow</reporter>
                        <labels>
                    </labels>
                <created>Sat, 11 Jan 2003 13:27:37 +0000</created>
                <updated>Tue, 16 May 2006 12:44:16 +0000</updated>
                            <resolved>Tue, 16 May 2006 12:44:16 +0000</resolved>
                                    <version>2.0</version>
                                    <fixVersion>2.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12403426" author="scolebourne@joda.org" created="Mon, 20 Jan 2003 02:51:15 +0000"  >&lt;p&gt;Change made which should deal with this situation.&lt;br/&gt;
Thanks for the report and test.&lt;br/&gt;
Stephen&lt;/p&gt;</comment>
                            <comment id="12403427" author="per@velschow.com" created="Mon, 20 Jan 2003 03:10:04 +0000"  >&lt;p&gt;I just checked the changes in CVS. If I read the code correctly, it will now &lt;br/&gt;
discard any field name containing a &apos;$&apos; character. This may be too restrictive &lt;br/&gt;
since &apos;$&apos; is a legal identifier part AFAIK.&lt;/p&gt;

&lt;p&gt;Also, I have thought a bit more about the problem. It is actually a more &lt;br/&gt;
general problem than the one I reported. Inner classes are not the only way you &lt;br/&gt;
could have mutually recursive data structures. So perhaps we should think of a &lt;br/&gt;
more general way of preventing this infinite loop. I have not made any solution &lt;br/&gt;
yet, but I think it might be solved using a Set of references to already &lt;br/&gt;
traversed instances and then avoid traversing an instance if it has already &lt;br/&gt;
been traversed.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15986</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 20 Jan 2003 02:51:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34102</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            13 years, 47 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0d79r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>74954</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>