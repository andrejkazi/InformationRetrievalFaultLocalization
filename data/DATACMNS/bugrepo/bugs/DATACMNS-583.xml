<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 13:03:34 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATACMNS-583/DATACMNS-583.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATACMNS-583] DomainClassConverter#matches should return false when source- and targetType are equal</title>
                <link>https://jira.spring.io/browse/DATACMNS-583</link>
                <project id="10510" key="DATACMNS">Spring Data Commons</project>
                    <description>&lt;p&gt;I ran into a very peculiar issue today, that was hard to reproduce. In a Spring-MVC app that uses Spring Data JPA and has a DomainClassConverter registered I have a controller method that takes some entity as a model attribute parameter. The entity has a String ID field.&lt;br/&gt;
What happens now in some cases (haven&apos;t identified the exact circumstances) is that the entity instance, which is initially created and bound correctly, is ran through the conversion service, which finds the DomainClassConverter which will happily map the entity instance onto another instance of the same type by mapping the instance to a String using the standard ObjectToStringConverter and treating the result as the primary key of the entity type... This results in always getting null passed in as the parameter for the controller method.&lt;br/&gt;
Obviously the DomainClassConverter should not be used at all in this scenario.&lt;/p&gt;

&lt;p&gt;Fortunately I was able to reproduce the scenario in a simple app (see attachment). It&apos;s really weird: if you remove the extra non-default constructor of the Entity class, for example, you can no longer reproduce the error. Also, if you comment out the spring.version property in the pom, thereby using 4.0.7.RELEASE instead of 4.1.1.RELEASE, you can also not reproduce the error. This might therefore be related to a recent change in Spring Core as well.&lt;/p&gt;

&lt;p&gt;Anyways, there is an easy fix for this issue: the DomainClassConvert#matches method should first check if the source- and targetType are equal and if so, return false: I&apos;d say that no domain class can have itself as its key type and thus it should never attempt to convert these types. &lt;/p&gt;

&lt;p&gt;If you manage to pinpoint the exact cause you might find that there&apos;s a better solution, but this is how I worked around this issue for now.&lt;/p&gt;</description>
                <environment></environment>
        <key id="60305">DATACMNS-583</key>
            <summary>DomainClassConverter#matches should return false when source- and targetType are equal</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thomasd">Thomas Darimont</assignee>
                                    <reporter username="jkuipers">Joris Kuipers</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Oct 2014 15:54:29 +0000</created>
                <updated>Tue, 27 Jan 2015 10:29:28 +0000</updated>
                            <resolved>Wed, 29 Oct 2014 01:45:22 +0000</resolved>
                                    <version>1.8.4 (Dijkstra SR4)</version>
                                    <fixVersion>1.9.1 (Evans SR1)</fixVersion>
                    <fixVersion>1.10 M1 (Fowler)</fixVersion>
                    <fixVersion>1.8.5 (Dijkstra SR5)</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="109119" author="thomasd" created="Tue, 28 Oct 2014 07:39:13 +0000"  >&lt;p&gt;Hello Joris,&lt;/p&gt;

&lt;p&gt;Good catch! Thanks for your example. I gave this a spin and came up with a slightly different solution.&lt;br/&gt;
Instead of returning &lt;tt&gt;false&lt;/tt&gt; in &lt;tt&gt;org.springframework.data.repository.support.DomainClassConverter.matches(TypeDescriptor, TypeDescriptor)&lt;/tt&gt;&lt;br/&gt;
I&apos;d rather return &lt;tt&gt;true&lt;/tt&gt; in case &lt;tt&gt;sourceType.equals(targetType) == true&lt;/tt&gt; and simply returning the &lt;tt&gt;source&lt;/tt&gt; in that case in &lt;tt&gt;org.springframework.data.repository.support.DomainClassConverter.convert(Object, TypeDescriptor, TypeDescriptor)&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The reason for this is that we could potentially have multiple conversions registered in the &lt;tt&gt;GenericConversionService&lt;/tt&gt; registered the last one being an &lt;tt&gt;org.springframework.core.convert.support.ObjectToObjectConverter&lt;/tt&gt; which returns the &lt;tt&gt;source} object in case {{sourceType&lt;/tt&gt; and &lt;tt&gt;destinationType&lt;/tt&gt; matches. &lt;/p&gt;

&lt;p&gt;In stead of going through potentially multiple converters I&apos;d rather handle this case in &lt;tt&gt;DomainClassConverter&lt;/tt&gt; directly which could save some unnecessary conversion hops.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Thomas&lt;/p&gt;</comment>
                            <comment id="109120" author="jkuipers" created="Tue, 28 Oct 2014 07:48:02 +0000"  >&lt;p&gt;I&apos;d say that if you&apos;d follow your reasoning, then almost every converter should return true when asked if it can map an X onto an X and return the input as-is. I don&apos;t think it&apos;s the responsibility of individual converters to worry about the overhead of having multiple converters registered by handling conversions they weren&apos;t intended for. &lt;br/&gt;
I do think it&apos;s rather confusing that the Spring binding mechanism finds it necessary in this case to check for a registered converter, but if that is intended behavior then your solution would prevent people from relying on that mechanism by registering their own X-to-X converter which could e.g. enrich the data in every X: the DomainClassConverter would then get in the way if it happened to be registered earlier in the list.&lt;/p&gt;</comment>
                            <comment id="109126" author="thomasd" created="Tue, 28 Oct 2014 08:28:50 +0000"  >&lt;p&gt;Hmmm, yes and no and yes &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. &lt;/p&gt;

&lt;p&gt;I agree, that this would cause trouble in cases where users use a converter to enrich domain objects&lt;br/&gt;
instead of performing an actual type conversion. Unfortunately the API contract of the Conversion infrastructure isn&apos;t strict enough about being only about type conversion. &lt;/p&gt;

&lt;p&gt;Given that I think we have to stay defensive here, so I&apos;ll apply your suggestion of just returning &lt;tt&gt;false&lt;/tt&gt; in &lt;tt&gt;org.springframework.data.repository.support.DomainClassConverter.matches(TypeDescriptor, TypeDescriptor)&lt;/tt&gt; case &lt;tt&gt;sourceType.equals(targetType) == true&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="109127" author="thomasd" created="Tue, 28 Oct 2014 09:12:48 +0000"  >&lt;p&gt;After some additional thought and discussions with &lt;span class=&quot;error&quot;&gt;&amp;#91;~jhoeller&amp;#93;&lt;/span&gt; I came to the conclusion that it should be okay to add support for the identity  conversion (= convert an input of type T to the same output of type T) as fast-path here.&lt;/p&gt;

&lt;p&gt;If users (ab)use the conversion infrastructure for enrichment they should make sure that their converter takes precedence over all other converters for this conversion (T source = T target) anyways. Otherwise you cannot guarantee that other (framework or third-party) converters don&apos;t do perform the conversion already. &lt;br/&gt;
One way to achieve that would be to register a custom &lt;tt&gt;ConversionService&lt;/tt&gt; potentially extending or delegating to e.g. &lt;tt&gt;GenericConversionService&lt;/tt&gt;. With this you have control over the order of conversion registrations.&lt;/p&gt;

&lt;p&gt;Maybe &lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke&quot; class=&quot;user-hover&quot; rel=&quot;olivergierke&quot;&gt;Oliver Gierke&lt;/a&gt; has an opinion on this as well &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="109128" author="jkuipers" created="Tue, 28 Oct 2014 09:28:15 +0000"  >&lt;p&gt;OK, if J&#369;rgen says so then I cannot possibly disagree &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I would still be very interested in learning why the identity conversion is attempted here in the first place, &lt;b&gt;and&lt;/b&gt; in why it doesn&apos;t happen when you remove the non-default constructor from the entity in my sample app or when you use Spring 4.0.7 instead of 4.1.1.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="22332" name="domainclassconverter-bug.zip" size="4932" author="jkuipers" created="Tue, 21 Oct 2014 15:54:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 28 Oct 2014 07:39:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>46379</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>olivergierke</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10684" key="com.atlassian.jira.plugin.system.customfieldtypes:url">
                        <customfieldname>Pull Request URL</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[https://github.com/spring-projects/spring-data-commons/pull/101]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i07x53:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>46241</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>46081</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10480" key="com.pyxis.greenhopper.jira:gh-sprint">
                        <customfieldname>Sprint</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="63">53 - Evans SR1</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>