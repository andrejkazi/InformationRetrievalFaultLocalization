<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 13:26:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATACMNS-670/DATACMNS-670.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATACMNS-670] Add support for Querydsl 4</title>
                <link>https://jira.spring.io/browse/DATACMNS-670</link>
                <project id="10510" key="DATACMNS">Spring Data Commons</project>
                    <description></description>
                <environment></environment>
        <key id="62965">DATACMNS-670</key>
            <summary>Add support for Querydsl 4</summary>
                <type id="2" iconUrl="https://jira.spring.io/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="olivergierke">Oliver Gierke</assignee>
                                    <reporter username="olivergierke">Oliver Gierke</reporter>
                        <labels>
                            <label>querydsl</label>
                    </labels>
                <created>Mon, 30 Mar 2015 06:01:54 +0000</created>
                <updated>Fri, 12 Feb 2016 16:08:28 +0000</updated>
                            <resolved>Tue, 17 Nov 2015 13:12:10 +0000</resolved>
                                                    <fixVersion>1.12 M1 (Hopper)</fixVersion>
                                    <component>Integration</component>
                        <due></due>
                            <votes>20</votes>
                                    <watches>22</watches>
                                                                <comments>
                            <comment id="116015" author="olivergierke" created="Fri, 22 May 2015 04:48:51 +0000"  >&lt;p&gt;I just gave this a spin an it seems trying to support both the 3.x and 4.x versions in parallel creates quite a few side effects that makes me wonder whether we should consider moving from 3.x to 4.0 in one go effectively forcing Spring Data Users using Querydsl to upgrade Querydsl at the very same time they upgrade to the Spring Data release train introducing that switch.&lt;/p&gt;

&lt;p&gt;For Spring Data Commons, the effort to maintain compatibility with both versions can be justified as we could create a &lt;tt&gt;querydsl4&lt;/tt&gt; package and basically copy the code we have. For some parts in downstream modules that&apos;s even possible as well as the implementation types are usually not used by users directly. However, with e.g. the JPA module we&apos;re also shipping query classes that currently reside in a common &lt;tt&gt;domain&lt;/tt&gt; package. To ship these for Querydsl4 we&apos;d either have to introduce a new, asymmetric package or customize the query class prefix to &lt;tt&gt;Q4&lt;/tt&gt; or the like, which both seem like a hack especially as this is the code we want to move forward with.&lt;/p&gt;

&lt;p&gt;So assuming we decide for a strict switch, the question is when to actually ship it. The Gosling release train already requires an upgrade to Spring 4.1, so one could argue upgrading to Querydsl 4 at the very same time is reasonable. Others might argue that the Spring 4.1 upgrade is mostly a runtime upgrade, whereas the Querydsl upgrade &lt;b&gt;will&lt;/b&gt; require changes to the user code (package name adaptions at least).&lt;/p&gt;

&lt;p&gt;We also probably have to keep the IO platform in mind, too. Migrating to Querydsl 4 basically means, Boot needs to upgrade to it, which in turn means, the platform will need to include the dependency, too, and thus effectively needs a major version upgrade. That in turn means we probably have to align to the schedule of a Spring IO platform 2.0, too.&lt;/p&gt;</comment>
                            <comment id="116136" author="lukas.eder" created="Wed, 27 May 2015 07:28:01 +0000"  >&lt;p&gt;First off, a disclaimer as my stake here is obviously biased (working for Data Geekery / &lt;a href=&quot;http://jooq.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jooq.org&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;While I certainly understand that Spring Data wants to leverage a third-party query API like QueryDSL, I do wonder whether the direct dependency is sensible in the long run, and this kind of dependency issue when exporting the dependency will stress my thoughts.&lt;/p&gt;

&lt;p&gt;From a high level, what I can see is that Spring Data needs some sort of API to model:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Criteria (i.e. predicates, stuff that goes in a SQL / JPQL &lt;tt&gt;WHERE&lt;/tt&gt; clause)&lt;/li&gt;
	&lt;li&gt;Ordering (i.e. column expressions, stuff that goes in a SQL / JPQL &lt;tt&gt;ORDER BY&lt;/tt&gt; clause)&lt;/li&gt;
	&lt;li&gt;Pagination (i.e. two integers, that go in a SQL &lt;tt&gt;OFFSET .. ROWS FETCH NEXT .. ROWS ONLY&lt;/tt&gt; clause, or the like)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This kind of API is extremely simple to implement as it doesn&apos;t go anywhere near the scope of a full-fledged query API like QueryDSL, or an even more sophisticated SQL API like jOOQ (see, biased...)&lt;/p&gt;

&lt;p&gt;Wouldn&apos;t it be innovative for Spring Data to specify a &quot;standard&quot; for query APIs like the aforementioned ones, which would help clients pass query objects to their repositories, regardless of the repository&apos;s underlying implementation? Essentially, users would then be free to implement that Spring Data API with any of:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;JPA Criteria API (you may criticise it, but it&apos;s the &quot;standard&quot; and many people might prefer that over QueryDSL)&lt;/li&gt;
	&lt;li&gt;QueryDSL (if you must... sorry, bias again)&lt;/li&gt;
	&lt;li&gt;jOOQ&lt;/li&gt;
	&lt;li&gt;Your home grown SQL API (because that exists, too)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;b&gt;Advantages:&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;You can get rid of an external dependency that is rather heavy, has its completely independent release life cycle, has its own transitive dependencies, that you don&apos;t control at all, that has bent their interpretation of semantic versioning once or twice in the past (but then again, who doesn&apos;t)&lt;/li&gt;
	&lt;li&gt;You are open to a lot of additional implementations that can compete with each other, which will drive innovation (and usefulness)&lt;/li&gt;
	&lt;li&gt;You no longer have to support implementations of your API. Let third-party vendors support those implementations&lt;/li&gt;
	&lt;li&gt;You can even implement your own implementation and compete with the existing vendors&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;b&gt;Disadvantages:&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Someone has to write a bit of glue code. But you could do that in a new library, such as &quot;spring-data-querydsl&quot;, and we would be very happy to contribute (and help maintain) &quot;spring-data-jooq&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think this breaking change in QueryDSL is a good opportunity to look into a more strategic decision for the Spring IO platform 2.0. It is going to be a breaking change anyway, so why just upgrade a couple of package names, producing the need for documenting exact version number sets that have been observed to work with each other? Why not go all-in on a more strategic offering for Spring Data?&lt;/p&gt;

&lt;p&gt;Looking forward,&lt;br/&gt;
Lukas&lt;/p&gt;</comment>
                            <comment id="120678" author="esycat" created="Mon, 19 Oct 2015 23:30:11 +0000"  >&lt;p&gt;Thank you for providing support for QueryDSL.&lt;br/&gt;
Are there any plans to upgrade to v4 in the near future?&lt;/p&gt;</comment>
                            <comment id="121131" author="w_c_smith" created="Sun, 1 Nov 2015 12:49:21 +0000"  >&lt;p&gt;Any updates on the issue in light of the upcoming major update to &lt;tt&gt;io.spring.platform:platform-bom&lt;/tt&gt;?&lt;/p&gt;</comment>
                            <comment id="121132" author="olivergierke" created="Sun, 1 Nov 2015 13:17:18 +0000"  >&lt;p&gt;We&apos;re gonna move to Querydsl 4 in one go for Hopper.&lt;/p&gt;</comment>
                            <comment id="121681" author="shadow" created="Tue, 17 Nov 2015 13:18:20 +0000"  >&lt;p&gt;What about Spring LDAP? I guess that needs an update too...&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10150">
                    <name>Depend</name>
                                                                <inwardlinks description="is depended on by">
                                        <issuelink>
            <issuekey id="66752">DATAKV-119</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="66751">DATAREST-708</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="64031">DATACMNS-705</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="63850">DATACMNS-702</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="64947">DATAJPA-765</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="64245">DATAMONGO-1238</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 27 May 2015 07:28:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>olivergierke</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|hzzz7d:zzzzy</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10480" key="com.pyxis.greenhopper.jira:gh-sprint">
                        <customfieldname>Sprint</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="84">57 - Fowler Aftermath</customfieldvalue>
    <customfieldvalue id="89">58 - Gosling M1</customfieldvalue>
    <customfieldvalue id="91">59 - Evans / Fowler SR</customfieldvalue>
    <customfieldvalue id="93">Gosling RC1</customfieldvalue>
    <customfieldvalue id="105">Hopper M1</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>