<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 13:19:46 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATACMNS-896/DATACMNS-896.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATACMNS-896] ClassTypeInformation computes incorrect TypeVariable mappings for recursive generics</title>
                <link>https://jira.spring.io/browse/DATACMNS-896</link>
                <project id="10510" key="DATACMNS">Spring Data Commons</project>
                    <description>&lt;p&gt;When using a class with type variables in the class hierarchy, which contains variables referencing other classes also using common parts of the same class hierarchy, the type variables type mappings for the referenced classes are incorrectly mixed into the original classes type variables.&lt;/p&gt;

&lt;p&gt;See the attached JUnit test which can demonstrate the problem.  It may require several runs for it appear, but it is consistently failing for us.&lt;/p&gt;

&lt;p&gt;I believe this is due the essentially random ordering of the HashSet.entrySet().iterator() on line 130 and the putAll() on line 136:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/util/ClassTypeInformation.java#L130&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/util/ClassTypeInformation.java#L130&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/util/ClassTypeInformation.java#L136&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/util/ClassTypeInformation.java#L136&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on the sequencing, you either get your own type variable value, or some other related classes.  Last one wins.&lt;/p&gt;

&lt;p&gt;We&apos;ve tried modifying this class to removed the putAll (line 136), and it fixes this test, and does not appear to cause problems for 100s of other Spring Data Repository based tests we have.  It&apos;s not clear why the type variable mappings from &lt;em&gt;other&lt;/em&gt; classes that are not direct superclasses or interfaces are included at all, it seems very wrong.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;It took us 4 days to track down this as the ultimate source of a random startup failures of a Spring Data JPA Repository while parsing of dynamic query methods on a particular part of our domain model.  It was very hard to reproduce, but one developers box seemed to want to fail rather consistently, which gave the opportunity to narrow it down.  My hope, for now, is to work around it by mapping the query method to a custom implementation.&lt;/p&gt;</description>
                <environment></environment>
        <key id="69543">DATACMNS-896</key>
            <summary>ClassTypeInformation computes incorrect TypeVariable mappings for recursive generics</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="olivergierke">Oliver Gierke</assignee>
                                    <reporter username="ryan.gustafson@gmail.com">Ryan Gustafson</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Aug 2016 20:48:18 +0000</created>
                <updated>Tue, 20 Sep 2016 17:37:48 +0000</updated>
                            <resolved>Fri, 19 Aug 2016 17:58:10 +0000</resolved>
                                    <version>1.11.4 (Gosling SR4)</version>
                    <version>1.12.1 (Hopper SR1)</version>
                    <version>1.13 M1 (Ingalls)</version>
                                    <fixVersion>1.11.5 (Gosling SR5)</fixVersion>
                    <fixVersion>1.12.3 (Hopper SR3)</fixVersion>
                    <fixVersion>1.13 RC1 (Ingalls)</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="131383" author="olivergierke" created="Thu, 18 Aug 2016 21:20:12 +0000"  >&lt;p&gt;I don&apos;t think we can remove that line. The code was introduced to fix &lt;a href=&quot;https://jira.spring.io/browse/DATACMNS-594&quot; title=&quot;Strange generics behaviour for multiply nested generic types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DATACMNS-594&quot;&gt;&lt;del&gt;DATACMNS-594&lt;/del&gt;&lt;/a&gt; and looking at the test case I think this is a very valid construct. I ran your test case quite a couple of times but never actually got it show the expected error.&lt;/p&gt;

&lt;p&gt;Given that you&apos;ve already spend quite a bit of time on this one, a quick question: do you think it might help if we ourselves switched from a plain &lt;tt&gt;HashMap&lt;/tt&gt; to a &lt;tt&gt;LinkedHashMap&lt;/tt&gt;? I am not quite sure how the &lt;tt&gt;TypeVariables&lt;/tt&gt; could even override each other because, even if they have the same name (&lt;tt&gt;T&lt;/tt&gt; in out test case) they&apos;re actually different instances with different has codes so that we&apos;re basically just creating a flat map from a nested structure and the keys should never ever overlap?&lt;/p&gt;</comment>
                            <comment id="131396" author="ryan.gustafson@gmail.com" created="Fri, 19 Aug 2016 15:34:31 +0000"  >&lt;p&gt;The reason you&apos;re not seeing the failure, is the same reason this was such a pain to track down.  The ordering of the &lt;tt&gt;HashMap&lt;/tt&gt; is not predictable.  For our original problem, we got lucky with one developer&apos;s box reliably processing in an ordering that manifested the problem.  Numerous other environments would never manifest, or with low probability, and not once would it manifest when run in debug mode.&lt;/p&gt;

&lt;p&gt;These are not different &lt;tt&gt;TypeVariables&lt;/tt&gt; they are in fact the &lt;em&gt;same&lt;/em&gt; variable bound to different &lt;em&gt;actual&lt;/em&gt; classes by each subclass.  To attempt to put these actual classes into a common &lt;tt&gt;Map&lt;/tt&gt; indexed by the &lt;tt&gt;TypeVariable&lt;/tt&gt;, gives the wrong impression of the original class.  In the original test case, the ZZZ &lt;tt&gt;TypeVariable&lt;/tt&gt; on &lt;tt&gt;CommonClass&lt;/tt&gt; was mapped 4 different times to separate class values.  I&apos;ll attach an updated Test case to demonstrate the commonality of the &lt;tt&gt;TypeVariable&lt;/tt&gt;, and that each class maps &lt;tt&gt;T&lt;/tt&gt; to a different type.  I&apos;ve also added more type variables and different compositing classes, all in the hopes of increasing the chance of a failure.&lt;/p&gt;

&lt;p&gt;Using a &lt;tt&gt;LinkedHashMap&lt;/tt&gt; here would only give a consistent runtime ordering, but only if &lt;tt&gt;GenericTypeResolver.getTypeVariableMap(...)&lt;/tt&gt; used one and itself processed in a predictable fashion.  Even if you did this, it would not be useful, as a consistent ordering will just make the problem always manifest or never manifest, for a given class arrangement.&lt;/p&gt;

&lt;p&gt;If you still need to have the &lt;tt&gt;putAll&lt;/tt&gt; in there, then I think the asked for classes &lt;tt&gt;TypeVariables&lt;/tt&gt; should be added &lt;em&gt;last&lt;/em&gt; to the map, and &lt;em&gt;not&lt;/em&gt; interleaved with the &lt;tt&gt;putAll&lt;/tt&gt; contents.&lt;/p&gt;</comment>
                            <comment id="131397" author="ryan.gustafson@gmail.com" created="Fri, 19 Aug 2016 15:42:55 +0000"  >&lt;p&gt;Additionally, here&apos;s some of the things we noticed would cause the problem to manifest or not:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Running in debug.&lt;/li&gt;
	&lt;li&gt;Adding &lt;tt&gt;@AfterClass&lt;/tt&gt; to a test.&lt;/li&gt;
	&lt;li&gt;In the test class provided, removing the wilcard (&lt;tt&gt;?&lt;/tt&gt;) usages in the composite subclasses.&lt;/li&gt;
	&lt;li&gt;Running tests in Eclipse vs. Gradle.&lt;/li&gt;
	&lt;li&gt;Running on different machines.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;None of these are related to the problem, but maybe they will help you find a means to trigger it.&lt;/p&gt;</comment>
                            <comment id="131399" author="ryan.gustafson@gmail.com" created="Fri, 19 Aug 2016 17:19:22 +0000"  >&lt;p&gt;Locally, I&apos;m using the following temporary modification to the &lt;tt&gt;ClassTypeInformation.getTypeVariableMap&lt;/tt&gt; looping logic, in order shake out places in our Repositories we need to avoid Spring Data JPA dynamic queries.  Toggle the &lt;tt&gt;incorrect&lt;/tt&gt; flag to get desired behavior.&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        boolean incorrect = true;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        if (incorrect) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            // Put mine first&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            for (Entry&amp;lt;TypeVariable, Type&amp;gt; entry : source.entrySet()) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;                map.put(entry.getKey(), entry.getValue());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        // Put others&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        for (Entry&amp;lt;TypeVariable, Type&amp;gt; entry : source.entrySet()) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            Type value = entry.getValue();&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            if (value instanceof Class) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;                map.putAll(getTypeVariableMap((Class&amp;lt;?&amp;gt;) value, visited));&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        if (!incorrect) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            // Put mine last&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            for (Entry&amp;lt;TypeVariable, Type&amp;gt; entry : source.entrySet()) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;                map.put(entry.getKey(), entry.getValue());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;</comment>
                            <comment id="131402" author="olivergierke" created="Fri, 19 Aug 2016 17:57:36 +0000"  >&lt;p&gt;Thanks for the detailed analysis, Ryan. The new example you provide fails constantly, so that&apos;s a good thing. I can see the issue being the &lt;b&gt;same&lt;/b&gt; generic type being used on nested generics declarations, sort of like this (for reference):&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; GenericType&amp;lt;T&amp;gt; {}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; Nested &lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; GenericType&amp;lt;String&amp;gt; {}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; Concrete &lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; GenericType&amp;lt;Nested&amp;gt; {}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;Our traversal of the generics discovers &lt;tt&gt;T&lt;/tt&gt; bound to &lt;tt&gt;String&lt;/tt&gt; in &lt;tt&gt;Nested&lt;/tt&gt; and as that is extending &lt;tt&gt;GenericType&lt;/tt&gt; as well, the &lt;tt&gt;T&lt;/tt&gt; detected here is indeed the same instance as the &lt;tt&gt;T&lt;/tt&gt; within the map discovered for &lt;tt&gt;Concrete&lt;/tt&gt;. As we add the nested types &lt;b&gt;after&lt;/b&gt; we add the original entry, the nested discovery overwrites the more local one. That means, we can fix this by making sure that nested type variable mappings never replace an already existing one.&lt;/p&gt;

&lt;p&gt;With that fix in place I see your newly provided test sort of succeed. It still fails but due to the fact that you expect a raw &lt;tt&gt;List&lt;/tt&gt; to be equivalent to &lt;tt&gt;List&amp;lt;?&amp;gt;&lt;/tt&gt;, but I guess the gist of it is that the right type is discovered. I could see my sample fail before the fix and succeed after it has been applied.&lt;/p&gt;

&lt;p&gt;I deployed the fix for master and the maintenance branches for Hopper and Gosling. Would you mind giving the snapshots a spin?&lt;/p&gt;</comment>
                            <comment id="131409" author="ryan.gustafson@gmail.com" created="Fri, 19 Aug 2016 20:05:03 +0000"  >&lt;p&gt;The SNAPSHOT allows the test to pass, which should fix it for our application usage.  Thank you very much!&lt;/p&gt;

&lt;p&gt;Sorry, I forgot to give you the test variant that had the wildcards in the composite types removed, I noticed the failures upon corrected behavior after I uploaded the file.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;I&apos;d like to point out in nested cases like this, the contents of the &lt;tt&gt;Map&lt;/tt&gt; are predictable only for the top level type.  For the nested types, it&apos;s not always clear what value will be in the map.  In this arrangement, for the &lt;tt&gt;Concrete&lt;/tt&gt; class, consider what is in the map for the &lt;tt&gt;Comparable&amp;lt;T&amp;gt;&lt;/tt&gt; type variable &lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; GenericType&amp;lt;T,U&amp;gt; {}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; Nested &lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; GenericType&amp;lt;String, Long&amp;gt; {}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; Concrete &lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; GenericType&amp;lt;Nested, Integer&amp;gt; {}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;Is it &lt;tt&gt;String&lt;/tt&gt;, &lt;tt&gt;Long&lt;/tt&gt;, or &lt;tt&gt;Integer&lt;/tt&gt; ?  Also notice that &lt;tt&gt;Comparable&amp;lt;T&amp;gt;&lt;/tt&gt; has nothing to do with the top level type directly, yet it is in the map.&lt;/p&gt;</comment>
                            <comment id="131411" author="olivergierke" created="Fri, 19 Aug 2016 20:47:01 +0000"  >&lt;p&gt;No worries, the test case really helped to get to the root of the problem, and you already invested such a lot of time. It&apos;s me who has to thank you! &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t get the issue regarding &lt;tt&gt;Comparable&amp;lt;T&amp;gt;&lt;/tt&gt; though. It&apos;s not a type variable, it&apos;s a parameterized type. For the types you gave, on &lt;tt&gt;Concrete&lt;/tt&gt;, &lt;tt&gt;T&lt;/tt&gt; evaluates to Nested, &lt;tt&gt;U&lt;/tt&gt; evaluates to &lt;tt&gt;Integer&lt;/tt&gt; (i.e. the top-level bound generics). That&apos;s correct I think. Also the type variable map for &lt;tt&gt;Concrete&lt;/tt&gt; doesn&apos;t contain &lt;tt&gt;Comparable&lt;/tt&gt; &#8212; again, as it&apos;s a type and not a type variable.&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;{T=class java.lang.Integer, U=class java.lang.Integer, T=class org.springframework.data.util.ClassTypeInformationUnitTests$OtherNested}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;You see the first &lt;tt&gt;T&lt;/tt&gt; here resolves to &lt;tt&gt;Integer&lt;/tt&gt; but that&apos;s bound to &lt;tt&gt;Integer&lt;/tt&gt; itself (coming from the &lt;tt&gt;Comparable&amp;lt;T&amp;gt;&lt;/tt&gt; implementation). I totally see that this additional variable might not be needed in this particular case, but &#8212; again &#8212; as the test cases for &lt;a href=&quot;https://jira.spring.io/browse/DATACMNS-594&quot; title=&quot;Strange generics behaviour for multiply nested generic types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DATACMNS-594&quot;&gt;&lt;del&gt;DATACMNS-594&lt;/del&gt;&lt;/a&gt; show, they might be needed in other, also quite complex generics scenarios.&lt;/p&gt;</comment>
                            <comment id="131413" author="ryan.gustafson@gmail.com" created="Fri, 19 Aug 2016 21:33:30 +0000"  >&lt;p&gt;Sorry for the confusion, I used &lt;tt&gt;Comparable&amp;lt;&amp;lt;T&amp;gt;&amp;gt;&lt;/tt&gt; as short hand for the &lt;tt&gt;T&lt;/tt&gt; type variable defined on &lt;tt&gt;Comparable&lt;/tt&gt;.  You are correct, I shouldn&apos;t do that, as it is the same notation for a parameterized type.&lt;/p&gt;

&lt;p&gt;With that cleared up, the &lt;tt&gt;T&lt;/tt&gt; on &lt;tt&gt;Comparable&lt;/tt&gt; contained in the map could be the &lt;tt&gt;T=Integer&lt;/tt&gt; you listed.  It could just as well as been &lt;tt&gt;T=String&lt;/tt&gt; or &lt;tt&gt;T=Long&lt;/tt&gt; too.  Again, it&apos;s a common type variable, specifically the &lt;tt&gt;T&lt;/tt&gt; on &lt;tt&gt;Comparable&lt;/tt&gt;.  &lt;tt&gt;getTypeVariableMap&lt;/tt&gt; is a recursive called on each type parameter encountered that is a &lt;tt&gt;Class&lt;/tt&gt;.  So it&apos;s going to be called explicitly on &lt;tt&gt;Concrete&lt;/tt&gt; the top class, and then on either &lt;tt&gt;Nested&lt;/tt&gt; or &lt;tt&gt;Integer&lt;/tt&gt;, and ultimately recursively onto &lt;tt&gt;String&lt;/tt&gt; and &lt;tt&gt;Long&lt;/tt&gt;.  The processing order is not clear, so which value for &lt;tt&gt;T&lt;/tt&gt; from &lt;tt&gt;Comparable&lt;/tt&gt; gets into the map is not deterministic.&lt;/p&gt;

&lt;p&gt;To make this practical, I get in one run:&lt;/p&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;{T=class java.lang.Integer, U=class java.lang.Integer, T=class SpringDataClassTypeInformationTypeVariableToTypeMappingBugTest$Nested}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;
&lt;p&gt;Next, when run in debug mode:&lt;/p&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;{T=class java.lang.String, T=class SpringDataClassTypeInformationTypeVariableToTypeMappingBugTest$Nested, U=class java.lang.Integer}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;In one case, &lt;tt&gt;T=Integer&lt;/tt&gt;, in the next &lt;tt&gt;T=String&lt;/tt&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="23510" name="SpringDataClassTypeInformationTypeVariableToTypeMappingBugTest.java" size="10292" author="ryan.gustafson@gmail.com" created="Fri, 19 Aug 2016 15:34:55 +0000"/>
                            <attachment id="23507" name="SpringDataClassTypeInformationTypeVariableToTypeMappingBugTest.java" size="2088" author="ryan.gustafson@gmail.com" created="Thu, 18 Aug 2016 20:45:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 18 Aug 2016 21:20:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>olivergierke</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i09dov:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>