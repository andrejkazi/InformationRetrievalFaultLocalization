<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 13:16:39 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATACMNS-909/DATACMNS-909.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATACMNS-909] Exclude decoratedClass from JSON links, created from Projection and received with Spring @RestController</title>
                <link>https://jira.spring.io/browse/DATACMNS-909</link>
                <project id="10510" key="DATACMNS">Spring Data Commons</project>
                    <description>&lt;p&gt;Experiment with spring-boot version: in 1.3.7.RELEASE (spring data 2.4.4) decoratedClass is absent, but in 1.4.0.RELEASE (spring data 2.5.2) it is present&lt;/p&gt;

&lt;p&gt;I&apos;d like get clean JSON, when using Projection as DTO with RestController. However, in the best case we get JSON, most of which contain links to dekoratedClass.&lt;br/&gt;
{&lt;tt&gt;&quot;name&quot;:&quot;Dmitry&quot;,&quot;id&quot;:1,&quot;decoratedClass&quot;:&quot;ru.inkontext.domain.Person&quot;, &quot;adress&quot;:{&quot;id&quot;:1,&quot;decoratedClass&quot;:&quot;ru.inkontext.domain.Adress&quot;,&quot;city&quot;:&quot;Surgut&quot;&lt;/tt&gt;}}&lt;/p&gt;

&lt;h1&gt;&lt;a name=&quot;DecidebyOliverGierke&quot;&gt;&lt;/a&gt;Decide by Oliver Gierke&lt;/h1&gt;
&lt;p&gt;Looks like this is caused by proxies created through Spring&apos;s ProxyFactory now also implementing a new DecoratingProxy, which exposes getDecoratedClass() and our TargetAware interface that&apos;s in place to mask the artificial proxy properties doesn&apos;t mask that newly introduced attribute. I can adapt our TargetAware accordingly.&lt;br/&gt;
A temporary workaround would be to redeclare the getDecoratedClass() method on your projection interface and annotate it with @JsonIgnore.&lt;/p&gt;

&lt;p&gt;Tests below imaging matter of question.&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;RestController&quot;&gt;&lt;/a&gt;RestController&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&quot;WithoutProjection&quot;&gt;&lt;/a&gt;Without Projection&lt;/h3&gt;
&lt;p&gt;mockMvc.perform(get(&quot;&lt;font color=&quot;#205081&quot;&gt;/rest/persons/1&lt;/font&gt;&quot;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;id&lt;/b&gt;&quot;).value(&lt;b&gt;1&lt;/b&gt;)&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;decoratedClass&lt;/b&gt;&quot;).&lt;b&gt;doesNotExist&lt;/b&gt;());&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ProjectioncreatedbyRepository&quot;&gt;&lt;/a&gt;Projection created by Repository&lt;/h3&gt;
&lt;p&gt;mockMvc.perform(get(&quot;&lt;font color=&quot;#205081&quot;&gt;/rest/persons/1/projected&lt;/font&gt;&quot;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;id&lt;/b&gt;&quot;).value(&lt;b&gt;1&lt;/b&gt;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;decoratedClass&lt;/b&gt;&quot;).value(&quot;&lt;b&gt;java.util.HashMap&lt;/b&gt;&quot;));&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ProjectioncreatedbyRepositorywithGeneric&quot;&gt;&lt;/a&gt;Projection created by Repository with Generic&lt;/h3&gt;
&lt;p&gt;mockMvc.perform(get(&quot;&lt;font color=&quot;#205081&quot;&gt;/rest/persons/1/projectedClass&lt;/font&gt;&quot;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;id&lt;/b&gt;&quot;).value(&lt;b&gt;1&lt;/b&gt;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;decoratedClass&lt;/b&gt;&quot;).value(&quot;&lt;b&gt;java.util.HashMap&lt;/b&gt;&quot;));&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ProjectioncreatedbyProjectionFactory&quot;&gt;&lt;/a&gt;Projection created by Projection Factory&lt;/h3&gt;
&lt;p&gt;mockMvc.perform(get(&quot;&lt;font color=&quot;#205081&quot;&gt;/rest/persons/1/adressCity&lt;/font&gt;&quot;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;id&lt;/b&gt;&quot;).value(&lt;b&gt;1&lt;/b&gt;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;decoratedClass&lt;/b&gt;&quot;).value(&quot;&lt;b&gt;ru.inkontext.domain.Person&lt;/b&gt;&quot;));&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;StandardSringDataRESTAPI&quot;&gt;&lt;/a&gt;Standard Sring Data REST API&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&quot;withoutProjection&quot;&gt;&lt;/a&gt;without Projection&lt;/h3&gt;
&lt;p&gt;mockMvc.perform(get(&quot;&lt;font color=&quot;#205081&quot;&gt;/rest/api/persons/1&lt;/font&gt;&quot;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;id&lt;/b&gt;&quot;).&lt;b&gt;doesNotExist&lt;/b&gt;())&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;_links&lt;/b&gt;&quot;).&lt;b&gt;exists&lt;/b&gt;());&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;withProjection&quot;&gt;&lt;/a&gt;with Projection&lt;/h3&gt;
&lt;p&gt;mockMvc.perform(get(&quot;&lt;font color=&quot;#205081&quot;&gt;/rest/api/persons/1?projection=adressCity&lt;/font&gt;&quot;))&lt;br/&gt;
.andExpect(status().isOk())&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;id&lt;/b&gt;&quot;).value(&lt;b&gt;1&lt;/b&gt;))&lt;br/&gt;
.andExpect(jsonPath(&quot;&lt;b&gt;_links&lt;/b&gt;&quot;).&lt;b&gt;exists&lt;/b&gt;());&lt;/p&gt;</description>
                <environment></environment>
        <key id="69740">DATACMNS-909</key>
            <summary>Exclude decoratedClass from JSON links, created from Projection and received with Spring @RestController</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="olivergierke">Oliver Gierke</assignee>
                                    <reporter username="stolbovd">Dmitry Stolbov</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Sep 2016 08:55:13 +0000</created>
                <updated>Tue, 20 Sep 2016 17:37:48 +0000</updated>
                            <resolved>Fri, 9 Sep 2016 20:02:51 +0000</resolved>
                                    <version>1.11.4 (Gosling SR4)</version>
                    <version>1.12.2 (Hopper SR2)</version>
                    <version>1.13 M1 (Ingalls)</version>
                                    <fixVersion>1.11.5 (Gosling SR5)</fixVersion>
                    <fixVersion>1.12.3 (Hopper SR3)</fixVersion>
                    <fixVersion>1.13 RC1 (Ingalls)</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="131959" author="olivergierke" created="Fri, 9 Sep 2016 15:35:07 +0000"  >&lt;p&gt;Looks like this is caused by proxies created through Spring&apos;s &lt;tt&gt;ProxyFactory&lt;/tt&gt; now also implementing a new &lt;tt&gt;DecoratingProxy&lt;/tt&gt;, which exposes &lt;tt&gt;getDecoratedClass()&lt;/tt&gt; and our &lt;tt&gt;TargetAware&lt;/tt&gt; interface that&apos;s in place to mask the artificial proxy properties doesn&apos;t mask that newly introduced attribute. I can adapt our &lt;tt&gt;TargetAware&lt;/tt&gt; accordingly. &lt;/p&gt;

&lt;p&gt;A temporary workaround would be to redeclare the &lt;tt&gt;getDecoratedClass()&lt;/tt&gt; method on your projection interface and annotate it with &lt;tt&gt;@JsonIgnore&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="131971" author="olivergierke" created="Fri, 9 Sep 2016 20:02:52 +0000"  >&lt;p&gt;That&apos;s in place, feel free to give the snapshots a try.&lt;/p&gt;</comment>
                            <comment id="131975" author="stolbovd" created="Sat, 10 Sep 2016 07:23:52 +0000"  >&lt;p&gt;This decide with &lt;tt&gt;@JsonIgnore&lt;/tt&gt; &lt;tt&gt;getDecoratedClass()&lt;/tt&gt; is worked.&lt;br/&gt;
But it don&apos;t work for &lt;b&gt;query methods&lt;/b&gt; of &lt;tt&gt;Repository&lt;/tt&gt;, which return &lt;tt&gt;Projection&lt;/tt&gt;:&lt;br/&gt;
&lt;tt&gt;Unable to locate Attribute  with the the given name decoratedClass on this ManagedType ru.inkontext.domain.Person&lt;/tt&gt;&lt;br/&gt;
I do not use this method in my project and &lt;tt&gt;@Ignore&lt;/tt&gt; tests in example tests.&lt;br/&gt;
Thank you.&lt;/p&gt;</comment>
                            <comment id="131977" author="stolbovd" created="Sat, 10 Sep 2016 08:45:13 +0000"  >&lt;p&gt;Everything works fine with &lt;tt&gt;spring-data-commons 1.13.0.BUILD-SNAPSHOT&lt;/tt&gt;.&lt;br/&gt;
Thank you very much!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 9 Sep 2016 15:35:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>olivergierke</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i09ewn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10120" key="com.atlassian.jira.plugin.system.customfieldtypes:url">
                        <customfieldname>Reference URL</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[https://github.com/stolbovd/decoratedClass.git]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>