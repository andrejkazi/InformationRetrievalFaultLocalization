<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATACMNS">
	<bug id="477" opendate="2014-03-26 09:51:20" fixdate="2014-03-26 10:24:20" resolution="Fixed">
		<buginformation>
			<summary>PageableHandlerMethodArgumentResolver.setFallbackPageable(null) does not work as specified</summary>
			<description>The javadoc indicates that passing null to this method is valid and should result in a null value handed into the controller method.  However if a null value is passed the result is a NullPointerException thrown from the resolveArgument() method.  It is clear from the implementation code in resolveArgument() that a null default is not anticipated.  The fix is relatively trivial: the resolveArgument() method simply needs to return null if the defaultOrFallback value is null.
The ability to provide null as a default value allows an application to support both paged and non paged results from a single controller method, depending on whether the page parameters are passed in.  The workaround is to declare separate methods and use request mappings to differentiate them based on presence of the page parameters in the request, but this seems awkward compared to being able to simply test for a null pageable.</description>
			<version>1.7.1 (Codd SR1)</version>
			<fixedVersion>1.8 M1 (Dijkstra), 1.7.2 (Codd SR2)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.web.PageableHandlerMethodArgumentResolverUnitTests.java</file>
			<file type="M">org.springframework.data.web.PageableDefaultUnitTests.java</file>
			<file type="M">org.springframework.data.web.PageableHandlerMethodArgumentResolver.java</file>
		</fixedFiles>
	</bug>
	<bug id="479" opendate="2014-03-27 04:17:50" fixdate="2014-03-27 04:25:26" resolution="Fixed">
		<buginformation>
			<summary>Regression in PersistentEntity detection for concrete Map types</summary>
			<description>A change introduced in Spring Data Commons 1.7.x to improve the detection of nested PersistentEntities causes concrete Map types being added to the MappingContext in case they are used as property type.
This is caused by PersistentProperty.isEntity() not excluding Map and Collection types anymore and PersistentProperty.getPersistentEntityTypes() adding the sole type to the list of returned types in a subsequent detection step.
We should ditch the check on isEntity() altogether and solely rely on the list of nested types being returned from getPersistentEntityTypes(). Ironically, master already has this implemented correctly due to the changes made for DATACMNS-243. Still we should forward port the slight change in the detection algorithm to keep them as consistent as possible.</description>
			<version>1.7.1 (Codd SR1)</version>
			<fixedVersion>1.8 M1 (Dijkstra), 1.7.2 (Codd SR2)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mapping.context.AbstractMappingContextUnitTests.java</file>
			<file type="M">org.springframework.data.mapping.context.AbstractMappingContext.java</file>
			<file type="M">org.springframework.data.mapping.model.AbstractPersistentProperty.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">887</link>
		</links>
	</bug>
</bugrepository>