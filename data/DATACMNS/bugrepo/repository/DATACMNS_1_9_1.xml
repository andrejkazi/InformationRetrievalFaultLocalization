<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATACMNS">
	<bug id="590" opendate="2014-11-05 10:29:49" fixdate="2014-11-14 00:51:49" resolution="Fixed">
		<buginformation>
			<summary>Bug in generics detection for multiply nested generic types</summary>
			<description>It fails guess the concrete class of a two level embedded document in a concrete scenario using abstract class with generics.
The reference git repository, reproduces this error running unit tests. It also downloads and runs a local MongoDB server using https://github.com/jirutka/embedmongo-Spring plugin.
</description>
			<version>1.9.1 (Evans SR1)</version>
			<fixedVersion>1.10 M1 (Fowler), 1.8.5 (Dijkstra SR5), 1.9.2 (Evans SR2)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.util.ClassTypeInformation.java</file>
			<file type="M">org.springframework.data.util.ParentTypeAwareTypeInformation.java</file>
			<file type="M">org.springframework.data.util.TypeDiscoverer.java</file>
			<file type="M">org.springframework.data.util.TypeDiscovererUnitTests.java</file>
			<file type="M">org.springframework.data.util.ParameterizedTypeUnitTests.java</file>
			<file type="M">org.springframework.data.util.TypeVariableTypeInformation.java</file>
			<file type="M">org.springframework.data.util.ClassTypeInformationUnitTests.java</file>
			<file type="M">org.springframework.data.util.ParameterizedTypeInformation.java</file>
			<file type="M">org.springframework.data.util.GenericArrayTypeInformation.java</file>
		</fixedFiles>
	</bug>
	<bug id="594" opendate="2014-11-14 03:39:52" fixdate="2014-11-19 09:32:12" resolution="Fixed">
		<buginformation>
			<summary>Strange generics behaviour for multiply nested generic types</summary>
			<description>This behaviour was incorrectly reported reopening DATACMNS-590 by me, sorry about that 
After the resolution of DATACMNS-590, we found another strange behaviour using Spring Data MongoDB, but only disabling the default type mapper resolution, which resolves the class type to map using an attribute. See github repo and run unit tests.
I simplify a lot the domain model and use the generics in the minimal expression as possible to reproduce this, and I think now is much easier to understand.
Take a close look at:

CustomerNonTypedRepositoryTest.testFindOne
CustomerNonTypedRepositoryTest.testFindOneItem

Retrieving a Customer and navigate to ItemType will lead to a ClassCastException due the lost of generic type. But if we retrieve an Item and navigate to ItemType is ok.
I know this is a corner case, and as said in DATACMNS-590 this will probably lead into a &amp;amp;apos;work-as-designed&amp;amp;apos; resolution.
We can&amp;amp;apos;t use the default type, because we are not using Spring to populate the database, but we think we can workaround this providing a custom type mapper.
Thank you </description>
			<version>1.9.1 (Evans SR1)</version>
			<fixedVersion>1.10 M1 (Fowler), 1.8.5 (Dijkstra SR5), 1.9.2 (Evans SR2)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.util.ClassTypeInformation.java</file>
			<file type="M">org.springframework.data.util.TypeDiscoverer.java</file>
			<file type="M">org.springframework.data.util.ClassTypeInformationUnitTests.java</file>
			<file type="M">org.springframework.data.util.GenericArrayTypeInformation.java</file>
			<file type="M">org.springframework.data.util.ParameterizedTypeInformation.java</file>
		</fixedFiles>
	</bug>
	<bug id="609" opendate="2014-11-30 07:31:51" fixdate="2014-12-01 01:35:19" resolution="Fixed">
		<buginformation>
			<summary>Multiple usage of repository setup means (XML or annotation) creates multiple bean definitions for RepositoryInterfaceAwareBeanPostProcessor</summary>
			<description>Apparently every time the tag jpa:repositories is used in XML files, a new instance of RepositoryInterfaceAwareBeanPostProcessor is created and registered with the bean factory. This is mainly a performance problem because predictBeanType()-method is then called N times for every relevant bean. This can easily be reproduced with the version 51d1c5d of git@github.com:spring-projects/spring-data-jpa-examples.git by adding an extra stanza like &amp;lt;jpa:repositories base-package="org.springframework.dummy" /&amp;gt; to simple-repository-context.xml and running XmlConfigCachingRepositoryTests.</description>
			<version>1.9.1 (Evans SR1)</version>
			<fixedVersion>1.10 M1 (Fowler), 1.9.2 (Evans SR2)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport.java</file>
			<file type="M">org.springframework.data.repository.config.RepositoryConfigurationExtensionSupportUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">218</link>
			<link type="Relate" description="relates to">611</link>
		</links>
	</bug>
	<bug id="616" opendate="2014-12-17 02:25:54" fixdate="2014-12-17 07:20:00" resolution="Fixed">
		<buginformation>
			<summary>AnnotationRevisionMetadata can&amp;apos;t access private fields</summary>
			<description>Trying to use a custom Envers revision class:






@Entity




@RevisionEntity(ExtendedRevisionListener.class)




@Table(name = "revinfo")




public class ExtendedRevision implements Serializable {









	@Id




	@GeneratedValue




	@Column(name = "REV")




	@RevisionNumber




	private Integer id;









	@RevisionTimestamp




	@Temporal(TemporalType.TIMESTAMP)




	@Column(name = "REVTSTMP", nullable = false)




	private Date date;









	@Column(nullable = false, length = 15)




	private String username;









	public Integer getId() {




		return id;




	}









	public Date getDate() {




		return date;




	}









	public String getUsername() {




		return username;




	}









	public void setUsername(String username) {




		this.username = username;




	}






triggers this error:






java.lang.IllegalStateException: Could not access method: Class org.springframework.util.ReflectionUtils can not access a member of class ExtendedRevision with modifiers "private"




	at org.springframework.util.ReflectionUtils.handleReflectionException(ReflectionUtils.java:262)




	at org.springframework.util.ReflectionUtils.getField(ReflectionUtils.java:132)




	at org.springframework.data.util.AnnotationDetectionFieldCallback.getValue(AnnotationDetectionFieldCallback.java:82)




	at org.springframework.data.history.AnnotationRevisionMetadata.&amp;lt;init&amp;gt;(AnnotationRevisionMetadata.java:54)






I assume the fields have to be made accessible from the field callback.</description>
			<version>1.9.1 (Evans SR1)</version>
			<fixedVersion>1.8.5 (Dijkstra SR5), 1.9.2 (Evans SR2), 1.10 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.util.AnnotationDetectionFieldCallback.java</file>
		</fixedFiles>
	</bug>
</bugrepository>