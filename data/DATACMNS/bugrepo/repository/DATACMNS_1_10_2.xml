<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATACMNS">
	<bug id="748" opendate="2015-08-08 00:23:11" fixdate="2015-08-08 02:11:14" resolution="Fixed">
		<buginformation>
			<summary>Spring version check in QueryExecutionConverters might fail</summary>
			<description>With the latest Gosling RC I&amp;amp;apos;m intermittently seeing the following Exceptions on deployment. Usually a consecutive deployment will be successful.






org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;entryDao&amp;amp;apos;: Invocation of init method failed; nested exception is java.lang.ExceptionInInitializerError




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1145) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1069) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:967) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:543) ~[spring-beans-4.2.0.RELEASE.jar:na]




	... 37 common frames omitted




Caused by: java.lang.ExceptionInInitializerError: null




	at org.springframework.data.repository.core.support.QueryExecutionResultHandler.&amp;lt;init&amp;gt;(QueryExecutionResultHandler.java:41) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.&amp;lt;init&amp;gt;(RepositoryFactorySupport.java:383) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:203) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:251) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:237) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:92) ~[spring-data-jpa-1.9.0.RC1.jar:na]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) ~[spring-beans-4.2.0.RELEASE.jar:na]




	... 47 common frames omitted




Caused by: java.lang.IllegalArgumentException: [Assertion failed] - this String argument must have text; it must not be null, empty, or blank




	at org.springframework.util.Assert.hasText(Assert.java:168) ~[spring-core-4.2.0.RELEASE.jar:4.2.0.RELEASE]




	at org.springframework.util.Assert.hasText(Assert.java:181) ~[spring-core-4.2.0.RELEASE.jar:4.2.0.RELEASE]




	at org.springframework.data.util.Version.parse(Version.java:67) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.util.QueryExecutionConverters.&amp;lt;clinit&amp;gt;(QueryExecutionConverters.java:47) ~[spring-data-commons-1.11.0.RC1.jar:na]




	... 55 common frames omitted






Own analysis:
Commit in question: https://github.com/spring-projects/spring-data-commons/commit/e0dafd29f4027bd2fe40215c8a916e61bff16740
The usage of org.springframework.core.SpringVersion.getVersion() is unreliable, as already stated in the comment section of said class:






/**




 * Class that exposes the Spring version. Fetches the




 * "Implementation-Version" manifest attribute from the jar file.




 *




 * &amp;lt;p&amp;gt;Note that some ClassLoaders do not expose the package metadata,




 * hence this class might not be able to determine the Spring version




 * in all environments. Consider using a reflection-based check instead:




 * For example, checking for the presence of a specific Spring 2.0




 * method that you intend to call.




 *




 * @author Juergen Hoeller




 * @since 1.1




 */






The code in QueryExecutionConverters private static final Version SPRING_VERSION = Version.parse(SpringVersion.getVersion()); fails to handle null, because Version.parse() has an Assert.hasText() and can&amp;amp;apos;t handle null.
So there are at least two obvious things to consider here: One is the not handling the null case. And the other is the reliance on SpringVersion.getVersion(), which is said to not work in all environments. Or probably in my case has timing issues.</description>
			<version>1.11 RC1 (Gosling)</version>
			<fixedVersion>1.11 GA (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.repository.util.QueryExecutionConverters.java</file>
		</fixedFiles>
	</bug>
	<bug id="750" opendate="2015-08-12 20:05:41" fixdate="2015-08-13 03:50:56" resolution="Fixed">
		<buginformation>
			<summary>Part.extractProperty(String part) invalidly extracts property paths containing keywords</summary>
			<description>I declare a method named findByLeakInfoAuditStateIn(Collection states). When I start up my application, Spring Data throws an exception: 






PropertyReferenceException: No property leak found for type Leak!






LeakInfo is a bean, Leak is not. Then i debug into source, i found source that:






public String extractProperty(String part) {









  String candidate = StringUtils.uncapitalize(part);




  for (String keyword : keywords) {




    if (candidate.endsWith(keyword)) {




      return candidate.substring(0, candidate.indexOf(keyword));




    }




  }




  return candidate;




}






The String.indexOf() method find the first In within LeakInfo. That&amp;amp;apos;s not excepted. May be use String.lastIndexOf() instead?</description>
			<version>1.10.2 (Fowler SR2)</version>
			<fixedVersion>1.11 GA (Gosling), 1.10.3 (Fowler SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.repository.query.parser.PartTreeUnitTests.java</file>
			<file type="M">org.springframework.data.repository.query.parser.Part.java</file>
		</fixedFiles>
	</bug>
	<bug id="755" opendate="2015-08-18 03:36:20" fixdate="2015-08-18 05:09:15" resolution="Complete">
		<buginformation>
			<summary>Paths without parent are causing IllegalArgumentException in QSort class</summary>
			<description>In version 1.8.x was changed the way property path is resolved in class QSort. There is a private method preparePropertyPath(.), which should return the correct path. But if the parent is null, it returns an empty String and this is probably not correct. For example when I use Querydsl StringPath like this:






QSort sort = new QSort(new OrderSpecifier&amp;lt;&amp;gt;(com.mysema.query.types.Order.ASC, new StringPath("eventTime")));






an IllegalArgumentException is thrown:






java.lang.IllegalArgumentException: Property must not null or empty!




	at org.springframework.data.domain.Sort$Order.&amp;lt;init&amp;gt;(Sort.java:320) ~[spring-data-commons-1.9.3.RELEASE.jar:na]




	at org.springframework.data.domain.Sort$Order.&amp;lt;init&amp;gt;(Sort.java:282) ~[spring-data-commons-1.9.3.RELEASE.jar:na]




	at org.springframework.data.domain.Sort$Order.&amp;lt;init&amp;gt;(Sort.java:304) ~[spring-data-commons-1.9.3.RELEASE.jar:na]




	at org.springframework.data.querydsl.QSort.toOrder(QSort.java:98) ~[spring-data-commons-1.9.3.RELEASE.jar:na]




	at org.springframework.data.querydsl.QSort.toOrders(QSort.java:76) ~[spring-data-commons-1.9.3.RELEASE.jar:na]




	at org.springframework.data.querydsl.QSort.&amp;lt;init&amp;gt;(QSort.java:59) ~[spring-data-commons-1.9.3.RELEASE.jar:na]




	at org.springframework.data.querydsl.QSort.&amp;lt;init&amp;gt;(QSort.java:50) ~[spring-data-commons-1.9.3.RELEASE.jar:na]











In version 1.7.x is it working as expected, no parent is needed. The recursion method preparePropertyPath() should be fixed.</description>
			<version>1.10.2 (Fowler SR2)</version>
			<fixedVersion>1.11 GA (Gosling), 1.10.3 (Fowler SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.querydsl.QSort.java</file>
			<file type="M">org.springframework.data.querydsl.QSortUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="760" opendate="2015-09-01 07:21:26" fixdate="2015-09-01 10:40:26" resolution="Complete">
		<buginformation>
			<summary>Remove cyclic dependency in querydsl packages</summary>
			<description></description>
			<version>1.11 RC1 (Gosling)</version>
			<fixedVersion>1.11 GA (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolverUnitTests.java</file>
			<file type="M">org.springframework.data.querydsl.binding.QuerydslBindingsFactoryUnitTests.java</file>
			<file type="M">org.springframework.data.querydsl.binding.QuerydslBindingsFactory.java</file>
			<file type="M">org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver.java</file>
			<file type="D">org.springframework.data.web.querydsl.QuerydslPredicate.java</file>
		</fixedFiles>
	</bug>
	<bug id="761" opendate="2015-09-02 14:08:24" fixdate="2015-09-02 14:17:09" resolution="Fixed">
		<buginformation>
			<summary>PageableHandlerMethodArgumentResolver reduces page size by one if on-indexed parameters are used</summary>
			<description></description>
			<version>1.10.2 (Fowler SR2)</version>
			<fixedVersion>1.11.1 (Gosling SR1), 1.12 M1 (Hopper), 1.10.3 (Fowler SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.web.PageableHandlerMethodArgumentResolverUnitTests.java</file>
			<file type="M">org.springframework.data.web.PageableHandlerMethodArgumentResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">799</link>
		</links>
	</bug>
	<bug id="763" opendate="2015-09-06 09:28:33" fixdate="2015-09-08 10:26:27" resolution="Fixed">
		<buginformation>
			<summary>Custom repository implementation class not working as stated in the reference documentation</summary>
			<description>When I use spring-data-jpa 1.8.2 , which depends on spring-data-commons-1.10.2.RELEASE , my custom repository implementation works fine :






public class MyRepositoryImpl&amp;lt;T, ID extends Serializable&amp;gt; extends SimpleJpaRepository&amp;lt;T , ID&amp;gt; implements MyRepository&amp;lt;T, ID&amp;gt; {









  protected Logger logger = LoggerFactory.getLogger(getClass());









  private final EntityManager entityManager;









  public MyRepositoryImpl(Class&amp;lt;T&amp;gt; domainClass, EntityManager entityManager) {




    super(domainClass , entityManager);




    this.entityManager = entityManager;




  }




}






But when I upgrade my project to spring-boot 1.3.M5 as project&amp;amp;apos;s parent , it seems it&amp;amp;apos;s depend on spring-data-jpa:jar:1.9.0.RELEASE  , and depend on spring-data-commons:jar:1.11.0.RELEASE .
But my custom repository cannot get injected , throws :






Caused by: java.lang.IllegalStateException: No suitable constructor found on class destiny.MyRepositoryImpl to match the given arguments: [Ljava.lang.Object;@554188ac




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getTargetRepositoryViaReflection(RepositoryFactorySupport.java:338)






It seems it&amp;amp;apos;s from RepositoryFactorySupport inside spring-data-commons-1.11.0.RELEASE :






	protected final &amp;lt;R&amp;gt; R getTargetRepositoryViaReflection(RepositoryInformation information, Object... constructorArguments) {




    Class baseClass = information.getRepositoryBaseClass();




    Constructor constructor = ReflectionUtils.findConstructor(baseClass, constructorArguments);




    if(constructor == null) {




      throw new IllegalStateException(String.format("No suitable constructor found on %s to match the given arguments: %s", new Object[]{baseClass, constructorArguments}));




    } else {




      return BeanUtils.instantiateClass(constructor, constructorArguments);




    }




  }






There is no such method in spring-data-commons-1.10.2 , but available in spring-data-commons-1.11.0 . Can you check it out ?
Thanks.
BTW , in the 1.9.0.RELEASE document :
http://docs.spring.io/spring-data/jpa/docs/1.9.0.RELEASE/reference/html/#jpa.misc.jpa-context
I cannot find JpaContext in any package ... where is it ?</description>
			<version>1.11 GA (Gosling)</version>
			<fixedVersion>1.11.1 (Gosling SR1), 1.12 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.java</file>
			<file type="M">org.springframework.data.repository.core.support.RepositoryFactorySupport.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">793</link>
		</links>
	</bug>
	<bug id="772" opendate="2015-10-05 16:00:18" fixdate="2015-10-05 16:01:23" resolution="Duplicate">
		<buginformation>
			<summary>Add converter for ZoneId to String and vice versa</summary>
			<description></description>
			<version>1.11 GA (Gosling)</version>
			<fixedVersion>1.12 M1 (Hopper)</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.convert.ThreeTenBackPortConvertersUnitTests.java</file>
			<file type="M">org.springframework.data.convert.Jsr310Converters.java</file>
			<file type="M">org.springframework.data.convert.ThreeTenBackPortConverters.java</file>
			<file type="M">org.springframework.data.convert.Jsr310ConvertersUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">773</link>
		</links>
	</bug>
	<bug id="769" opendate="2015-10-01 15:10:13" fixdate="2015-10-05 16:45:50" resolution="Fixed">
		<buginformation>
			<summary>Cannot create auto-generated @Async method with pagination</summary>
			<description>When I create a repository with asynchronous paging query, I get a BeanCreationException about incompatible return type, which must be Slice, Page or List (see stacktrace.txt).






public interface TRepository extends MongoRepository&amp;lt;T, String&amp;gt; {









    @Async




    CompletableFuture&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; findByUrl(String url, Pageable p); // works neither with Future nor with ListenableFuture




}





</description>
			<version>1.11 GA (Gosling)</version>
			<fixedVersion>1.11.1 (Gosling SR1), 1.12 M1 (Hopper), 1.10.3 (Fowler SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.repository.util.ClassUtilsUnitTests.java</file>
			<file type="M">org.springframework.data.repository.util.ClassUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="773" opendate="2015-09-25 04:43:18" fixdate="2015-10-05 16:46:04" resolution="Fixed">
		<buginformation>
			<summary>Add support for persisting ZoneId instances out of the box</summary>
			<description>The JSR-310 mapping support can read a simple string (e.g., "US/Central") into a ZoneId field, but when it&amp;amp;apos;s saved, it&amp;amp;apos;s saved as a complex serialized object, with _class: "java.time.ZoneRegion" and all the internal state.
However, the mapper can&amp;amp;apos;t read this saved object, presumably because of the lack of a cooperative constructor; the exception message is






org.springframework.data.mapping.model.MappingException: No property null found on entity class java.time.ZoneRegion to bind constructor parameter to!






I suggest that the ZoneId should be saved as the simple string identifier.</description>
			<version>1.11 GA (Gosling)</version>
			<fixedVersion>1.12 M1 (Hopper)</fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.convert.ThreeTenBackPortConvertersUnitTests.java</file>
			<file type="M">org.springframework.data.convert.Jsr310Converters.java</file>
			<file type="M">org.springframework.data.convert.ThreeTenBackPortConverters.java</file>
			<file type="M">org.springframework.data.convert.Jsr310ConvertersUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">772</link>
		</links>
	</bug>
	<bug id="779" opendate="2015-10-22 08:14:51" fixdate="2015-10-22 09:56:26" resolution="Fixed">
		<buginformation>
			<summary>Fix JavaDoc of constructor of QuerydslPredicateBuilder</summary>
			<description></description>
			<version>1.11 GA (Gosling)</version>
			<fixedVersion>1.11.1 (Gosling SR1), 1.12 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.querydsl.binding.QuerydslPredicateBuilder.java</file>
		</fixedFiles>
	</bug>
	<bug id="789" opendate="2015-11-23 16:13:06" fixdate="2015-11-23 16:13:49" resolution="Fixed">
		<buginformation>
			<summary>Fix typo in JavaDoc of Page</summary>
			<description></description>
			<version>1.10.2 (Fowler SR2)</version>
			<fixedVersion>1.11.2 (Gosling SR2), 1.12 M1 (Hopper), 1.10.3 (Fowler SR3)</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.domain.Page.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">906</link>
		</links>
	</bug>
	<bug id="799" opendate="2015-12-29 03:25:57" fixdate="2015-12-29 12:41:26" resolution="Duplicate">
		<buginformation>
			<summary>Pageable&amp;apos;s size should not be dependent on 1-based or 0-based paging.</summary>
			<description>In this controller :






@RequestMapping("/list")




public String list(Model model , Pageable pageable) {




  logger.info("pageable = {}" , pageable);




  // ... skipped




}






My goal : I want Spring automatically build this pageable object from page and size parameter of URL , which page starts from 1.
The solution is here : http://stackoverflow.com/questions/34459658
First , I feel the API design of `addArgumentResolvers` is problematic . It has to call super.addArgumentResolvers(argumentResolvers) at the end of the method.
It should be able to designed to just add the resolver to argumentResolvers and make it work.
And here is the point : resolver.setOneIndexedParameters(true) will also change the meaning of size , it is very counter-intuitive.
In most people&amp;amp;apos;s intuition , no matter page starts from 1 or 0 , size should not be dependent on that value.
But when I code : 






resolver.setMaxPageSize(10);




resolver.setOneIndexedParameters(true);






And pass ?page=1&amp;amp;size=10 in the URL . The receiving size becomes 9 . It should be fixed.</description>
			<version>1.10.2 (Fowler SR2)</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.web.PageableHandlerMethodArgumentResolverUnitTests.java</file>
			<file type="M">org.springframework.data.web.PageableHandlerMethodArgumentResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">761</link>
		</links>
	</bug>
	<bug id="843" opendate="2016-04-10 09:23:23" fixdate="2016-04-10 09:32:50" resolution="Fixed">
		<buginformation>
			<summary>Raise log level of repositories that get dropped in strict configuration mode to INFO</summary>
			<description></description>
			<version>1.10.2 (Fowler SR2)</version>
			<fixedVersion>1.10.3 (Fowler SR3), 1.11.5 (Gosling SR5), 1.12.2 (Hopper SR2), 1.13 M1 (Ingalls)</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.repository.config.RepositoryConfigurationDelegate.java</file>
			<file type="M">org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">690</link>
			<link type="Relate" description="relates to">1413</link>
		</links>
	</bug>
	<bug id="690" opendate="2015-05-07 12:31:58" fixdate="2016-05-31 16:33:20" resolution="Duplicate">
		<buginformation>
			<summary>Multi-store silently ignores repository creation failures</summary>
			<description>Basic use case is presented here
https://github.com/spring-projects/spring-data-examples/tree/master/multi-store
In my use case we did not put @Document on mongo annotations. Therefore, when I migrated our application to the latest version of spring boot (hence the latest version of spring data), my repositories were not created in the context.
It was very hard to guess that this happened as this is notified on a DEBUG level.
Fyi, we have a @Enable*Repositories which points to separate packages to avoid confusion on repository creation, therefore, it is was not trivial to understand the existence of this "strict" mode.</description>
			<version>1.10.2 (Fowler SR2)</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.repository.config.RepositoryConfigurationDelegate.java</file>
			<file type="M">org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">843</link>
		</links>
	</bug>
	<bug id="906" opendate="2016-08-26 14:24:44" fixdate="2016-08-31 11:58:06" resolution="Duplicate">
		<buginformation>
			<summary>Typo in Javadoc of Page.getTotalPages()</summary>
			<description>In the javadoc of org.springframework.data.domain.Page, method getTotalPages, the word total is not written correctly in @return. Thank&amp;amp;apos;s </description>
			<version>1.10.2 (Fowler SR2)</version>
			<fixedVersion></fixedVersion>
			<type>Task</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.domain.Page.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">789</link>
		</links>
	</bug>
</bugrepository>