<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATACMNS">
	<bug id="509" opendate="2014-05-08 08:39:02" fixdate="2014-05-20 07:35:26" resolution="Fixed">
		<buginformation>
			<summary>NullableWrapper Breaks JSON Conversion</summary>
			<description>Since an upgrade to JPA 1.6 RC1, Spring MVC fails to properly address a NullableWrapper and this is returned, with the contents contained with the NullableWrapper.
I have a MVC method that is returning:






public Callable&amp;lt;Set&amp;lt;Pos&amp;gt;&amp;gt; get(.....) {




    final Set&amp;lt;Pos&amp;gt; allPos = posService.findAll();




    return ImmutableSortedSet.copyOf(allPos);




}






With Spring Data JPA 1.5., I get on the wire a set of Pos&amp;amp;apos;s in JSON format, i.e.,






[{"name: "pos1"}, {"name: "pos2"}]






With Spring Data JPA 1.6 RC1, I now get the NullableWrapper with Contents:






[valueType: "java.util.ArrayList", value: [{"name: "pos1"}, {"name: "pos2"}]]





</description>
			<version>1.8 RC1 (Dijkstra)</version>
			<fixedVersion>1.8 GA (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.repository.util.QueryExecutionConverters.java</file>
			<file type="M">org.springframework.data.repository.core.support.RepositoryFactorySupport.java</file>
			<file type="M">org.springframework.data.repository.core.support.DummyRepositoryFactory.java</file>
			<file type="M">org.springframework.data.repository.core.support.RepositoryFactorySupportUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="511" opendate="2014-05-22 00:04:43" fixdate="2014-05-31 05:54:31" resolution="Fixed">
		<buginformation>
			<summary>AbstractMappingContext.addPersistentEntity causes infinite loop</summary>
			<description>After updating from Codd SR2 to Dijkstra I could not run my tests. After debugging the issue I found that the problem lies in AbstractMappingContext.addPersistentEntity. This method is never called in Codd SR2 due to initialize not being triggered.
We use quite a few abstract MappedSuperclasses that have circular references and apparently this does not work. An example:






public class User extends AbstractTenantUser&amp;lt;User, Role, Permission, Tenant&amp;gt; {




    ...




}




public abstract class AbstractTenantUser&amp;lt;USER extends AbstractTenantUser&amp;lt;USER, ROLE, PERMISSION, TENANT&amp;gt;, ROLE extends AbstractRole&amp;lt;USER, PERMISSION&amp;gt;, PERMISSION extends AbstractPermission&amp;lt;USER&amp;gt;, TENANT extends AbstractTenant&amp;lt;USER&amp;gt;&amp;gt; extends AbstractUser&amp;lt;USER, ROLE, PERMISSION&amp;gt; implements TenantEntity&amp;lt;TENANT&amp;gt; {




    ...




}




public abstract class AbstractUser&amp;lt;USER extends AbstractUser&amp;lt;USER, ROLE, PERMISSION&amp;gt;, ROLE extends AbstractRole&amp;lt;USER, PERMISSION&amp;gt;, PERMISSION extends AbstractPermission&amp;lt;USER&amp;gt;&amp;gt; extends AuditingDateBaseEntity&amp;lt;USER&amp;gt; {




    ...




}




public abstract class AbstractPermission&amp;lt;USER extends AbstractUser&amp;lt;USER, ?, ?&amp;gt;&amp;gt; extends AuditingDateBaseEntity&amp;lt;USER&amp;gt; {




    ...




}




public abstract class AuditingDateBaseEntity&amp;lt;USER extends AbstractUser&amp;lt;USER, ?, ?&amp;gt;&amp;gt; extends AbstractDateBaseEntity implements AuditingEntity&amp;lt;USER&amp;gt; {




    ...




}




public abstract class AbstractDateBaseEntity extends AbstractBaseEntity implements DateEntity {




    ...




}




public abstract class AbstractBaseEntity implements BaseEntity {




    ...




}






I hope this gives enough insight into the problem and hopefully you can fix this soon.</description>
			<version>1.8 GA (Dijkstra)</version>
			<fixedVersion>1.7.3 (Codd SR3), 1.8.1 (Dijkstra SR1), 1.9 M1 (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.util.TypeVariableTypeInformation.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">558</link>
		</links>
	</bug>
	<bug id="566" opendate="2014-08-21 01:12:31" fixdate="2014-08-26 04:58:52" resolution="Fixed">
		<buginformation>
			<summary>Cannot sort on field operation with QueryDSL</summary>
			<description>Hello, it seems sorting on field operation (like yearMonth() on a date) with querydsl is not working since 1.7.3. (no problem with 1.6.5)






QInvoice invoice = QInvoice.invoice;




Iterable&amp;lt;Invoice&amp;gt; all = invoiceRepository.findAll(invoice.exclTaxAmount.gt(0), invoice.issueDate.yearMonth().asc());






Exception stack trace:






java.lang.ClassCastException: com.mysema.query.types.OperationImpl cannot be cast to com.mysema.query.types.Path




	at org.springframework.data.querydsl.QSort.toOrder(QSort.java:89)




	at org.springframework.data.querydsl.QSort.toOrders(QSort.java:72)




	at org.springframework.data.querydsl.QSort.&amp;lt;init&amp;gt;(QSort.java:55)




	at org.springframework.data.querydsl.QSort.&amp;lt;init&amp;gt;(QSort.java:46)




	at org.springframework.data.jpa.repository.support.QueryDslJpaRepository.findAll(QueryDslJpaRepository.java:108)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:442)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:427)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:381)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)




	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)




	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)




	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)




	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)




	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodIntercceptor.invoke(CrudMethodMetadataPostProcessor.java:111)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)




	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)




	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)




	at com.sun.proxy.$Proxy119.findAll(Unknown Source)






FIY, following is working






JPAQuery query = new JPAQuery(entityManager);




QInvoice invoice = QInvoice.invoice;




SearchResults&amp;lt;Invoice&amp;gt; results = query.from(invoice).where(invoice.exclTaxAmount.gt(0)).orderBy(invoice.issueDate.yearMonth().asc()).listResults(invoice);






Thanks</description>
			<version>1.7.3 (Codd SR3)</version>
			<fixedVersion>1.8.4 (Dijkstra SR4), 1.9 GA (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.querydsl.User.java</file>
			<file type="M">org.springframework.data.querydsl.QSort.java</file>
			<file type="M">org.springframework.data.querydsl.QSortUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">596</link>
		</links>
	</bug>
</bugrepository>