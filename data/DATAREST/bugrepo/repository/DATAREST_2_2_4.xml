<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATAREST">
	<bug id="423" opendate="2014-12-07 03:58:17" fixdate="2014-12-09 04:18:23" resolution="Fixed">
		<buginformation>
			<summary>Spring Data REST registered ConversionService not used when overriding individual resources</summary>
			<description>I have a business object User and in my application I have to set property active to false when deleting User.
I don&amp;amp;apos;t want to expose my business logic on REST model so I wanted to override DELETE /user/{id} behavior to patch user to set active to false.
In order to achieve that I write my own controller with following piece of code:






@RepositoryRestController




@ResponseBody




@RequestMapping("/users")




public class UserController {









    @Inject




    private UserService userService;









    @ResponseStatus(value = HttpStatus.NO_CONTENT)




    @RequestMapping(method = RequestMethod.DELETE, value = "/{user}")




    public void delete(@PathVariable("user") User user) {




        user.setActive(false);




        userService.save(user);




    }




}






Method is correctly called but I get an org.springframework.beans.ConversionNotSupportedException...
So I tried to add a custom converter (String -&amp;gt; User) like describe here: http://docs.spring.io/spring-data/rest/docs/1.1.0.M1/reference/htmlsingle/#d4e110
But the converter is never called.
When debugging I saw that https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java#L169 is NULL that why my converter is not called.
I will try to find more and create PR if possible but atm I don&amp;amp;apos;t have more information.</description>
			<version>2.3 M1 (Fowler)</version>
			<fixedVersion>2.2.2 (Evans SR2), 2.3 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.JpaWebTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="448" opendate="2015-01-16 05:31:07" fixdate="2015-01-16 07:38:22" resolution="Fixed">
		<buginformation>
			<summary>RepositoryRestHandlerMapping is handling non-repository requests</summary>
			<description>The fix for DATAREST-429 has introduced a regression of RepositoryRestHandlerMapping not verifying the repositoryLookupPath actually pointing to a repository in the first place.</description>
			<version>2.3 M1 (Fowler)</version>
			<fixedVersion>2.3 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryRestHandlerMappingUnitTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.java</file>
			<file type="M">org.springframework.data.rest.webmvc.CommonWebTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="492" opendate="2015-03-22 12:04:42" fixdate="2015-03-23 00:59:01" resolution="Fixed">
		<buginformation>
			<summary>JSON Schema reports primitive numbers as object</summary>
			<description>A type like this:

{class:java}
class Sample {

  double foo;
}{class}

yields a JSON Schema document of:






{




  "foo" : {




    "type" : "object"




  }




}





</description>
			<version>2.3 RC1 (Fowler)</version>
			<fixedVersion>2.3 GA (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.json.JsonSchema.java</file>
		</fixedFiles>
	</bug>
	<bug id="498" opendate="2015-03-28 21:49:16" fixdate="2015-03-30 01:47:41" resolution="Fixed">
		<buginformation>
			<summary>JSON Patch request not recognized if Content-Type header contains media type parameters</summary>
			<description>A request isn&amp;amp;apos;t properly recognized as a JSON Patch one, resulting in exception (as detailed in StackOverflow URL).
Issue appears to be that PersistentEntityResourceHandlerMethodArgumentResolver builds an IncomingRequest, and that constructor sets its contentType to application/json-patch+json;charset=UTF-8. This then fails the IncomingRequest&amp;amp;apos;s isJsonPatchRequest() test because the inbound otherType now has a parameters map entry (charset -&amp;gt; UTF-8) and the  RestMediaTypes.JSON_PATCH_JSON does not. </description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.4 M1 (Gosling), 2.3.1 (Fowler SR1), 2.2.3 (Evans SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.data.rest.webmvc.AugmentingHandlerMappingUnitTest.java</file>
			<file type="M">org.springframework.data.rest.webmvc.IncomingRequest.java</file>
		</fixedFiles>
	</bug>
	<bug id="500" opendate="2015-03-30 05:59:33" fixdate="2015-03-30 12:34:36" resolution="Fixed">
		<buginformation>
			<summary>Rendering of lazy-loading proxies fails</summary>
			<description>Problem is that the nested lazy loading proxy is not unpacked correctly, see the linked example project for further details.
The code in 





org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.doWithReferencedProperty(RootResourceInformation, Serializable, String, Function&amp;lt;ReferencedProperty, ResourceSupport&amp;gt;, HttpMethod)




PersistentEntity&amp;lt;?, ?&amp;gt; persistentEntity = repoRequest.getPersistentEntity();




PersistentProperty&amp;lt;?&amp;gt; prop = persistentEntity.getPersistentProperty(propertyPath);




...




PersistentPropertyAccessor accessor = persistentEntity.getPropertyAccessor(domainObj);




Object propVal = accessor.getProperty(prop);






traverses the product property of the Category which returns the proxied version of the product instance. This instance cannot be serialized. We have to find a way to unwrap that proxy (probably still in JPA) or make it somehow serializable (in a way that works for other proxy mechanisms too...)
The test case: shouldBeAbleToResolveLazyLoadingProxyForProductInCategory demonstrates the problem.</description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.4 M1 (Gosling), 2.3.1 (Fowler SR1), 2.2.3 (Evans SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.json.Jackson2DatatypeHelper.java</file>
		</fixedFiles>
	</bug>
	<bug id="507" opendate="2015-04-08 08:02:14" fixdate="2015-04-08 09:02:11" resolution="Fixed">
		<buginformation>
			<summary>RepositoryRestExceptionHandler throws IllegalArgumentException</summary>
			<description>The RepositoryRestExceptionHandler throws an IllegalArgumentException if a DataIntegrityViolationException or OptimisticLockingFailureException occurs causing a wrong server response: 500 Internal ServerError.
Have a look at the handleConflict() Method. The errorResponse() method get&amp;amp;apos;s accidentally called with a null argument for the HttpHeaders.</description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.4 M1 (Gosling), 2.3.1 (Fowler SR1)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryRestExceptionHandlerUnitTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler.java</file>
		</fixedFiles>
	</bug>
	<bug id="519" opendate="2015-04-14 13:00:51" fixdate="2015-04-14 13:24:55" resolution="Fixed">
		<buginformation>
			<summary>RepositoryEntityLinks does not populate search resource URIs with Pageable and Sorts</summary>
			<description></description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.4 M1 (Gosling), 2.3.1 (Fowler SR1)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.support.RepositoryEntityLinksIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.support.RepositoryEntityLinks.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">668</link>
			<link type="Relate" description="is related to">467</link>
		</links>
	</bug>
	<bug id="522" opendate="2015-04-16 06:48:14" fixdate="2015-05-07 05:36:27" resolution="Fixed">
		<buginformation>
			<summary>GET on RestRepository not possible, if a RestController for the same path is available</summary>
			<description>We have a Spring Data REST project, with several @RepositoryRestResource annotated Spring Data Repositories.
Example: 






PersonRepository.java






@RepositoryRestResource(path = "person")




public interface PersonRepository extends PagingAndSortingRepository&amp;lt;Person, Integer&amp;gt; {}






We want to override the POST/PATCH method of one of these repositories. So we annotate a RestController with @RestController and the annotation @RequestMapping has the same path as the repository.
Example: 






PersonController.java






@RestController




@RequestMapping("person")




public class PersonController{









	@RequestMapping(method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)




	public ResponseEntity&amp;lt;Boolean&amp;gt; savePerson(@RequestBody Person person) {




...




}






The POST/PATCH works fine. But now a GET to /person (to receive all Persons) throws an HttpRequestMethodNotSupportedException and says: Request method &amp;amp;apos;GET&amp;amp;apos; not supported.
A GET to /person/1 instead is working just fine. 
We had a look at https://jira.spring.io/browse/DATAREST-490 and the @BasePathAwareController, but this doesnt seem to change anything.</description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.4 M1 (Gosling), 2.3.1 (Fowler SR1)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.support.DelegatingHandlerMappingUnitTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.support.DelegatingHandlerMapping.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">490</link>
		</links>
	</bug>
	<bug id="514" opendate="2015-04-09 23:43:29" fixdate="2015-05-19 07:30:07" resolution="Fixed">
		<buginformation>
			<summary>Custom @RestResource path shows up as link href, but doesn&amp;apos;t load data</summary>
			<description>SDR 2.3.0 Fowler.
I have Service and ServiceInstance entities. The relationship is many-one.
On the Service side I have the following:






    @OneToMany(mappedBy = "service", cascade = CascadeType.ALL, orphanRemoval = true)




    @RestResource(rel = "service-instances", path = "service-instances")




    private List&amp;lt;ServiceInstance&amp;gt; serviceInstances = new ArrayList&amp;lt;&amp;gt;();






On the ServiceInstance side I have






@ManyToOne




@JoinColumn(name = "service_id")




@RestResource(rel = "s:service", path = "service")




private Service service;






though I don&amp;amp;apos;t think that matters.
When I get a single Service resource, the links are what I expect:






    GET http://localhost:8080/api/services/17




    




    {




      "key" : "upp",




      "_links" : {




        "self" : {




          "href" : "http://localhost:8080/api/services/17{?projection}",




          "templated" : true




        },




        "s:service-instances" : {




          "href" : "http://localhost:8080/api/services/17/service-instances"




        },




        ...




    }






But when I try to load the s:service-instances resource at http://localhost:8080/api/services/17/service-instances, I get a 404.
If I go to http://localhost:8080/api/services/17/serviceInstances, I can see the data.
So @RestResource(path) appears to control the link href, but not the actual route to the data.</description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.4 M1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.support.RepositoryLinkBuildUnitTests.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.ResourceMetadata.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.ResourceMappings.java</file>
			<file type="D">org.springframework.data.rest.core.mapping.ResourceMappingsIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.AbstractControllerIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.support.RepositoryEntityLinks.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.MappingResourceMetadata.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.JpaWebTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.mapping.AssociationLinks.java</file>
			<file type="D">org.springframework.data.rest.webmvc.mapping.PropertyMappings.java</file>
			<file type="M">org.springframework.data.rest.webmvc.alps.RootResourceInformationToAlpsDescriptorConverter.java</file>
			<file type="M">org.springframework.data.rest.webmvc.support.PersistentEntityProjector.java</file>
			<file type="M">org.springframework.data.rest.core.support.RepositoryRelProvider.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryController.java</file>
			<file type="M">org.springframework.data.rest.webmvc.config.ResourceMetadataHandlerMethodArgumentResolver.java</file>
			<file type="M">org.springframework.data.rest.webmvc.AssociationLinksUnitTests.java</file>
			<file type="D">org.springframework.data.rest.core.mapping.RepositoryAwareResourceInformation.java</file>
			<file type="M">org.springframework.data.rest.webmvc.alps.AlpsController.java</file>
			<file type="M">org.springframework.data.rest.webmvc.support.RepositoryLinkBuilder.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.PersistentPropertyResourceMappingUnitTests.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.RepositoryResourceMappings.java</file>
			<file type="M">org.springframework.data.rest.core.domain.jpa.Person.java</file>
			<file type="M">org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.Book.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.java</file>
			<file type="M">org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.RepositoryTestsConfig.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositorySearchController.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.java</file>
		</fixedFiles>
	</bug>
	<bug id="582" opendate="2015-06-17 11:23:52" fixdate="2015-07-06 04:01:47" resolution="Fixed">
		<buginformation>
			<summary>Secured event handler method invoked twice</summary>
			<description>If I annotate my event handler methods with a Pre/Post annotation, it is added to the handlerMethods() twice, and as a consequence invoked twice.
I suppose this is not the intended behavior. 






@Slf4j




@RepositoryEventHandler(User.class)




public class UserEventHandler {









    @HandleBeforeCreate




    @PreAuthorize("hasRole(&amp;amp;apos;ROLE_ADMIN&amp;amp;apos;))




    public void handleNewUser(User newUser) {




        log.debug("Handle user {}", newUser);




       // processing here




    }




}






The two handlers in the map (package names removed) are






EventHandlerMethod{ 




    targetType=class User, 




    method=public final void  UserEventHandler$$EnhancerBySpringCGLIB$$a9872696.handleNewUser(User), 




    handler=UserEventHandler@77e9dca8 




}






and






EventHandlerMethod{ 




    targetType=class User, 




    method=public void UserEventHandler.handleNewUser(User), 




    handler=UserEventHandler@77e9dca8 




}






The EnhancerBySpringCGLIB version is not in the map when @PreAuthorize is removed.</description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.3.1 (Fowler SR1), 2.4 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.core.util.Methods.java</file>
			<file type="M">org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.java</file>
		</fixedFiles>
	</bug>
	<bug id="581" opendate="2015-06-17 09:50:36" fixdate="2015-07-16 10:57:08" resolution="Fixed">
		<buginformation>
			<summary>ETag getVersionInformation fails with proxied Entities for projections</summary>
			<description>See the reference GitHub project.
I&amp;amp;apos;ve got an @Entity with a @Version&amp;amp;apos;ed field, a @Projection, and a Repository. When I try to GET the projection of a single entry, I get a 500 Internal server error, because of a failed assertion in BasicPersistentEntity line 394, as called from Etag line 191:
&amp;gt; Assert.isTrue(getType().isInstance(bean), "Target bean is not of type of the persistent entity!");
The argument bean here is of type $Proxy90 / JdkDynamicAopProxy, not Book.
The projection only works again when the @Version annotation is removed. This is since Fowler, as I had no such issues with Evans.</description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.3.1 (Fowler SR1), 2.4 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryEntityControllerIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryEntityController.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.Address.java</file>
		</fixedFiles>
	</bug>
	<bug id="605" opendate="2015-07-02 23:41:07" fixdate="2015-07-22 12:06:21" resolution="Fixed">
		<buginformation>
			<summary>NullPointerExceptions when issuing PATCH requests on entities containing Map properties</summary>
			<description>The PATCH request when we have a Map in our entities doesn&amp;amp;apos;t work. I have a map containing the localizations values for an field.  The PUT/POST works correctly. Once I try to PATCH with application/json media type I get a NullPointerException.
Just send the following raw content as PATCH request body:






{




  "name": {




    "bg_BG": {




      "value": "123"




    },




    "en_GB": {




      "value": "Mens66"




    }




  }




}






The problem I guess is inside DomainObjectReader.doMerge(). Here once I hit the map property there is a check is nested != null and is it a property. Because property is true it invokes recursively the doMerge() method which at the beginning is trying to get entities.getPersistentEntity() but the argument passed is a PersistentMap and the result is null, so after that getJacksonProperties() of null throws an NPE. 
I am attaching a simple project containing a JUnit test that shows that (the test is called testPatchHttp).
Looking at the code I noticed that in JsonPatchHandler.apply() there is a check checking request.isJsonPatchRequest() which in case of application/json is false. (the case explained above) I tried to send content type of application/json-patch+json to go on the other route but there I also got an exception "Can not deserialize instance of java.util.ArrayList out of START_OBJECT token". I am attaching this test as well which is called "testPatchJsonPatchHttp".</description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion>2.3.2 (Fowler SR2), 2.4 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.config.JsonPatchHandlerUnitTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.java</file>
			<file type="M">org.springframework.data.rest.webmvc.config.JsonPatchHandler.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.DomainObjectReader.java</file>
		</fixedFiles>
	</bug>
	<bug id="594" opendate="2015-06-23 08:44:21" fixdate="2015-07-27 05:30:17" resolution="Duplicate">
		<buginformation>
			<summary>Extending SpringBootRepositoryRestMvcConfiguration removes jacksonObjectMapper bean</summary>
			<description>I have an application where I am auto-wiring ObjectMapper as 






@Autowired




@Qualifier("jacksonObjectMapper")




private ObjectMapper mapper;






If I create a class (with empty body even), which extends SpringBootRepositoryRestMvcConfiguration, this code breaks, because there is no jacksonObjectMapper bean. There are other ObjectMapper instances, but they behave differently. Extending a class should not change the applications behavior.</description>
			<version>2.3 GA (Fowler)</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.java</file>
			<file type="M">org.springframework.data.rest.webmvc.config.LegacyRepresentationConfigIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverterUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">621</link>
			<link type="Relate" description="relates to">621</link>
		</links>
	</bug>
	<bug id="754" opendate="2016-01-22 14:41:01" fixdate="2016-01-25 16:53:10" resolution="Fixed">
		<buginformation>
			<summary>Spring Data REST throws NPE when exposing JSON Schema for a Groovy domai object</summary>
			<description>While looking up the JSON Schema for a Groovy domain object-based repository, Spring Data REST threw an NPE. It was trying to parse Groovy&amp;amp;apos;s "metaClass" attribute, which doesn&amp;amp;apos;t exist in a pure Java-based domain object definition.
Need to add groovy-all as a test dependency and then craft some Groovy-based test cases so we can then patch whatever is needed inside PersistentEntityToJsonSchemaConverter to make this work.</description>
			<version>2.2.4 (Evans SR4)</version>
			<fixedVersion>2.5 M1 (Hopper), 2.4.4 (Gosling SR4)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.alps.AlpsControllerIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.groovy.SimulatedGroovyDomainClassRepository.java</file>
			<file type="M">org.springframework.data.rest.webmvc.mongodb.groovy.SimulatedGroovyDomainClass.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.groovy.SimulatedGroovyDomainClass.java</file>
			<file type="M">org.springframework.data.rest.webmvc.mongodb.groovy.SimulatedGroovyDomainClassRepository.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverterUnitTests.java</file>
		</fixedFiles>
	</bug>
</bugrepository>