<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATAREST">
	<bug id="384" opendate="2014-09-10 07:32:44" fixdate="2014-10-15 04:36:03" resolution="Fixed">
		<buginformation>
			<summary>Query method do not consider Sort parameters</summary>
			<description>Assume you have a repository interface like this:






public interface CustomerRepository extends Repository&amp;lt;Customer, Long&amp;gt; {









  List&amp;lt;Customer&amp;gt; findByLastname(@Param("lastname") String lastname, Sort sort);




}






then the Sort paramter is neither advertised






{ "_links" : {




    "findByLastname" : {




      "href" : "http://localhost:8080/customers/search/findByLastname{?lastname}",




      "templated" : true




    }




  }




}






nor is it considered if you trigger a request to the URI:






http://localhost:8080/customers/search/findByLastname?sort=firstname,asc





</description>
			<version>2.1.4 (Dijkstra SR4)</version>
			<fixedVersion>2.2.1 (Evans SR1), 2.3 M1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.jpa.TestDataPopulator.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.JpaWebTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.BookRepository.java</file>
			<file type="M">org.springframework.data.rest.webmvc.support.DefaultedPageable.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositorySearchControllerIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.MethodResourceMapping.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositorySearchController.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="394" opendate="2014-09-26 12:26:22" fixdate="2014-12-01 10:18:38" resolution="Fixed">
		<buginformation>
			<summary>Projections are not applied to collection attributes</summary>
			<description>When a projection has an attribute which is a collection of another projection, Spring Data REST is not populating the collection with projections but with entities. This patch allows Spring Data REST to apply projections to collection attributes as well.</description>
			<version>2.1.4 (Dijkstra SR4)</version>
			<fixedVersion>2.3 M1 (Fowler), 2.1.5 (Dijkstra SR5), 2.2.2 (Evans SR2)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.core.projection.ProjectingMethodInterceptor.java</file>
			<file type="M">org.springframework.data.rest.core.projection.ProjectingMethodInterceptorUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">408</link>
		</links>
	</bug>
	<bug id="408" opendate="2014-11-11 00:04:37" fixdate="2014-12-01 10:18:42" resolution="Fixed">
		<buginformation>
			<summary>Nested projections not loading nested lists</summary>
			<description>When nesting projections, Lists/Maps are not included in the processing. Sample:
The following snippet represents the nested projection, which contains a list of limitations.






"name" : "Light",




    "description" : "Light",




    "enabled" : true,




    "limitations" : [ {




      "name" : "Request",




      "description" : "Number of requests per billing period",




      "type" : null,




      "value" : 20.0




    } ],




    "links" : [ ],




    "content" : [ ],




    "links" : [ {




      "rel" : "self",




      "href" : "http://localhost:8080/web/specifications/1310{?projection}"




    }, {




      "rel" : "limitations",




      "href" : "http://localhost:8080/web/specifications/1310/limitations"




    }, {




      "rel" : "product",




      "href" : "http://localhost:8080/web/specifications/1310/product"




    }






Using the parent projection, which contains the nested projection






"name" : "Light",




    "description" : "Light",




    "prices" : [ {




      "value" : -1.0,




      "currency" : "USD",




      "unit" : "Request",




      "period" : "Month",




      "interval" : 1,




      "approximation" : false,




      "component" : null




    } ],




    "productCategory" : {




      "name" : "Price comparison",




      "description" : "Blablablaba"




    },




    "specifications" : [ {




      "name" : "Light",




      "description" : "Light",




      "enabled" : true




    } ],




    "trialPeriod" : null,




    "trialInterval" : 0,




    "links" : [ ],




    "content" : [ ],




    "links" : [ {




      "rel" : "self",




      "href" : "http://localhost:8080/web/products/1300{?projection}"




    }, {




      "rel" : "specifications",




      "href" : "http://localhost:8080/web/products/1300/specifications"




    }, {




      "rel" : "product",




      "href" : "http://localhost:8080/web/products/1300/product"




    }, {




      "rel" : "productCategory",




      "href" : "http://localhost:8080/web/products/1300/productCategory"




    }, {




      "rel" : "accounts",




      "href" : "http://localhost:8080/web/products/1300/accounts"




    } ]






one can see, that all types (int, string) etc. are rendered, but the list not. </description>
			<version>2.1.4 (Dijkstra SR4)</version>
			<fixedVersion>2.3 M1 (Fowler), 2.1.5 (Dijkstra SR5), 2.2.2 (Evans SR2)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.core.projection.ProjectingMethodInterceptor.java</file>
			<file type="M">org.springframework.data.rest.core.projection.ProjectingMethodInterceptorUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">394</link>
			<link type="Duplicate" description="is duplicated by">477</link>
		</links>
	</bug>
	<bug id="445" opendate="2015-01-16 03:13:42" fixdate="2015-01-16 04:10:30" resolution="Fixed">
		<buginformation>
			<summary>RepositoryCollectionResourceMapping does not obtain domain type from RepositoryMetadata</summary>
			<description>RepositoryCollectionResourceMapping is manually looking up generic types to determine the domain type handled but actually it can just use the RepositoryMetadata handed into the constructor.</description>
			<version>2.1.4 (Dijkstra SR4)</version>
			<fixedVersion>2.1.5 (Dijkstra SR5), 2.2.2 (Evans SR2), 2.3 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.core.mapping.RepositoryCollectionResourceMapping.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.RepositoryCollectionResourceMappingUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="446" opendate="2015-01-16 04:13:07" fixdate="2015-01-20 03:58:26" resolution="Fixed">
		<buginformation>
			<summary>Remove usage of RepositoriesUtils as it potentially breaks customizations of ResourceMetadata</summary>
			<description>Using RepositoriesUtils to determine the managed domain type from a repository interface potentially subverts customizations made for RepositoryMetadata. We should remove its usage entirely.</description>
			<version>2.1.4 (Dijkstra SR4)</version>
			<fixedVersion>2.1.5 (Dijkstra SR5), 2.2.2 (Evans SR2), 2.3 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.core.mapping.RepositoryCollectionResourceMapping.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.RepositoryAwareResourceInformation.java</file>
			<file type="D">org.springframework.data.rest.core.support.RepositoriesUtils.java</file>
			<file type="M">org.springframework.data.rest.core.mapping.RepositoryResourceMappings.java</file>
		</fixedFiles>
	</bug>
	<bug id="460" opendate="2015-01-20 01:38:04" fixdate="2015-01-26 03:20:31" resolution="Fixed">
		<buginformation>
			<summary>Make sure @Bean methods of RepositoryRestMvcConfiguration are called from proxied methods</summary>
			<description>Some methods in RepositoryRestMvcConfiguration are private but call @Bean annotated methods in turn. These method calls will not get intercepted correctly as private methods are not intercepted by the CGLib generated subtype of the configuration class. That means that @Bean methods called from the private methods will not be routed through the interceptor and thus Spring&amp;amp;apos;s bean management (scopes, invocation of callbacks) will not be applied.</description>
			<version>2.1.4 (Dijkstra SR4)</version>
			<fixedVersion>2.1.5 (Dijkstra SR5), 2.2.2 (Evans SR2), 2.3 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.java</file>
		</fixedFiles>
	</bug>
</bugrepository>