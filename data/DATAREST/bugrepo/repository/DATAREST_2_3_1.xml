<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATAREST">
	<bug id="617" opendate="2015-07-16 03:35:17" fixdate="2015-07-16 06:27:58" resolution="Fixed">
		<buginformation>
			<summary>Requests with Accept header of application/*+json return the compact representation</summary>
			<description>As the controller methods handling the compact representation use an explicit produces clause in the request mapping, they get favored when the client sends Accept: application/*+json.
We should tweak the default mappings to implicitly match this situation.</description>
			<version>2.3.1 (Fowler SR1)</version>
			<fixedVersion>2.3.2 (Fowler SR2), 2.4 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.java</file>
			<file type="M">org.springframework.data.rest.webmvc.config.LegacyRepresentationConfigIntegrationTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.BasePathAwareHandlerMapping.java</file>
		</fixedFiles>
	</bug>
	<bug id="606" opendate="2015-07-03 08:57:17" fixdate="2015-07-20 10:04:53" resolution="Fixed">
		<buginformation>
			<summary>Non-public @RepositoryEventHandler are not made accessible prior to reflective invocation</summary>
			<description>To reproduce:
1. Register a non-public @RepositoryEventHandler class with at least one @HandleBeforeCreate, @HandleBeforeSave, etc. method.
2. Try to create / save an entity through its repository.
3. Notice the following exception:






java.lang.IllegalStateException: Could not access method: Class org.springframework.util.ReflectionUtils can not access a member of class com.example.MyEventHandler with modifiers "public"




	at org.springframework.util.ReflectionUtils.handleReflectionException(ReflectionUtils.java:271)




	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:214)




	at org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.onApplicationEvent(AnnotatedEventHandlerInvoker.java:92)






The fix is to setAccessible(true) on the method prior to invoking it at AnnotatedEventHandler:92. </description>
			<version>2.3.1 (Fowler SR1)</version>
			<fixedVersion>2.3.2 (Fowler SR2), 2.4 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.java</file>
			<file type="M">org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.java</file>
		</fixedFiles>
	</bug>
</bugrepository>