<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 17:19:30 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATAREST-158/DATAREST-158.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATAREST-158] Exposing custom repositories</title>
                <link>https://jira.spring.io/browse/DATAREST-158</link>
                <project id="10901" key="DATAREST">Spring Data REST</project>
                    <description>&lt;p&gt;Github Author: jhiemer&lt;br/&gt;
Github Last-Updated: 2013-04-18T14:02:16Z&lt;br/&gt;
This issue was automatically imported from github&lt;/p&gt;

&lt;p&gt;In SD JPA is an option for CustomRepositories (&lt;a href=&quot;http://static.springsource.org/spring-data/data-jpa/docs/1.0.0.M1/reference/html/#repositories.custom-implementations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.springsource.org/spring-data/data-jpa/docs/1.0.0.M1/reference/html/#repositories.custom-implementations&lt;/a&gt;). Today I was trying to expose them via /rest/search. Unfortunately it didn&apos;t work. When I am calling /rest/search/ only the methods in the EntityRepository are exposed, the methods of CustomEntityRepository are not.&lt;/p&gt;

&lt;p&gt;Is there any workaround, or did I miss something?&lt;/p&gt;</description>
                <environment></environment>
        <key id="50587">DATAREST-158</key>
            <summary>Exposing custom repositories</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="olivergierke">Oliver Gierke</assignee>
                                    <reporter username="thomasd">Thomas Darimont</reporter>
                        <labels>
                    </labels>
                <created>Tue, 27 Aug 2013 01:33:23 +0000</created>
                <updated>Fri, 30 Jan 2015 01:51:53 +0000</updated>
                            <resolved>Wed, 22 Oct 2014 03:28:32 +0000</resolved>
                                                                        <due></due>
                            <votes>2</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="106949" author="larasith" created="Sun, 17 Aug 2014 07:31:12 +0000"  >&lt;p&gt;I&apos;ve the same problem. I think that it happen because:&lt;/p&gt;

&lt;p&gt;DefaultRepositoryInformation:&lt;/p&gt;

&lt;p&gt;        @Override&lt;br/&gt;
	public Set&amp;lt;Method&amp;gt; getQueryMethods() {&lt;/p&gt;

&lt;p&gt;		Set&amp;lt;Method&amp;gt; result = new HashSet&amp;lt;Method&amp;gt;();&lt;/p&gt;

&lt;p&gt;		for (Method method : getRepositoryInterface().getMethods()) {&lt;br/&gt;
			method = ClassUtils.getMostSpecificMethod(method, getRepositoryInterface());&lt;br/&gt;
			if (isQueryMethodCandidate(method)) &lt;/p&gt;
{
				result.add(method);
			}
&lt;p&gt;		}&lt;/p&gt;

&lt;p&gt;		return Collections.unmodifiableSet(result);&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;       private boolean isQueryMethodCandidate(Method method) &lt;/p&gt;
{
		return !method.isBridge() //
				&amp;amp;&amp;amp; (isQueryAnnotationPresentOn(method) || !isCustomMethod(method) &amp;amp;&amp;amp; !isBaseClassMethod(method));
	}</comment>
                            <comment id="108838" author="james.king.zj" created="Tue, 21 Oct 2014 04:49:48 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;My suggestion is using @Query to mark a method that has custom implementation as a query method. Then we don&apos;t even need to change the code of getQueryMethods. The custom method will be returned by getQueryMethods.&lt;/p&gt;

&lt;p&gt;The problem is that the constructor of QueryExecutorMethodInterceptor will look up the RepositoryQuery for query methods and it fails if the value attribute of @Query or the name of the custom method is illegal. Just don&apos;t look up RepositoryQuery for custom method in constructor of QueryExecutorMethodInterceptor.&lt;/p&gt;

&lt;p&gt;Here is the code.&lt;/p&gt;

&lt;p&gt;        for (Method method : queryMethods) {&lt;br/&gt;
            if (!repositoryInformation.isCustomMethod(method)) &lt;/p&gt;
{
                RepositoryQuery query = lookupStrategy.resolveQuery(method, repositoryInformation, namedQueries);
                invokeListeners(query);
                queries.put(method, query);
            }
&lt;p&gt;        }&lt;/p&gt;
</comment>
                            <comment id="108893" author="olivergierke" created="Wed, 22 Oct 2014 03:32:45 +0000"  >&lt;p&gt;Closed this one as duplicate as &lt;a href=&quot;https://jira.spring.io/browse/DATAREST-206&quot; title=&quot;Provide means to expose custom repository methods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DATAREST-206&quot;&gt;DATAREST-206&lt;/a&gt; already has an explanation of why we don&apos;t expose custom methods by default yet. Repurposing &lt;tt&gt;@Query&lt;/tt&gt; is clearly a non-option as it has well defined semantics and we must not alter those just to satisfy some downstream requirement. We definitely can make exposing custom methods work but we need to find Spring Data REST specific means to do so.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="52366">DATAREST-206</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="60307">DATACMNS-584</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 17 Aug 2014 07:31:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37080</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>thomasd</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i06jmn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38218</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36782</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10120" key="com.atlassian.jira.plugin.system.customfieldtypes:url">
                        <customfieldname>Reference URL</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[https://api.github.com/repos/SpringSource/spring-data-rest/issues/19]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>