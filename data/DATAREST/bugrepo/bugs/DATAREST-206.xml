<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 17:25:51 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATAREST-206/DATAREST-206.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATAREST-206] Provide means to expose custom repository methods</title>
                <link>https://jira.spring.io/browse/DATAREST-206</link>
                <project id="10901" key="DATAREST">Spring Data REST</project>
                    <description>&lt;p&gt;i have custom methods in my repository and interface that are not showing up in my search links ... no search link at all. I believe the line at fault is in DefaultRepositoryInformation#isQueryMethodCandidate&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;private boolean isQueryMethodCandidate(Method method) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	return isQueryAnnotationPresentOn(method) || !isCustomMethod(method) &amp;amp;&amp;amp; !isBaseClassMethod(method);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;i would think that if a method is a custom method (defined in interface and implementing class but is NOT a method in the base repository class, then it should be a candidate for a query method. So shouldn&apos;t the method be as such?&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;private boolean isQueryMethodCandidate(Method method) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	return isQueryAnnotationPresentOn(method) || isCustomMethod(method) &amp;amp;&amp;amp; !isBaseClassMethod(method);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;</description>
                <environment></environment>
        <key id="52366">DATAREST-206</key>
            <summary>Provide means to expose custom repository methods</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="10003" iconUrl="https://jira.spring.io/images/icons/statuses/inprogress.png" description="This issue is being actively worked on at the moment by the assignee. ">Investigating</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="olivergierke">Oliver Gierke</assignee>
                                    <reporter username="loesak">Aaron Loes</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 Dec 2013 08:50:42 +0000</created>
                <updated>Mon, 19 Sep 2016 08:42:53 +0000</updated>
                                            <version>2.0 M1 (Codd)</version>
                                                        <due></due>
                            <votes>15</votes>
                                    <watches>20</watches>
                                                                <comments>
                            <comment id="96480" author="olivergierke" created="Fri, 13 Dec 2013 11:01:51 +0000"  >&lt;p&gt;This is by design. Custom repository methods are no query methods as they can effectively implement &lt;b&gt;any&lt;/b&gt; behavior. Thus, it&apos;s currently impossible for us to decide about the HTTP method to expose the method under. &lt;tt&gt;POST&lt;/tt&gt; would be the safest option but that&apos;s not in line with the generic query methods (which receive &lt;tt&gt;GET&lt;/tt&gt;).&lt;/p&gt;

&lt;p&gt;I&apos;ll turn this into an improvement as I can imagine us providing means to express the intended HTTP method either through an annotation or external configuration.&lt;/p&gt;</comment>
                            <comment id="96483" author="loesak" created="Fri, 13 Dec 2013 11:17:11 +0000"  >&lt;p&gt;i guess a more generic question is how do i get the search links to appear? I&apos;m not seeing specifics of how to get search links to work but am seeing examples in documentation.&lt;/p&gt;

&lt;p&gt;see &lt;a href=&quot;http://docs.spring.io/spring-data/rest/docs/2.0.0.M1/reference/htmlsingle/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.spring.io/spring-data/rest/docs/2.0.0.M1/reference/htmlsingle/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="98865" author="loesak" created="Wed, 12 Feb 2014 13:41:42 +0000"  >&lt;p&gt;added comments, please review (didn&apos;t know i needed to explicitly use the &quot;provide feedback&quot; button)&lt;/p&gt;</comment>
                            <comment id="104563" author="springuser007" created="Tue, 17 Jun 2014 13:26:42 +0000"  >&lt;p&gt;Could we leverage &lt;tt&gt;@RequestMapping&lt;/tt&gt; annotation for custom methods and appropriately expose the methods as HTTP &lt;tt&gt;GET&lt;/tt&gt; or &lt;tt&gt;POST&lt;/tt&gt;?&lt;/p&gt;</comment>
                            <comment id="109033" author="jancula9" created="Sun, 26 Oct 2014 06:56:46 +0000"  >&lt;p&gt;+1. This is my most desired feature. A lot of queries in our project are just complex and must be implemented as custom repository methods with related boilerplate code (controllers etc.). For this purpose I would suggest to create new category, something like a &apos;custom repository query&apos; methods. Just annotated custom methods with @Query or so. Then these could be validated and exposed same way as current query/search methods.          &lt;/p&gt;</comment>
                            <comment id="109651" author="jeffrey.segal" created="Thu, 13 Nov 2014 12:05:02 +0000"  >&lt;p&gt;I agree with the previous commenters on the usefulness of this feature. The workaround of creating your own controller is certainly reasonable but less elegant than letting spring-data-rest do that for you. That said, I concede that a lot of explicit information would need to be provided in the form of method annotations for the framework to be able to properly determine HTTP methods, return codes and error conditions.&lt;/p&gt;</comment>
                            <comment id="111999" author="jimmymiller" created="Tue, 27 Jan 2015 10:07:45 +0000"  >&lt;p&gt;I understand why these aren&apos;t exported by default and the discussion around how to export them. In the mean time though, if we want to add our own links to the /search section, how should we go about doing that?&lt;/p&gt;</comment>
                            <comment id="112003" author="olivergierke" created="Tue, 27 Jan 2015 10:23:53 +0000"  >&lt;p&gt;I created &lt;a href=&quot;https://jira.spring.io/browse/DATAREST-469&quot; title=&quot;Introduce dedicated resource type for search links&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DATAREST-469&quot;&gt;&lt;del&gt;DATAREST-469&lt;/del&gt;&lt;/a&gt; to create a special type to be returned for the search resource so that you can write a &lt;tt&gt;ResourceProcessor&amp;lt;SearchLinksResource&amp;gt;&lt;/tt&gt; to add links to it. Scheduled for the Evans SR2 release due tomorrow.&lt;/p&gt;</comment>
                            <comment id="119123" author="frdjaegh" created="Wed, 2 Sep 2015 15:45:14 +0000"  >&lt;p&gt;Why not by naming convention? Methods starting with find.... -&amp;gt; GET, etc.&lt;/p&gt;</comment>
                            <comment id="119297" author="koscejev" created="Tue, 8 Sep 2015 11:52:41 +0000"  >&lt;p&gt;Perhaps methods annotated with &lt;tt&gt;@org.springframework.data.jpa.repository.Modifying&lt;/tt&gt; could be exposed as POST by default.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="69127">DATAREST-850</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="50587">DATAREST-158</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="61977">DATAREST-469</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="60307">DATACMNS-584</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 13 Dec 2013 11:01:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38846</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>olivergierke</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i06rvz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39556</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38548</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                </customfields>
    </item>
</channel>
</rss>