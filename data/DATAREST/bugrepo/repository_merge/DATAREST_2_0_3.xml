<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATAREST">
	<bug id="5" master="354" duplicate="244" opendate="2014-02-07 15:57:41" fixdate="2015-03-05 01:14:29" resolution="Fixed">
		<buginformation>
			<summary>Revamp JSON Schema support to current draft of the spec SDR Schema follows json-schema?</summary>
			<description>Similarly to the support for ALPS we added in Evans M1, we should expose API meta-data in JSON Schema and JSON Hyper-Schema format.
[0] http://json-schema.org The schema (/schema) output of SDR follows the specification (http://json-schema.org/documentation.html )? If so what version?</description>
			<version>2.1 RC1 (Dijkstra)</version>
			<fixedVersion>2.3 RC1 (Fowler)</fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.core.domain.jpa.Person.java</file>
			<file type="M">org.springframework.data.rest.webmvc.mongodb.Address.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.Book.java</file>
			<file type="M">org.springframework.data.rest.webmvc.mongodb.Profile.java</file>
			<file type="M">org.springframework.data.rest.webmvc.jpa.Author.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverterUnitTests.java</file>
			<file type="M">org.springframework.data.rest.webmvc.RepositorySchemaController.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.java</file>
			<file type="M">org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.java</file>
			<file type="M">org.springframework.data.rest.webmvc.mongodb.User.java</file>
			<file type="M">org.springframework.data.rest.core.config.MetadataConfiguration.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.JacksonMetadata.java</file>
			<file type="M">org.springframework.data.rest.webmvc.json.JsonSchema.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">244</link>
			<link type="Relate" description="relates to">486</link>
			<link type="Relate" description="is related to">399</link>
			<link type="Relate" description="is related to">194</link>
			<link type="Relate" description="is related to">208</link>
			<link type="Duplicate" description="duplicates">354</link>
		</links>
	</bug>
	<bug id="11" master="320" duplicate="328" opendate="2014-06-13 05:04:09" fixdate="2014-06-27 09:53:37" resolution="Fixed">
		<buginformation>
			<summary>Fields with @JsonProperty are ignored on serialization Serialization errors if type contains only renamed properties</summary>
			<description>Field annotated with @JsonProperty are left out from the serialization. This also means that it is not possible to alter the json property name. 
The problem seems to be caused by 





PersistentEntityJackson2Module.updateBuilder(..)





 on line #219, where the property is attempted looked up by the name from the @JsonProperty, instead of the "real" property name. One way I think this can be solved is to add an inner loop to find the internal name from beanDesc.findProperties().
Example:






@Entity




public class Description {    




    private String heading;




    @JsonProperty("body")




    private String content;




    ...




}






On serialization, everything looks fine from Jackson&amp;amp;apos;s perspective, but when the updateBuilder() hook on PersistentEntityJackson2Module is called the content property is omitted because the name of the field is different from the @JsonProperty.
I haven&amp;amp;apos;t sent a pull request, since I haven&amp;amp;apos;t enlisted in the contributor program, but hopefully you can cherry pick or look at the commit on my fork.
This problem was also described in DATAREST-117 and the corresponding pull request that was never merged: https://github.com/spring-projects/spring-data-rest/pull/136. Adding @EnableMongoAuditing to an application configuration causes a few different problems related to (but probably not caused by) Jackson serialization.  These issues can be reproduced by (1) starting an application with @EnableMongoAuditing, (2) POSTing certain types of entities to a RepositoryRestResource, and (3) attempting to GET from the same repository.  
Please refer to the referenced URL for a working example based on the mongodb-data-rest getting-started sample.  Also note the comment with sample command-line input at: https://github.com/ncantelmo/gs-accessing-mongodb-data-rest/commit/988626629a1ef708b5a3d44c4bd8b2874662747f#commitcomment-6740135
Additional notes:

This issue was initially identified in an application that implemented AuditorAware.  The inclusion of an AuditorAware bean appears to make no difference on the described behavior.
The following sequence of events will NOT reveal the issue: (1) POST a new document to some repository X, (2) Restart the application, (3), GET from repository X, (4) POST another document with the same fields to repository X, (5) GET from repository X.
In other words, if you GET from a populated repository before you POST, the serialization routines will work properly.
In the referenced example, removing the @JsonProperty("brand_name") annotation in PetFood.java will prevent serialization from causing a crash.
In root-level entities or immediate nested children, custom @JsonProperty annotations will cause the annotated properties to not be fetched during a GET after an initial POST, but won&amp;amp;apos;t cause a crash.

</description>
			<version>2.1 GA (Dijkstra)</version>
			<fixedVersion>2.1.1 (Dijkstra SR1), 2.2 M1 (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">328</link>
			<link type="Duplicate" description="duplicates">320</link>
		</links>
	</bug>
</bugrepository>