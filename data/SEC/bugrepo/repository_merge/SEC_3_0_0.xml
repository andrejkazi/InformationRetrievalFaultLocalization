<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SEC">
	<bug id="19" master="1346" duplicate="1353" opendate="2009-12-29 12:17:09" fixdate="2010-01-06 07:26:21" resolution="Fixed">
		<buginformation>
			<summary>SessionManagementFilter: should "return;" after "redirectStrategy.sendRedirect(request, response, invalidSessionUrl);" SessionManagementFilter can invoke other filters after sending redirect</summary>
			<description>java.lang.IllegalStateException: Cannot create a session after the response has been committed
	org.apache.catalina.connector.Request.doGetSession(Request.java:2313)
	org.apache.catalina.connector.Request.getSession(Request.java:2074)
	org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:833)
	org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:844)
	javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:224)
	org.springframework.security.web.savedrequest.HttpSessionRequestCache.saveRequest(HttpSessionRequestCache.java:38)
	org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(ExceptionTranslationFilter.java:177)
	org.springframework.security.web.access.ExceptionTranslationFilter.handleException(ExceptionTranslationFilter.java:158)
	org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:95)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:79)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:55)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:36)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:188)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:106)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:150)
	org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237)
	org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) SessionManagementFilter::doFilter() fails to stop request processing in branch "No security context or authentication present" (at SessionManagementFilter.java:89). More precisely, it does not return after calling redirectStrategy.sendRedirect(), but passes to the next filter.
This causes an error if there are controllers that define methods taking a HttpSession argument, because in this case AnnotationMethodHandlerAdapter attempts to call request.getSession(), which is not permitted after a redirect had been sent.</description>
			<version>3.0.0</version>
			<fixedVersion>3.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.web.concurrent.ConcurrentSessionFilterTests.java</file>
			<file type="M">org.springframework.security.web.session.SessionManagementFilter.java</file>
			<file type="M">org.springframework.security.web.util.UrlUtils.java</file>
			<file type="M">org.springframework.security.web.session.SessionManagementFilterTests.java</file>
			<file type="M">org.springframework.security.web.session.ConcurrentSessionFilter.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">1353</link>
			<link type="Duplicate" description="duplicates">1346</link>
		</links>
	</bug>
	<bug id="55" master="1272" duplicate="1289" opendate="2009-10-18 16:06:23" fixdate="2009-11-16 23:04:52" resolution="Fixed">
		<buginformation>
			<summary>&lt;authentication-manager&gt; does not register default event handler DefaultAuthenticationEventPublisher Successful registration event</summary>
			<description>When using the namespace configuration, creating an &amp;lt;authentication-manager&amp;gt; should automatically register a default event publisher. This allows applications to be notified about security events such as logins and login failures - for example I want these notifications so that I can write audit logs of failed logins. 
The Javadoc on org.springframework.security.authentication.ProviderManager states that such a default event publisher is automatically registered when using the namespace. It says: 
"The standard implementation is DefaultAuthenticationEventPublisher which maps common exceptions to events (in the case of authentication failure) and publishes an AuthenticationSuccessEvent if authentication succeeds. If you are using the namespace then an instance of this bean will be used automatically by the &amp;lt;http&amp;gt; configuration, so you will receive events from the web part of your application automatically."
However ProviderManager does not actually register a DefaultAuthenticationEventPublisher! It uses its private NullEventPublisher class that does nothing. That means that if you use the namespace configuration you don&amp;amp;apos;t actually receive the default events. The only way to receive those events is to manually create a ProviderManager bean and inject a DefaultAuthenticationEventPublisher bean into it.
I think that:

&amp;lt;authentication-manager&amp;gt; should use DefaultAuthenticationEventPublisher instead of NullEventPublisher
&amp;lt;authentication-manager&amp;gt; should allow the AuthenticationEventPublisher on ProviderManager to be overridden if desired

 With 3.0M2 and before I used the following code to register successful registrations and save client&amp;amp;apos;s IPs
[code]
public class AuthenticationListener implements ApplicationListener {
    @Override
    public void onApplicationEvent(ApplicationEvent event) {
        if (event instanceof AuthenticationSuccessEvent) 
{
            onAuthenticationSuccessEvent((AuthenticationSuccessEvent) event);
        }
    }
    public void onAuthenticationSuccessEvent(AuthenticationSuccessEvent authenticationSuccessEvent) 
{
        // my code
    }
}
[/code]
With 3.0RC1 there are no AuthenticationSuccessEvent events any more. I&amp;amp;apos;ve found the following comment for org.springframework.security.authentication.DefaultAuthenticationEventPublisher
"The default strategy used by &amp;lt;tt&amp;gt;ProviderManager&amp;lt;/tt&amp;gt; for publishing authentication events."
But when I looked in ProviderManager I&amp;amp;apos;ve found that the default strategy is NullEventPublisher which is created by private field&amp;amp;apos;s initializer.
I thought that it&amp;amp;apos;s possible to inject DefaultAuthenticationEventPublisher with default XML security scheme but I&amp;amp;apos;ve found no entry point to do this.</description>
			<version>3.0.0 RC1</version>
			<fixedVersion>3.0.0.RC2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.config.authentication.AuthenticationManagerBeanDefinitionParserTests.java</file>
			<file type="M">org.springframework.security.config.authentication.AuthenticationManagerBeanDefinitionParser.java</file>
			<file type="M">org.springframework.security.authentication.DefaultAuthenticationEventPublisher.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">1289</link>
			<link type="Duplicate" description="duplicates">1272</link>
		</links>
	</bug>
</bugrepository>