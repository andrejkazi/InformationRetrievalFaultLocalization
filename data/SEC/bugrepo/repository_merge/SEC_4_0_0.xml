<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SEC">
	<bug id="12" master="2919" duplicate="2949" opendate="2015-03-25 21:24:22" fixdate="2015-04-28 18:53:46" resolution="Fixed">
		<buginformation>
			<summary>DefaultLoginGeneratingFilter incorrectly used if login-url="/login" Custom Login not working in Spring 4.0</summary>
			<description>If an application specifies form-login@login-url="/login" then the DefaultLoginGeneratingFilter is incorrectly used. This means that the custom login page cannot be specified with the URL "/login". For example:






&amp;lt;http ...&amp;gt;




	&amp;lt;form-login login-page="/login" ... /&amp;gt;




&amp;lt;/http&amp;gt;






Workaround
Using a different URL
One workaround is to use a different URL for the login page. For example, one could use "/authenticate".
Using a BeanDefinitionRegistryPostProcessor
Alternatively, the following BeanDefinitionRegistryPostProcessor will fix the issue by removing the DefaultLoginPageGeneratingFilter. To use it simply ensure to register the BeanDefinitionRegistryPostProcessor as a Bean.






import java.util.Iterator;




import java.util.List;









import org.springframework.beans.BeansException;




import org.springframework.beans.factory.config.BeanDefinition;




import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;




import org.springframework.beans.factory.support.BeanDefinitionRegistry;




import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;




import org.springframework.security.web.DefaultSecurityFilterChain;




import org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter;









public class Sec2919PostProcessor implements BeanDefinitionRegistryPostProcessor {




	@Override




	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)




			throws BeansException {




		String[] beanDefinitionNames = registry.getBeanDefinitionNames();




		for(String name : beanDefinitionNames) {




			BeanDefinition beanDefinition = registry.getBeanDefinition(name);




			if(beanDefinition.getBeanClassName().equals(DefaultSecurityFilterChain.class.getName())) {




				List&amp;lt;Object&amp;gt; filters = (List&amp;lt;Object&amp;gt;) beanDefinition.getConstructorArgumentValues().getArgumentValue(1, List.class).getValue();




				Iterator&amp;lt;Object&amp;gt; iFilters = filters.iterator();




				while(iFilters.hasNext()) {




					Object f = iFilters.next();




					if(f instanceof BeanDefinition) {




						BeanDefinition bean = (BeanDefinition) f;




						if(bean.getBeanClassName().equals(DefaultLoginPageGeneratingFilter.class.getName())) {




							iFilters.remove();




						}




					}




				}




			}




		}




	}









	@Override




	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)




			throws BeansException {




	}




}





 i created a simple spring mvc project and added a custom login page. The custom login works fine with 3.2.7 but the same custom login does not work when i upgrade to 4.0.0.Release. </description>
			<version>4.0.0</version>
			<fixedVersion>4.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.config.http.AuthenticationConfigBuilder.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">2949</link>
			<link type="Duplicate" description="duplicates">2919</link>
		</links>
	</bug>
	<bug id="43" master="2595" duplicate="2698" opendate="2014-05-17 09:18:19" fixdate="2014-08-11 07:09:25" resolution="Complete">
		<buginformation>
			<summary>@EnableGlobalMethodSecurity creates JDK dynamic proxies instead of using AspectJ advices @EnableGlobalMethodSecurity is not respecting mode = AdviceMode.ASPECTJ</summary>
			<description>The following config creates JDK proxies for secured beans preprocessed with an AspectJ compiler, thus rendering AnnotationSecurityAspect useless.
@EnableGlobalMethodSecurity(mode=AdviceMode.ASPECTJ, securedEnabled=true)
class SecurityConfig 
{...}

The AspectJMethodSecurityInterceptor that AnnotationSecurityAspect requires appears to only be instantiated by GlobalMethodSecurityBeanDefinitionParser. This implies that AnnotationSecurityAspect is only usable in XML config mode (but not Java config mode).
The attached Gradle project demonstrates this problem. Long description in link to Stackoverflow.
XML Configuration like this:
	&amp;lt;security:global-method-security mode="aspectj" proxy-target-class="false" pre-post-annotations="enabled"&amp;gt;
		&amp;lt;security:expression-handler ref="expressionHandler" /&amp;gt;
	&amp;lt;/security:global-method-security&amp;gt;
The AnnotationSecurityAspect is configured by GlobalMethodSecurityBeanDefinitionParser at line 251
With a Javaconfig Class like this:
@Configuration
@EnableGlobalMethodSecurity(mode = AdviceMode.ASPECTJ, prePostEnabled = true)
public class MethodSecurityConfig extends GlobalMethodSecurityConfiguration
{
	@Override
	protected MethodSecurityExpressionHandler createExpressionHandler ( )
	{ 
          ...
	}
}
The AnnotationSecurityAspect is not configured. Spring-Security will create some AutoProxy AOP Classes which is bad as I wanted to use aspectj with compile-time-weaving
</description>
			<version>4.0.0.M1</version>
			<fixedVersion>3.2.5, 4.0.0.M2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar.java</file>
			<file type="M">org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">2698</link>
			<link type="Relate" description="is related to">3005</link>
			<link type="Relate" description="is related to">3045</link>
			<link type="Duplicate" description="duplicates">2595</link>
			<link type="Relate" description="is related to">3005</link>
			<link type="Relate" description="is related to">3045</link>
		</links>
	</bug>
	<bug id="45" master="2078" duplicate="2794" opendate="2012-11-09 01:12:03" fixdate="2015-02-24 14:45:28" resolution="Complete">
		<buginformation>
			<summary>Pre-authentication fails when using check for principal change and using non String principals AbstractPreAuthenticatedProcessingFilter requires authentication check failure</summary>
			<description>The problem occurs when using pre-authentication with "check for principal change" set and the class there extends org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter using non String principals but e.g. java.security.Principal.
The problem is that the authentication manager will always authenticate even the principal has no changed, this can give problems with the authentication provider, and performance in the code.
The error is in line 145 in the AbstractPreAuthenticatedProcessingFilter class, the code:
  if (currentUser.getName().equals(principal)) 
{
    return false;
  }

should be changed to something like:
  if (principal instanceof Principal) 
{
    return !currentUser.getName().equals(((Principal)principal).getName());
  }
  else 
{
    return !currentUser.getName().equals(principal.toString());
  }

The original code will only function when the passed principal parameter is of the type String. The code suggested will function for all type of objects there either implements the java.security.Principal interface or override the toString method. In the AbstractPreAuthenticatedProcessingFilter.requiresAuthentication(HttpServletRequest request) method which is private, there is the following code:
        Object principal = getPreAuthenticatedPrincipal(request);
        if (currentUser.getName().equals(principal)) 
{
            return false;
        }

This assumes that the overriden method of getPreAuthenticatedPrincipal(request) will always return a String, when in fact it could be any object. This needs to change to either:
		String principal = request.getUserPrincipal().getName();
		if (currentUser.getName().equals(principal)) 
{
			return false;
		}
or provide an abstract method (or at least a protected/public method) in order to do the comparison - see attachment. My getPreAuthenticatedPrincipal(request) returns a FederationPrincipal, and not a String. The only way to deal with it at the moment is to completely copy the AbstractPreAuthenticatedProcessingFilter, and change the tiny bit of code above.</description>
			<version>4.0.0.RC1</version>
			<fixedVersion>3.2.6, 4.0.0.RC2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilterTests.java</file>
			<file type="M">org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">2497</link>
			<link type="Duplicate" description="is duplicated by">2751</link>
			<link type="Duplicate" description="is duplicated by">2794</link>
			<link type="Relate" description="is related to">3051</link>
			<link type="Duplicate" description="duplicates">2078</link>
		</links>
	</bug>
</bugrepository>