<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SEC">
	<bug id="9" master="2045" duplicate="2101" opendate="2012-09-06 11:28:44" fixdate="2012-12-27 13:19:49" resolution="Fixed">
		<buginformation>
			<summary>AbstractAuthorizeTag cannot specify which WebInvocationPrivilegeEvaluator AbstractAuthorizeTag.getPrivilegeEvaluator() always returns first WebInvocationPrivilegeEvaluator found</summary>
			<description>AbstractAuthorizeTag uses the first WebInvocationPrivilegeEvaluator which causes problems when evaluating the url attribute and having multiple &amp;lt;http&amp;gt; elements. When using the authorize tag like this:






&amp;lt;sec:authorize method="POST" url="/data/hosts"&amp;gt;....&amp;lt;/sec:authorize&amp;gt;






...the AbstractAuthorizeTag.getPrivilegeEvaluator() method is requested to return an evaluator. But this method will always return the first it finds even if more than one is found. This is especially a problem if one or more of the &amp;amp;apos;sections&amp;amp;apos; of privileges are aimed at something else than a HTML access(fx. JSON API).
I have this in my springsecuritycontext.xml:






&amp;lt;http request-matcher-ref="jsonMatcher" create-session="stateless" authentication-manager-ref="apiAuthMgr"&amp;gt;




        &amp;lt;intercept-url pattern="/data/**" access="ROLE_API_USER" /&amp;gt;




        &amp;lt;http-basic /&amp;gt;




    &amp;lt;/http&amp;gt;




    




    &amp;lt;http authentication-manager-ref="siteAuthMgr"&amp;gt;




        &amp;lt;intercept-url  method="PUT" pattern="/data/**" access="ROLE_IT-infrastruktur" /&amp;gt;




        &amp;lt;intercept-url  method="POST" pattern="/data/**" access="ROLE_IT-infrastruktur" /&amp;gt;




        &amp;lt;intercept-url  method="DELETE" pattern="/data/**" access="ROLE_IT-infrastruktur" /&amp;gt;




        &amp;lt;intercept-url  method="GET" pattern="/data/credentials**" access="ROLE_IT-infrastruktur" /&amp;gt;




        &amp;lt;form-login/&amp;gt;




    &amp;lt;/http&amp;gt;




.......






This work flawlessly in regards to using the correct authentication-manager based on the request-matcher, but when it comes to the authorize-tag it will always try to match on the first section, because AbstractAuthorizeTag.getPrivilegeEvaluator() always returns the first one:






private WebInvocationPrivilegeEvaluator getPrivilegeEvaluator() throws IOException {




        ApplicationContext ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(getServletContext());




        Map&amp;lt;String, WebInvocationPrivilegeEvaluator&amp;gt; wipes = ctx.getBeansOfType(WebInvocationPrivilegeEvaluator.class);









        if (wipes.size() == 0) {




            throw new IOException(




                    "No visible WebInvocationPrivilegeEvaluator instance could be found in the application "




                            + "context. There must be at least one in order to support the use of URL access checks in &amp;amp;apos;authorize&amp;amp;apos; tags.");




        }









        return (WebInvocationPrivilegeEvaluator) wipes.values().toArray()[0];   &amp;lt;---- PROBLEM (Line 340)




    }





</description>
			<version>3.1.2</version>
			<fixedVersion>3.1.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.web.WebAttributes.java</file>
			<file type="M">org.springframework.security.taglibs.authz.AbstractAuthorizeTag.java</file>
			<file type="M">org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilterTests.java</file>
			<file type="M">org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">2101</link>
			<link type="Duplicate" description="is duplicated by">3073</link>
			<link type="Duplicate" description="is duplicated by">2045</link>
		</links>
	</bug>
</bugrepository>