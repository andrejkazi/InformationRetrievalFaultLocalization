<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SEC">
	<bug id="5" master="2897" duplicate="2895" opendate="2015-03-04 14:57:47" fixdate="2015-03-20 13:43:23" resolution="Fixed">
		<buginformation>
			<summary>ActiveDirectoryLdapAuthenticationProvider should use bindPrincipal not username Active Directory based configuration no longer works in 3.2.6</summary>
			<description>Shouldn&amp;amp;apos;t the lines
return SpringSecurityLdapTemplate.searchForSingleEntryInternal(context, searchControls,
                   searchRoot, searchFilter, new Object[]
{username}
);
actually be
return SpringSecurityLdapTemplate.searchForSingleEntryInternal(context, searchControls,
                   searchRoot, searchFilter, new Object[]
{bindPrincipal}
);
?
This currently breaks our authentication. Hi. I upgraded to org.springframework.security:spring-security-ldap:3.2.6.RELEASE to authenticate users against my ldap server.
Config yml:






ldap:




  domain: myldapdomain.net




  url: ldaps://172.XX.X.XX:690






Spring boot groovy config:






@Configuration




@EnableWebMvcSecurity




public class WebSecurityConfig extends WebSecurityConfigurerAdapter {









   @Value(&amp;amp;apos;${ldap.domain}&amp;amp;apos;)




   private String DOMAIN




   @Value(&amp;amp;apos;${ldap.url}&amp;amp;apos;)




   private String URL




...









   @Override




   protected void configure(AuthenticationManagerBuilder authManagerBuilder) throws Exception {




      authManagerBuilder.authenticationProvider(activeDirectoryLdapAuthenticationProvider())




            .userDetailsService(userDetailsService())




   }









   @Bean




   public AuthenticationManager authenticationManager() {




      return new ProviderManager(Arrays.asList(activeDirectoryLdapAuthenticationProvider()))




   }









   @Bean




   public AuthenticationProvider activeDirectoryLdapAuthenticationProvider() {




      ActiveDirectoryLdapAuthenticationProvider provider =




            new ActiveDirectoryLdapAuthenticationProvider(DOMAIN, URL)




      provider.setConvertSubErrorCodesToExceptions(true)




      provider.setUseAuthenticationRequestCredentials(true)




      return provider




   }




}






With 2.3.5 I can type only my AD username, and this works.
With 2.3.6, using only my AD username I get this message in the logs, and fails:






javax.naming.PartialResultException: Unprocessed Continuation Reference(s); remaining name &amp;amp;apos;dc=myldapdomain,dc=net&amp;amp;apos;






If, however, I login as myuser@myldapdomain.net I can login correctly.
Is there a new configuration parameter I should set? Thanks!</description>
			<version>3.2.6</version>
			<fixedVersion>3.2.7, 4.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProviderTests.java</file>
			<file type="M">org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProvider.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">2895</link>
			<link type="Duplicate" description="is duplicated by">2900</link>
			<link type="Relate" description="is related to">1915</link>
			<link type="Duplicate" description="duplicates">2897</link>
		</links>
	</bug>
	<bug id="47" master="2897" duplicate="2900" opendate="2015-03-06 07:14:44" fixdate="2015-03-10 14:43:09" resolution="Fixed">
		<buginformation>
			<summary>ActiveDirectoryLdapAuthenticationProvider should use bindPrincipal not username Active-directory based login stopped working</summary>
			<description>Shouldn&amp;amp;apos;t the lines
return SpringSecurityLdapTemplate.searchForSingleEntryInternal(context, searchControls,
                   searchRoot, searchFilter, new Object[]
{username}
);
actually be
return SpringSecurityLdapTemplate.searchForSingleEntryInternal(context, searchControls,
                   searchRoot, searchFilter, new Object[]
{bindPrincipal}
);
?
This currently breaks our authentication. Active-directory based login in my project works fine with version 3.2.5.
With 3.2.6 it does not anymore, without any exception.
I am using a "FilteringAuthenticationProvider" to decide if the AD-controller is hit with an auth. request or not. I will include the code here.
&amp;lt;beans:bean id="filteringLdapProvider" class="com.example.FilteringAuthenticationProvider"&amp;gt;
	&amp;lt;beans:constructor-arg ref="adAuthenticationProvider" /&amp;gt;
&amp;lt;/beans:bean&amp;gt;
&amp;lt;authentication-manager alias="authenticationManager"&amp;gt;
	&amp;lt;authentication-provider ref="filteringLdapProvider" /&amp;gt;
	&amp;lt;authentication-provider user-service-ref="myUserDetailsService"&amp;gt;
		&amp;lt;password-encoder ref="passwordEncoder" /&amp;gt;
	&amp;lt;/authentication-provider&amp;gt;
&amp;lt;/authentication-manager&amp;gt;
&amp;lt;beans:bean id="adAuthenticationProvider" class="org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProvider"&amp;gt;
	&amp;lt;beans:constructor-arg value="the.domain" /&amp;gt;
	&amp;lt;beans:constructor-arg value="ldap://the.host/" /&amp;gt;
&amp;lt;/beans:bean&amp;gt;
import javax.inject.Inject;
import com.example.service.UserService;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.validator.GenericValidator;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.stereotype.Component;
@Component
public class FilteringAuthenticationProvider implements AuthenticationProvider {
	// http://stackoverflow.com/questions/21381893/use-different-authenticationprovider-depending-on-username-and-remote-ip-address/
	private static Logger			logger		= Logger.getLogger(FilteringAuthenticationProvider.class);
	private AuthenticationProvider	delegate	= null;
	@Inject
	private UserService				userService;
	public FilteringAuthenticationProvider() {
	}
	public FilteringAuthenticationProvider(final AuthenticationProvider delegate) 
{
		this.delegate = delegate;
	}


	@Override
	public Authentication authenticate(final Authentication authentication) throws AuthenticationException {
		final Object details = authentication.getDetails();
		final String username = authentication.getPrincipal().toString();
		String remoteAddress = null;
		if (details instanceof WebAuthenticationDetails) 
{
			remoteAddress = ((WebAuthenticationDetails) details).getRemoteAddress();
		}

		if (matches(remoteAddress, username)) {
			final boolean isWindowsLoginEnabled = userService.isWindowsLoginEnabled(username);
			if (isWindowsLoginEnabled) 
{
				logger.info("Delegating user &amp;amp;apos;" + username + "&amp;amp;apos; to ActiveDirectoryLdapAuthenticationProvider");
				return delegate.authenticate(authentication);
			}
 else 
{
				return null;
			}
		}
		return null;
	}
	private boolean matches(final String remoteAddress, final String username) {
		if (!GenericValidator.isEmail(username)) 
{
			return true;
		}

		return false;
	}
	@Override
	public boolean supports(final Class&amp;lt;?&amp;gt; authentication) 
{
		return authentication.equals(UsernamePasswordAuthenticationToken.class);
	}
}</description>
			<version>3.2.6</version>
			<fixedVersion>3.2.7, 4.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProviderTests.java</file>
			<file type="M">org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProvider.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">2895</link>
			<link type="Duplicate" description="is duplicated by">2900</link>
			<link type="Relate" description="is related to">1915</link>
			<link type="Duplicate" description="duplicates">2897</link>
		</links>
	</bug>
</bugrepository>