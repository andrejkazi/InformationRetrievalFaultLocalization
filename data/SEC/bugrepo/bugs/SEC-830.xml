<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 10:34:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-830/SEC-830.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-830] SavedRequestAwareWrapper and ParameterMethodNameResolver</title>
                <link>https://jira.spring.io/browse/SEC-830</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;This is a very simple use case, Its strange how this was ignored. I will try to create a sample war file and get it. in the mean while..&lt;/p&gt;

&lt;p&gt;Spring : 2.5.1 (code in 2.0)&lt;br/&gt;
Acegi : 1.0.4&lt;/p&gt;

&lt;p&gt;lest say we have Acegi security and a multi action controller method resolved on &quot;action&quot; parameter.&lt;/p&gt;

&lt;p&gt;lets say, we try to access&lt;br/&gt;
/mod/order.html?action=view&lt;br/&gt;
and acegi saves the request into SavedRequestAwareWrapper and forwards to /login.html&lt;br/&gt;
After login, it goes to OrderController.view() method and forwards to view.jsp&lt;/p&gt;

&lt;p&gt;similarly&lt;br/&gt;
/mod/order.html?action=viewDetail (This has more logic and data building)&lt;br/&gt;
to OrderController.viewDetail() to viewdetail.jsp&lt;/p&gt;

&lt;p&gt;This is fine so far&lt;/p&gt;

&lt;p&gt;but I have a condition in view.jsp (say for certain cust)&lt;br/&gt;
if (cust priv &amp;gt; ordinary) &lt;br/&gt;
 &amp;lt;jsp:include page=&quot;/mod/order.html?action=viewDetail&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;now, if i add this jsp include, and access this page with a customer satisfying the condition, a new request to&lt;br/&gt;
/mod/order.html?action=view&lt;br/&gt;
keeps looping after login and there is a stack over flow.&lt;/p&gt;

&lt;p&gt;Reason:&lt;br/&gt;
After Login, the request /mod/order.html?action=view goes to call the &lt;br/&gt;
OrderController.view(), once it dispatches to jsp, the jsp include is kicked off, and the method resolver tries to get the parameter action from the request. However, the SavedRequestAwareWrapper.getParameter returns it from the savedRequest which is &quot;/mod/order.html?action=view&quot; .. it keeps looping there. &lt;/p&gt;

&lt;p&gt;I am eager to find out how you would solve this.&lt;/p&gt;</description>
                <environment></environment>
        <key id="22108">SEC-830</key>
            <summary>SavedRequestAwareWrapper and ParameterMethodNameResolver</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="luke">Luke Taylor</assignee>
                                    <reporter username="sarath_it">Sarath</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 May 2008 08:58:38 +0000</created>
                <updated>Sat, 6 Feb 2016 06:37:08 +0000</updated>
                            <resolved>Sun, 25 May 2008 10:04:27 +0000</resolved>
                                    <version>1.0.4</version>
                                    <fixVersion>2.0.2</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="35721" author="luke" created="Thu, 15 May 2008 05:59:26 +0000"  >&lt;p&gt;Do you actually need to use SavedRequestAwareWrapper (or indeed SecurityContextHolderAwareRequestFilter)?&lt;/p&gt;</comment>
                            <comment id="35725" author="luke" created="Thu, 15 May 2008 07:10:03 +0000"  >&lt;p&gt;I think we can get round this issue by consulting the wrapped request first for the parameter. &lt;/p&gt;

&lt;p&gt;The problem occurs because, during a request dispatcher call, the parameters from the query string are merged with those of the original request. The query string ones should take precedence over the original request ones. SavedRequestWrapper calls the saved request if it exists. It should probably always allow parameters in the wrapped request to take precedence (as these may be modified by the container during a forward or include).&lt;/p&gt;</comment>
                            <comment id="35729" author="sarath_it" created="Thu, 15 May 2008 07:33:28 +0000"  >&lt;p&gt;Right, but only when the request is an include. The current logic of using the savedRequest for getParameters is right for other cases.&lt;/p&gt;

&lt;p&gt;        if (savedRequest == null) &lt;/p&gt;
{
            values = super.getParameterValues(name);
        } else {
            values = savedRequest.getParameterValues(name);
        }&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
could be something like&lt;br/&gt;
&lt;br/&gt;
        if (savedRequest == null || WebUtils.isRequestInclude(this)) {            values = super.getParameterValues(name);        }
&lt;p&gt; else &lt;/p&gt;
{
            values = savedRequest.getParameterValues(name);
        }

</comment>
                            <comment id="35756" author="luke" created="Thu, 15 May 2008 21:12:46 +0000"  >&lt;p&gt;I don&apos;t think it matters if the request is an include or not. The SavedRequest will only be used if it exactly matches the incoming request. Hence it should already contain the same query string as the original request. It is useful because it supplements the information that can be sent this way (e.g. with POST parameters). So checking the original request should not produce different values (unless they have been supplemented or modified by a RequestDispatcher call, which is then desirable).&lt;/p&gt;</comment>
                            <comment id="36050" author="luke" created="Sun, 25 May 2008 10:04:27 +0000"  >&lt;p&gt;I&apos;ve changed SavedRequestAwareWrapper so that the wrapped request parameters take precedence over the saved request ones for calls to getParameter. This appears to fix the problem reported here.&lt;/p&gt;</comment>
                            <comment id="126846" author="issuemaster" created="Sat, 6 Feb 2016 06:37:08 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/1091&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/1091&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10020">
                    <name>Related</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="22524">SEC-875</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 15 May 2008 05:59:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10508</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i026r3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12803</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12609</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>