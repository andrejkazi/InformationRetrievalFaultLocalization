<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 09:56:07 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-527/SEC-527.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-527] Serialization Error in ACL cacheing (new acls packages)</title>
                <link>https://jira.spring.io/browse/SEC-527</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;A java.io.NotSerializableException is thrown when the ehCache which backs EhCacheBasedAclCache decides that it needs to overflow to disk.&lt;/p&gt;

&lt;p&gt;As a workaround I have configured the ehCache to NOT overflow to disk by setting setOverflowToDisk(boolean) to false in the spring config of the EhCacheFactoryBean.  This hides the problem and stops my logs filling up with not serializable exceptions, but shouldn&apos;t be considered a fix.&lt;/p&gt;

&lt;p&gt;A snippet of the exception is shown below.&lt;/p&gt;

&lt;p&gt;2007-08-14 13:58:55,458 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;net.sf.ehcache.store.DiskStore&amp;#93;&lt;/span&gt; - &amp;lt;aclCacheCache: Failed to write element to disk &apos;org.acegisecurity.acls.objectidentity.ObjectIdentityImpl&lt;span class=&quot;error&quot;&gt;&amp;#91;Java Type: class com.my.code.MyAclProtectedObject; Identifier: 11102&amp;#93;&lt;/span&gt;&apos;. Initial cause was org.acegisecurity.acls.domain.AclAuthorizationStrategyImpl&amp;gt;&lt;br/&gt;
java.io.NotSerializableException: org.acegisecurity.acls.domain.AclAuthorizationStrategyImpl&lt;/p&gt;

&lt;p&gt;The exception occurs because AclImpl (the class of the object being cached) implements Serializable, but not all of it&apos;s member variables do, and the member variables which do not implement Serializable are not declared as transient.&lt;/p&gt;

&lt;p&gt;Member var                                                                      Serializable   &lt;br/&gt;
==================&lt;br/&gt;
Acl parentAcl                                                                    yes&lt;br/&gt;
AclAuthorizationStrategy aclAuthorizationStrategy           no&lt;br/&gt;
AuditLogger auditLogger                                                  no&lt;br/&gt;
List aces                                                                           yes  (but contents AccessControlEntry are not)&lt;br/&gt;
ObjectIdentity objectIdentity                                             yes&lt;br/&gt;
Serializable id                                                                    yes&lt;br/&gt;
Sid owner                                                                          no&lt;br/&gt;
Sid[] loadedSids                                                                no&lt;br/&gt;
boolean entriesInheriting                                                  yes&lt;/p&gt;

&lt;p&gt;My thoughts are that the classes of serveral of these member variables (e.g. SID and AccessControlEntry) should implement serializable, but other such as AuditLogger and AclAuthorizationStratagy probably should not, and as such either be removed from the AclImpl class, or declared as transient.  If declared as transient the EhCacheBasedAclCache would need to inject these properties back into AclImpls when they are retrieved from the cache, is this always possible i.e. can we always guarantee that there will be only one AclAuthorizationStrategy being used?&lt;/p&gt;

&lt;p&gt;I&apos;d be happy to help anyone resolve this problem, but will be unavailable from mid September to end October 2007.&lt;/p&gt;</description>
                <environment>Ubuntu Linux (kernel 2.6.20-16-generic)&lt;br/&gt;
java 6&lt;br/&gt;
ACL&amp;#39;s backed by MS SQL server</environment>
        <key id="17678">SEC-527</key>
            <summary>Serialization Error in ACL cacheing (new acls packages)</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="balex">Ben Alex</assignee>
                                    <reporter username="svanders">Simon van der Sluis</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Aug 2007 13:46:10 +0000</created>
                <updated>Sat, 6 Feb 2016 06:33:31 +0000</updated>
                            <resolved>Thu, 5 Jun 2008 23:02:59 +0000</resolved>
                                    <version>1.0.3</version>
                                    <fixVersion>2.0.0</fixVersion>
                                    <component>ACLs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="34379" author="balex" created="Fri, 4 Apr 2008 17:01:14 +0000"  >&lt;p&gt;SVN commit 2864.&lt;/p&gt;

&lt;p&gt;Made Sid, Permission and AccessControlEntry serializable. Marked AclImpl.aclAuthorizationStrategy and AclImpl.auditLogger as transient, adding support to EhCacheBasedAclCache for properly handling retrieval.&lt;/p&gt;

&lt;p&gt;In terms of testing, modified EhCacheBasedAclCacheTests to also illustrate straight disk serialization and deserialization of AclImpl. This was needed as I could not reproduce the EH-CACHE issue reported (using EH-CACHE 1.4.1). To facilitate testing, also added AclImpl.equals(Object) method together with improved AccessControlEntryImpl.equals(Object).&lt;/p&gt;</comment>
                            <comment id="34879" author="derkaiser" created="Fri, 18 Apr 2008 06:50:12 +0000"  >&lt;p&gt;the serialization problems still exist:&lt;/p&gt;

&lt;p&gt;I sometimes get a very strange exception:&lt;/p&gt;

&lt;p&gt;2008-04-18 21:44:47,426 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;net.sf.ehcache.store.DiskStore&amp;#93;&lt;/span&gt; - &amp;lt;aclCacheCache: Failed to write element to disk &apos;2&apos;. Initial cause was org.springframework.security.acls.jdbc.BasicLookupStrategy&amp;gt;&lt;br/&gt;
java.io.NotSerializableException: org.springframework.security.acls.jdbc.BasicLookupStrategy&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1338)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1146)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:416)&lt;br/&gt;
	at java.util.Vector.writeObject(Vector.java:1012)&lt;br/&gt;
	at sun.reflect.GeneratedMethodAccessor35.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.serializeEntry(DiskStore.java:756)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.writeElement(DiskStore.java:693)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.writeOrReplaceEntry(DiskStore.java:682)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.flushSpool(DiskStore.java:654)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.throwableSafeFlushSpoolIfRequired(DiskStore.java:630)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.spoolAndExpiryThreadMain(DiskStore.java:598)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.access$800(DiskStore.java:64)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore$SpoolAndExpiryThread.run(DiskStore.java:1074)&lt;br/&gt;
2008-04-18 21:44:47,657 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;net.sf.ehcache.store.DiskStore&amp;#93;&lt;/span&gt; - &amp;lt;aclCacheCache: Failed to write element to disk &apos;org.springframework.security.acls.objectidentity.ObjectIdentityImpl&lt;span class=&quot;error&quot;&gt;&amp;#91;Java Type: mediaSpace.domain.Directory; Identifier: 2&amp;#93;&lt;/span&gt;&apos;. Initial cause was org.springframework.security.acls.jdbc.BasicLookupStrategy&amp;gt;&lt;br/&gt;
java.io.NotSerializableException: org.springframework.security.acls.jdbc.BasicLookupStrategy&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1338)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1146)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:416)&lt;br/&gt;
	at java.util.Vector.writeObject(Vector.java:1012)&lt;br/&gt;
	at sun.reflect.GeneratedMethodAccessor35.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150)&lt;br/&gt;
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.serializeEntry(DiskStore.java:756)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.writeElement(DiskStore.java:693)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.writeOrReplaceEntry(DiskStore.java:682)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.flushSpool(DiskStore.java:654)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.throwableSafeFlushSpoolIfRequired(DiskStore.java:630)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.spoolAndExpiryThreadMain(DiskStore.java:598)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore.access$800(DiskStore.java:64)&lt;br/&gt;
	at net.sf.ehcache.store.DiskStore$SpoolAndExpiryThread.run(DiskStore.java:1074)&lt;/p&gt;

&lt;p&gt;i&apos;m using spring-sec 2.0 and EH-CACHE 1.4.1&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;aclCache&quot; class=&quot;org.springframework.security.acls.jdbc.EhCacheBasedAclCache&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;constructor-arg&amp;gt;&lt;br/&gt;
			&amp;lt;bean class=&quot;org.springframework.cache.ehcache.EhCacheFactoryBean&quot;&amp;gt;&lt;br/&gt;
				&amp;lt;property name=&quot;cacheManager&quot;&amp;gt;&lt;br/&gt;
					&amp;lt;bean class=&quot;org.springframework.cache.ehcache.EhCacheManagerFactoryBean&quot; /&amp;gt;&lt;br/&gt;
				&amp;lt;/property&amp;gt;&lt;br/&gt;
				&amp;lt;property name=&quot;cacheName&quot;&amp;gt;&lt;br/&gt;
					&amp;lt;value&amp;gt;aclCache&amp;lt;/value&amp;gt;&lt;br/&gt;
				&amp;lt;/property&amp;gt;&lt;br/&gt;
				&amp;lt;property name=&quot;maxElementsInMemory&quot;&amp;gt;&lt;br/&gt;
					&amp;lt;value&amp;gt;5&amp;lt;/value&amp;gt;&lt;br/&gt;
				&amp;lt;/property&amp;gt;&lt;br/&gt;
				&amp;lt;property name=&quot;overflowToDisk&quot;&amp;gt;&lt;br/&gt;
					&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;&lt;br/&gt;
				&amp;lt;/property&amp;gt;							&lt;br/&gt;
			&amp;lt;/bean&amp;gt;&lt;br/&gt;
		&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;</comment>
                            <comment id="34906" author="balex" created="Fri, 18 Apr 2008 16:15:04 +0000"  >&lt;p&gt;Reopened for investigation.&lt;/p&gt;</comment>
                            <comment id="34908" author="derkaiser" created="Fri, 18 Apr 2008 19:46:01 +0000"  >&lt;p&gt;i tried to reproduce the error with the contacts sample but everything worked fine. so i found out that this exception has to do with the parent-child-structure of my domain objects. (directories with subdirectories that can also have subdirectries).&lt;br/&gt;
but i don&apos;t understand why the exception-message tells me that org.springframework.security.acls.jdbc.BasicLookupStrategy is not serializable.&lt;br/&gt;
very strange.&lt;/p&gt;

</comment>
                            <comment id="35263" author="balex" created="Thu, 1 May 2008 08:12:06 +0000"  >&lt;p&gt;Emanuel, thanks for the clarification. As I indicated in my previous comments, and I could not even reproduce the original report with straight serialization to disk. As such, do you mind if I close this issue again?&lt;/p&gt;</comment>
                            <comment id="36048" author="derkaiser" created="Sat, 24 May 2008 21:33:19 +0000"  >&lt;p&gt;i think this is not a acegi bug but a ehcache problem:&lt;/p&gt;

&lt;p&gt;&apos;org.springframework.security.acls.jdbc.BasicLookupStrategy&apos;&lt;br/&gt;
is not part of the objectgraph that is put in cache. i&apos;ve opened the&lt;br/&gt;
aclCache.data file in a textfile editor: this file obviously contians some other&lt;br/&gt;
objects that are not part of the cached object graph. &lt;/p&gt;

&lt;p&gt;so ehcache seems to serialize any objects to disk not only those elements that&lt;br/&gt;
are put in cache.&lt;/p&gt;</comment>
                            <comment id="36258" author="luke" created="Thu, 29 May 2008 03:15:37 +0000"  >&lt;p&gt;Are you happy for this to be closed Emanuel? Or do you think there is still a potential issue here?&lt;/p&gt;</comment>
                            <comment id="36377" author="luke" created="Mon, 2 Jun 2008 23:45:11 +0000"  >&lt;p&gt;No response so changing version from 2.0.2 to 2.1&lt;/p&gt;</comment>
                            <comment id="36496" author="balex" created="Thu, 5 Jun 2008 09:46:27 +0000"  >&lt;p&gt;Closed as I could never reproduce the bug report in the first place, and the reporter indicated the problem was not with the ACL package.&lt;/p&gt;</comment>
                            <comment id="36520" author="luke" created="Thu, 5 Jun 2008 23:02:28 +0000"  >&lt;p&gt;Reset fix version to 2.0.0&lt;/p&gt;</comment>
                            <comment id="38184" author="derkaiser" created="Wed, 6 Aug 2008 04:38:11 +0000"  >&lt;p&gt;After all it is a ACEGI Bug:&lt;/p&gt;

&lt;p&gt;I found 2 bugs that cohere with a parent-child-structure of the acls.&lt;/p&gt;

&lt;p&gt;1.&lt;br/&gt;
the serialization problems occur because the object graph that is passed to the cache contains Objects the are not serializable:&lt;br/&gt;
the error log contians the &quot; &apos;org.springframework.security.acls.jdbc.BasicLookupStrategy&apos;  not serializable&quot;- exception. so i wondered how this class can be part of the object graph. The answer is: The AclImpl still contains references to the private class StubAclParent that is an inner class of org.springframework.security.acls.jdbc.BasicLookupStrategy. That is the link between the serialization problems and the &quot; &apos;org.springframework.security.acls.jdbc.BasicLookupStrategy&apos;  not serializable&quot;- exception.&lt;/p&gt;

&lt;p&gt;How can that happen?&lt;/p&gt;

&lt;p&gt;It is the job of the convert method to replace the stubaclparents by real acls. But this method does not work properly: &lt;/p&gt;

&lt;p&gt;The acl-field of the aces still points to an unreal AclImpl. &lt;/p&gt;

&lt;p&gt;to fix this the convert method could be changed like this&lt;/p&gt;

&lt;p&gt;    private AclImpl convert(Map inputMap, Long currentIdentity) throws IllegalArgumentException, IllegalAccessException {&lt;br/&gt;
        Assert.notEmpty(inputMap, &quot;InputMap required&quot;);&lt;br/&gt;
        Assert.notNull(currentIdentity, &quot;CurrentIdentity required&quot;);&lt;/p&gt;

&lt;p&gt;        // Retrieve this Acl from the InputMap&lt;br/&gt;
        Acl uncastAcl = (Acl) inputMap.get(currentIdentity);&lt;br/&gt;
        Assert.isInstanceOf(AclImpl.class, uncastAcl, &quot;The inputMap contained a non-AclImpl&quot;);&lt;/p&gt;

&lt;p&gt;        AclImpl inputAcl = (AclImpl) uncastAcl;&lt;/p&gt;

&lt;p&gt;        Acl parent = inputAcl.getParentAcl();&lt;/p&gt;

&lt;p&gt;        if ((parent != null) &amp;amp;&amp;amp; parent instanceof StubAclParent) &lt;/p&gt;
{
            // Lookup the parent
            StubAclParent stubAclParent = (StubAclParent) parent;
            parent = convert(inputMap, stubAclParent.getId());
        }

&lt;p&gt;        // Now we have the parent (if there is one), create the true AclImpl&lt;br/&gt;
        AclImpl result = new AclImpl(inputAcl.getObjectIdentity(), (Long) inputAcl.getId(), aclAuthorizationStrategy,&lt;br/&gt;
                auditLogger, parent, null, inputAcl.isEntriesInheriting(), inputAcl.getOwner());&lt;/p&gt;

&lt;p&gt;        // Copy the &quot;aces&quot; from the input to the destination&lt;br/&gt;
        Field fieldAces = FieldUtils.getField(AclImpl.class, &quot;aces&quot;);&lt;/p&gt;

&lt;p&gt;        //try {&lt;br/&gt;
        	fieldAces.setAccessible(true);&lt;br/&gt;
            List aces = (List) fieldAces.get(inputAcl);&lt;br/&gt;
            List acesN = new Vector();&lt;br/&gt;
            Iterator i = aces.iterator();&lt;/p&gt;

&lt;p&gt;//      replace the old aclImpl (that contains StubAclParents) by the new one.&lt;br/&gt;
            while(i.hasNext()) &lt;/p&gt;
{
            	AccessControlEntryImpl ace = (AccessControlEntryImpl) i.next();
            	Field fieldAcl = FieldUtils.getField(AccessControlEntryImpl.class, &quot;acl&quot;);
            	fieldAcl.setAccessible(true);
            	fieldAcl.set(ace, result);
            	acesNew.add(ace);
            }
&lt;p&gt;            fieldAces.set(result, acesNew);&lt;br/&gt;
        //} catch (IllegalAccessException ex) &lt;/p&gt;
{
            //throw new IllegalStateException(&quot;Could not obtain or set AclImpl.ace field&quot;);
        //}

&lt;p&gt;        return result;&lt;br/&gt;
    }&lt;/p&gt;




&lt;p&gt;2.&lt;/p&gt;

&lt;p&gt;EhCacheBasedAclCache does not initialize the transient field of the parent acls which causes nullpointerexceptions.&lt;/p&gt;


&lt;p&gt;As ben alex  indicated in his previous comments, he could not even reproduce the original report with straight serialization to disk. so i would recommend that you change your java options that notserializable-exceptions are thrown when you try to serialize notserializable classes. this is the normal case in java. Otherwise you are not able to reproduce the errors.&lt;/p&gt;

&lt;p&gt;thank you&lt;/p&gt;</comment>
                            <comment id="126513" author="issuemaster" created="Sat, 6 Feb 2016 06:33:31 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/788&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/788&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10011">
                    <name>Depends</name>
                                                                <inwardlinks description="is depended on by">
                                        <issuelink>
            <issuekey id="17737">SEC-532</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10020">
                    <name>Related</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="23558">SEC-951</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Apr 2008 17:01:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20321</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i03zy7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23366</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19853</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>