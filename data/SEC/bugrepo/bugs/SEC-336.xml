<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 10:56:18 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-336/SEC-336.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-336] Add setters for LogoutFilter</title>
                <link>https://jira.spring.io/browse/SEC-336</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;LogoutFilter is the only filter that requires constructor arguments.  All the other filters are Spring-friendly and have setters.  Looked at the source and can&apos;t find any particular reason why LogoutFilter can&apos;t take setters too.  I can submit a patch.&lt;/p&gt;</description>
                <environment></environment>
        <key id="14751">SEC-336</key>
            <summary>Add setters for LogoutFilter</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="luke">Luke Taylor</assignee>
                                    <reporter username="willisblackburn">Willis Blackburn</reporter>
                        <labels>
                    </labels>
                <created>Sun, 13 Aug 2006 06:36:55 +0000</created>
                <updated>Sat, 6 Feb 2016 06:31:40 +0000</updated>
                            <resolved>Thu, 28 Sep 2006 18:40:46 +0000</resolved>
                                    <version>1.0.1</version>
                                    <fixVersion>1.0.2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="19128" author="luke" created="Sat, 19 Aug 2006 06:32:42 +0000"  >&lt;p&gt;The move to constructor arguments for required configuration properties is a deliberate policy. These aren&apos;t Spring-unfriendly as Spring supports constructor injection.&lt;/p&gt;</comment>
                            <comment id="20000" author="willisblackburn" created="Sat, 30 Sep 2006 03:44:57 +0000"  >&lt;p&gt;Luke, that does not seem like a very compelling argument.  Spring itself does not have this restriction;  there are dozens of Spring-provided beans that have required properties yet still allow (and even encourage) users to set them via setters.  Furthermore constructor injection in Spring is cumbersome:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;You have to know the order of the constructor arguments.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The names of the constructor arguments don&apos;t appear in the configuration file.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The possibility of misconfiguring the bean increases.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;From the Spring documentation:  &quot;The Spring team generally advocates the usage of setter injection, since a large number of constructor arguments can get unwieldy, especially when some properties are optional. The presence of setter methods also makes objects of that class amenable to being re-configured (or re-injected) at some later time (for management via JMX MBeans is a particularly compelling use case).&quot;&lt;/p&gt;</comment>
                            <comment id="126301" author="issuemaster" created="Sat, 6 Feb 2016 06:31:40 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/597&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/597&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="14873">SEC-344</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 19 Aug 2006 06:32:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20501</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01zn3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11651</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11596</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>