<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 09:52:18 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-632/SEC-632.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-632] unable to use non security related Filters defined in applicationContext.xml</title>
                <link>https://jira.spring.io/browse/SEC-632</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;I use a org.springframework.web.filter.DelegatingFilterProxy to configure my application filters in my application context.&lt;/p&gt;

&lt;p&gt;as soon as I add some &lt;a href=&quot;http://www.springframework.org/schema/security&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/schema/security&lt;/a&gt; namespace driven security, the following exception occurs :&lt;/p&gt;

&lt;p&gt;org.springframework.security.config.SecurityConfigurationException: Filter requestFilter must implement the Ordered interface&lt;br/&gt;
	at org.springframework.security.config.HttpSecurityConfigPostProcessor.orderFilters(HttpSecurityConfigPostProcessor.java:186)&lt;br/&gt;
	at org.springframework.security.config.HttpSecurityConfigPostProcessor.configureFilterChain(HttpSecurityConfigPostProcessor.java:146)&lt;br/&gt;
	at org.springframework.security.config.HttpSecurityConfigPostProcessor.postProcessBeanFactory(HttpSecurityConfigPostProcessor.java:47)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:541)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:524)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348)&lt;br/&gt;
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:251)&lt;br/&gt;
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:190)&lt;/p&gt;


&lt;p&gt;I tracked this down to HttpSecurityConfigPostProcessor.orderFilters using beanFactory.getBeansOfType(Filter.class)&lt;/p&gt;

&lt;p&gt;Is there a way that HttpSecurityConfigPostProcessor can be configured to deal with only the filters in the spring-security package ?&lt;/p&gt;</description>
                <environment></environment>
        <key id="19201">SEC-632</key>
            <summary>unable to use non security related Filters defined in applicationContext.xml</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="luke">Luke Taylor</assignee>
                                    <reporter username="cameronbraid">Cameron Braid</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Jan 2008 23:14:46 +0000</created>
                <updated>Sat, 6 Feb 2016 06:34:39 +0000</updated>
                            <resolved>Sat, 19 Jan 2008 00:20:02 +0000</resolved>
                                    <version>2.0.0 M1</version>
                                    <fixVersion>2.0.0 M2</fixVersion>
                                    <component>CAS</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="29157" author="cameronbraid" created="Thu, 17 Jan 2008 23:27:59 +0000"  >&lt;p&gt;Here&apos;s a patch that checks the package of the filter, and only allows those in org.springframework.security.**&lt;/p&gt;

&lt;p&gt;Index: spring-security/core/src/main/java/org/springframework/security/config/HttpSecurityConfigPostProcessor.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; spring-security/core/src/main/java/org/springframework/security/config/HttpSecurityConfigPostProcessor.java (revision 2467)&lt;br/&gt;
+++ spring-security/core/src/main/java/org/springframework/security/config/HttpSecurityConfigPostProcessor.java (working copy)&lt;br/&gt;
@@ -177,6 +177,10 @@&lt;br/&gt;
             String id = (String) ids.next();&lt;br/&gt;
             Filter filter = (Filter) filters.get(id);&lt;/p&gt;

&lt;p&gt;+ if (!filter.getClass().getName().startsWith(&quot;org.springframework.security&quot;)) &lt;/p&gt;
{
+ continue;
+ }
&lt;p&gt;+&lt;br/&gt;
             if (filter instanceof FilterChainProxy) &lt;/p&gt;
{
                 continue;
             }
&lt;p&gt; &lt;/p&gt;</comment>
                            <comment id="29174" author="luke" created="Fri, 18 Jan 2008 08:08:45 +0000"  >&lt;p&gt;This won&apos;t be quite enough, as it is often the case that people want to add their own filters to the security chain and the namespace configuration should support that.&lt;/p&gt;

&lt;p&gt;We can either ignore filters that don&apos;t implement Ordered (there&apos;s a comment in the file already to that effect), or (probably better), provide a bean decorator which allows users to explicitly state that their filter should be part of the security chain, e.g.&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;myFilter&quot; class=&quot;MyFilterClass&amp;gt;&lt;br/&gt;
    &amp;lt;security:filter order=&quot;501&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;for example.&lt;/p&gt;

&lt;p&gt;We can set this up to wrap the the supplied filter. Checking the package as you suggest or using the type (e.g. using getBeansOfType(SpringSecurityFilter) will then probably do the job.&lt;/p&gt;</comment>
                            <comment id="29175" author="luke" created="Fri, 18 Jan 2008 08:27:48 +0000"  >&lt;p&gt;I&apos;ve changed the code to ignore non-Ordered filters for the time being. That will prevent it breaking and should be available via the nightly builds.&lt;/p&gt;</comment>
                            <comment id="29178" author="cameronbraid" created="Fri, 18 Jan 2008 12:41:23 +0000"  >&lt;p&gt;great, thanks.&lt;/p&gt;</comment>
                            <comment id="29182" author="luke" created="Sat, 19 Jan 2008 00:20:02 +0000"  >&lt;p&gt;I&apos;ve added a user-filter element to the namespace which can be used to decorate any filter beans. Any other beans will be ignored by the namespace configuration. This means users have to have some internal knowledge of the filters that will be used and their default order numbers (see the FilterChainOrder class which stores the constants) but I think this is acceptable for the time being. They can either specify the &quot;order&quot; attribute witin the element or implement Ordered directly in their filter class. &lt;/p&gt;</comment>
                            <comment id="31287" author="luke" created="Sat, 26 Jan 2008 09:57:57 +0000"  >&lt;p&gt;I&apos;ve changed this slightly so that the &amp;lt;user-filter&amp;gt; element now takes an &quot;after&quot; or &quot;before&quot; attribute, which can take the standard names of filters. This is less fragile than having to work out the order value of the standard filters ( which may also change). You can still implement Ordered directly and return a value relative to one of the constants in the org.springframework.security.ui.FilterChainOrder class.&lt;/p&gt;</comment>
                            <comment id="31291" author="luke" created="Sat, 26 Jan 2008 10:49:53 +0000"  >&lt;p&gt;I&apos;ve also renamed &quot;user-filter&quot; to &quot;custom-filter&quot; to avoid confusion with the &quot;user-details-service&quot; kind of user and for consistency with custom-authentication-provider.&lt;/p&gt;</comment>
                            <comment id="126629" author="issuemaster" created="Sat, 6 Feb 2016 06:34:39 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/892&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/892&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 18 Jan 2008 08:08:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10713</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i05b0n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30991</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28186</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>