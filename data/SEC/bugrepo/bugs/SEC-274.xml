<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 09:50:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-274/SEC-274.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-274] Generic Superclass Overridden Annotation Attribute not found</title>
                <link>https://jira.spring.io/browse/SEC-274</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;AdvisorChainFactoryUtils does not return a SecurityConfig for a method security via annotation attribute source for a bridge method using generics when the annotation is on the subclass.&lt;br/&gt;
Here is an example, complete with source and JUnit test.&lt;/p&gt;

&lt;p&gt;Department extends Entity&lt;br/&gt;
BusinessServiceImpl implements BusinessService and takes a generic type that extends Entity&lt;br/&gt;
there is a method: public E someUserMethod3(final E entity) with no annotation&lt;br/&gt;
DepartmentService extends BusinessService with the method: Department someUserMethod3(final Department dept) with an annotation @Secured(&lt;/p&gt;
{&quot;ROLE_USER&quot;})&lt;br/&gt;
DepartmentServiceImpl extends BusinessServerImpl with the generic type Department and implements DepartmentService, it also has a method: public Department someUserMethod3(final Department dept) with a different annotation of @Secured({&quot;ROLE_ADMIN&quot;})&lt;br/&gt;
&lt;br/&gt;
AdvisorChainFactoryUtils finds the bridge method that Java 1.5 creates to adhere to the interface BusinessService this method is: public Entity someUserMethod3(final Entity entity)&lt;br/&gt;
the utility does not find the annotation (because it&apos;s not on this class) but this means that any class that uses this class via an interface will not have security applied to it.  I have all of these classes and the JUnit test to add to SecurityAnnotationAttributesTests.  I will try to post them here, but if you need the files you can e-mail me&lt;br/&gt;
&lt;br/&gt;
/********************************************************************/&lt;br/&gt;
New classes start here:&lt;br/&gt;
&lt;br/&gt;
/********************************************************************/&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
package org.acegisecurity.annotation;&lt;br/&gt;
&lt;br/&gt;
import org.acegisecurity.Entity;&lt;br/&gt;
&lt;br/&gt;
/**&lt;br/&gt;
 * Notes:&amp;lt;br/&amp;gt;&lt;br/&gt;
 *&lt;br/&gt;
 * @author joes.checkernet.com&lt;br/&gt;
 * @version 0.0.1&lt;br/&gt;
 */&lt;br/&gt;
public class BusinessServiceImpl&amp;lt;E extends Entity&amp;gt; implements BusinessService {&lt;br/&gt;
&lt;br/&gt;
    @Secured({&quot;ROLE_USER&quot;}
&lt;p&gt;)&lt;br/&gt;
    public void someUserMethod1() {&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    @Secured(&lt;/p&gt;
{&quot;ROLE_USER&quot;})&lt;br/&gt;
    public void someUserMethod2() {&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    @Secured({&quot;ROLE_USER&quot;, &quot;ROLE_ADMIN&quot;})&lt;br/&gt;
    public void someUserAndAdminMethod() {&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    @Secured({&quot;ROLE_ADMIN&quot;})&lt;br/&gt;
    public void someAdminMethod() {&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    public E someUserMethod3(final E entity) {
        return entity;
    }&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
package org.acegisecurity.annotation;&lt;br/&gt;
&lt;br/&gt;
import org.acegisecurity.Entity;&lt;br/&gt;
&lt;br/&gt;
/**&lt;br/&gt;
 * Notes:&amp;lt;br/&amp;gt;&lt;br/&gt;
 *&lt;br/&gt;
 * @author joes.checkernet.com&lt;br/&gt;
 * @version 0.0.1&lt;br/&gt;
 */&lt;br/&gt;
public class Department extends Entity {&lt;br/&gt;
    //~ Instance fields ========================================================&lt;br/&gt;
&lt;br/&gt;
    private boolean active = true;&lt;br/&gt;
&lt;br/&gt;
    //~ Constructors ===========================================================&lt;br/&gt;
&lt;br/&gt;
    public Department(String name) {
        super(name);
    }&lt;br/&gt;
&lt;br/&gt;
    //~ Methods ================================================================&lt;br/&gt;
&lt;br/&gt;
    public boolean isActive() {
        return this.active;
    }&lt;br/&gt;
&lt;br/&gt;
    void deactive() {
        this.active = true;
    }&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
package org.acegisecurity.annotation;&lt;br/&gt;
&lt;br/&gt;
/**&lt;br/&gt;
 * Notes:&amp;lt;br/&amp;gt;&lt;br/&gt;
 *&lt;br/&gt;
 * @author joes.checkernet.com&lt;br/&gt;
 * @version 0.0.1&lt;br/&gt;
 */&lt;br/&gt;
public interface DepartmentService extends BusinessService {&lt;br/&gt;
&lt;br/&gt;
    @Secured({&quot;ROLE_USER&quot;}
&lt;p&gt;)&lt;br/&gt;
    Department someUserMethod3(Department dept);&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;package org.acegisecurity.annotation;&lt;/p&gt;

&lt;p&gt;import org.acegisecurity.Entity;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Notes:&amp;lt;br/&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;@author joes.checkernet.com&lt;/li&gt;
	&lt;li&gt;@version 0.0.1&lt;br/&gt;
 */&lt;br/&gt;
public class DepartmentServiceImpl extends BusinessServiceImpl &amp;lt;Department&amp;gt; implements DepartmentService {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    @Secured(&lt;/p&gt;
{&quot;ROLE_ADMIN&quot;}
&lt;p&gt;)&lt;br/&gt;
    public Department someUserMethod3(final Department dept) &lt;/p&gt;
{
        return super.someUserMethod3(dept);
    }
&lt;p&gt;}&lt;/p&gt;




&lt;p&gt;/********************************************************************/&lt;br/&gt;
Changes start here&lt;br/&gt;
/********************************************************************/&lt;br/&gt;
Changes to SecurityAnnotationAttributesTests for the JUnit test.  The first part checks that we can find the security annotation on the implementation class, the second part fails because it doesn&apos;t find it for the bridge method signature.&lt;/p&gt;

&lt;p&gt;    private Log logger = LogFactory.getLog(SecurityAnnotationAttributesTests.class);&lt;/p&gt;

&lt;p&gt;    public void testGenericsSuperclassDeclarationsAreIncludedWhenSubclassesOverride() {&lt;/p&gt;

&lt;p&gt;        Method method = null;&lt;br/&gt;
        try {&lt;br/&gt;
            method = DepartmentServiceImpl.class.getMethod(&quot;someUserMethod3&quot;, new Class[]&lt;/p&gt;
{Department.class}
&lt;p&gt;);&lt;br/&gt;
        } catch (NoSuchMethodException unexpected) &lt;/p&gt;
{
            fail(&quot;Should be a superMethod called &apos;someUserMethod3&apos; on class!&quot;);
        }&lt;br/&gt;
        Collection attrs = this.attributes.getAttributes(method);&lt;br/&gt;
&lt;br/&gt;
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;attrs: &quot;);
            logger.debug(attrs);
        }&lt;br/&gt;
        assertNotNull(attrs);&lt;br/&gt;
&lt;br/&gt;
        // expect 1 attribute&lt;br/&gt;
        assertTrue(&quot;Did not find 1 attribute&quot;, attrs.size() == 1);&lt;br/&gt;
&lt;br/&gt;
        // should have 1 SecurityConfig&lt;br/&gt;
        for (Object obj : attrs) {
            assertTrue(obj instanceof SecurityConfig);
            SecurityConfig sc = (SecurityConfig) obj;
            assertEquals(&quot;Found an incorrect role&quot;, &quot;ROLE_ADMIN&quot;, sc.getAttribute());
        }&lt;br/&gt;
&lt;br/&gt;
        Method superMethod = null;&lt;br/&gt;
        try {&lt;br/&gt;
            superMethod = DepartmentServiceImpl.class.getMethod(&quot;someUserMethod3&quot;, new Class[]{Entity.class});&lt;br/&gt;
        } catch (NoSuchMethodException unexpected) {            fail(&quot;Should be a superMethod called &apos;someUserMethod3&apos; on class!&quot;);        }
&lt;p&gt;        Collection superAttrs = this.attributes.getAttributes(superMethod);&lt;/p&gt;

&lt;p&gt;        if (logger.isDebugEnabled()) &lt;/p&gt;
{
            logger.debug(&quot;superAttrs: &quot;);
            logger.debug(superAttrs);
        }
&lt;p&gt;        assertNotNull(superAttrs);&lt;/p&gt;

&lt;p&gt;        // expect 1 attribute&lt;br/&gt;
        assertTrue(&quot;Did not find 1 attribute&quot;, superAttrs.size() == 1);&lt;/p&gt;

&lt;p&gt;        // should have 1 SecurityConfig&lt;br/&gt;
        for (Object obj : superAttrs) &lt;/p&gt;
{
            assertTrue(obj instanceof SecurityConfig);
            SecurityConfig sc = (SecurityConfig) obj;
            assertEquals(&quot;Found an incorrect role&quot;, &quot;ROLE_ADMIN&quot;, sc.getAttribute());
        }
&lt;p&gt;    }&lt;/p&gt;</description>
                <environment>Win XP and Mac OS X Java 1.5.06 Spring 2 m4 acegi 1.0.0 RC2 and nightly 2006-05-23-1483</environment>
        <key id="14043">SEC-274</key>
            <summary>Generic Superclass Overridden Annotation Attribute not found</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="balex">Ben Alex</assignee>
                                    <reporter username="joes.checkernet.com">Joe Scalise</reporter>
                        <labels>
                    </labels>
                <created>Wed, 24 May 2006 07:20:52 +0000</created>
                <updated>Sat, 6 Feb 2016 06:26:35 +0000</updated>
                            <resolved>Thu, 16 Nov 2006 12:16:59 +0000</resolved>
                                    <version>1.0.0 RC2</version>
                    <version>1.0.0</version>
                    <version>1.0.1</version>
                    <version>1.0.2</version>
                                    <fixVersion>1.0.3</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="17720" author="joes.checkernet.com" created="Wed, 24 May 2006 07:23:58 +0000"  >&lt;p&gt;Here are the first three files&lt;/p&gt;</comment>
                            <comment id="17721" author="joes.checkernet.com" created="Wed, 24 May 2006 07:24:36 +0000"  >&lt;p&gt;And here are the last two new/affected files&lt;/p&gt;</comment>
                            <comment id="17722" author="joes.checkernet.com" created="Wed, 24 May 2006 07:41:20 +0000"  >&lt;p&gt;It seems to me that in AdvisorChainFactoryUtils.calculateInterceptorsAndDynamicInterceptionAdvice&lt;/p&gt;

&lt;p&gt;The bridge methods should look up the real instance method in order to preserve the annotations that are defined.  &lt;/p&gt;

&lt;p&gt;The following code could help you find the bridge method for the given method in my example:&lt;br/&gt;
targetClass.getMethod(method.getName(), new Class[] &lt;/p&gt;
{Entity.class}

&lt;p&gt;The type of the param could be found by method.getParameterTypes()&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.getGenericSuperclass()&lt;/p&gt;</comment>
                            <comment id="20748" author="balex" created="Sun, 12 Nov 2006 07:18:28 +0000"  >&lt;p&gt;Sent email to Juergen re AdvisorChainFactoryUtils.&lt;/p&gt;</comment>
                            <comment id="20799" author="balex" created="Mon, 13 Nov 2006 14:28:01 +0000"  >&lt;p&gt;Added reporter&apos;s types into SVN trunk and reproduced error. &lt;/p&gt;

&lt;p&gt;In ongoing discussions with Juergen and Rob about the best way to approach given SecurityAnnotationAttributes is in Acegi Security 1.0.x and the simplest solution is to use AnnotationUtils, although this only appears in Spring 2.0 and is therefore unavailable to the Acegi Security 1.0.x series releases.&lt;/p&gt;</comment>
                            <comment id="20873" author="balex" created="Wed, 15 Nov 2006 08:14:24 +0000"  >&lt;p&gt;Would ideally use Spring&apos;s AnnotationUtils, as it provides more intuitive handling of bridge methods. Thus, the options are:&lt;/p&gt;

&lt;p&gt;1. Copy AnnotationUtils, BridgeUtils and ReflectionUtils into org.acegisecurity.util and refer to them.&lt;/p&gt;

&lt;p&gt;2. Ask for the aforementioned to be backported to Spring 1.2.x.&lt;/p&gt;

&lt;p&gt;3. Set the fix version to Acegi Security 1.1.0 and document that bridge method issues exist in Acegi Security 1.0.x and will not be resolved.&lt;/p&gt;

&lt;p&gt;I&apos;m in discussions with Juergen and Rob whether backporting (option 2) is possible, as this is most preferred.&lt;/p&gt;</comment>
                            <comment id="20913" author="balex" created="Thu, 16 Nov 2006 12:16:59 +0000"  >&lt;p&gt;Checked into SVN, fixed, but must be used with Spring 2.0 or above to ensure the bridge method bugs are avoided.&lt;/p&gt;

&lt;p&gt;Added JavaDoc comment to SecurityAnnotationAttributes:&lt;/p&gt;

&lt;p&gt;&quot;This class should be used with Spring 2.0 or above, as it relies upon utility classes in Spring 2.0 for correct introspection of annotations on bridge methods.&quot;&lt;/p&gt;

&lt;p&gt;The actual code will reflectively determine if AnnotationUtils is available, invoking that method. This class is only part of Spring 2.0, although it may be backported to Spring 1.2.9. In any event, the SecurityAnnotationAttributes will gracefully fallback to manual introspection of method information (which means bridge methods are not correctly handled) if AnnotationUtils is unavailable.&lt;/p&gt;

&lt;p&gt;Bottom line: Use Spring 2.0 or above (not Spring 1.2.x) if you want bridge methods to work correct with Acegi Security 1.0.3 or above.&lt;/p&gt;</comment>
                            <comment id="125770" author="issuemaster" created="Sat, 6 Feb 2016 06:26:35 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/535&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/535&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11647" name="BusinessServiceImpl.java" size="633" author="joes.checkernet.com" created="Wed, 24 May 2006 07:23:58 +0000"/>
                            <attachment id="11648" name="Department.java" size="682" author="joes.checkernet.com" created="Wed, 24 May 2006 07:23:58 +0000"/>
                            <attachment id="11649" name="DepartmentService.java" size="256" author="joes.checkernet.com" created="Wed, 24 May 2006 07:23:58 +0000"/>
                            <attachment id="11650" name="DepartmentServiceImpl.java" size="405" author="joes.checkernet.com" created="Wed, 24 May 2006 07:24:36 +0000"/>
                            <attachment id="11651" name="SecurityAnnotationAttributesTests.java" size="6646" author="joes.checkernet.com" created="Wed, 24 May 2006 07:24:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 12 Nov 2006 07:18:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20559</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01waf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11108</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11087</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>