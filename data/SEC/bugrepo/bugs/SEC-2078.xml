<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 10:47:15 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-2078/SEC-2078.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-2078] Pre-authentication fails when using check for principal change and using non String principals</title>
                <link>https://jira.spring.io/browse/SEC-2078</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;The problem occurs when using pre-authentication with &quot;check for principal change&quot; set and the class there extends org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter using non String principals but e.g. java.security.Principal.&lt;br/&gt;
The problem is that the authentication manager will always authenticate even the principal has no changed, this can give problems with the authentication provider, and performance in the code.&lt;/p&gt;

&lt;p&gt;The error is in line 145 in the AbstractPreAuthenticatedProcessingFilter class, the code:&lt;/p&gt;

&lt;p&gt;  if (currentUser.getName().equals(principal)) &lt;/p&gt;
{
    return false;
  }

&lt;p&gt;should be changed to something like:&lt;/p&gt;

&lt;p&gt;  if (principal instanceof Principal) &lt;/p&gt;
{
    return !currentUser.getName().equals(((Principal)principal).getName());
  }
&lt;p&gt;  else &lt;/p&gt;
{
    return !currentUser.getName().equals(principal.toString());
  }

&lt;p&gt;The original code will only function when the passed principal parameter is of the type String. The code suggested will function for all type of objects there either implements the java.security.Principal interface or override the toString method.&lt;/p&gt;</description>
                <environment></environment>
        <key id="46051">SEC-2078</key>
            <summary>Pre-authentication fails when using check for principal change and using non String principals</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="rwinch">Rob Winch</assignee>
                                    <reporter username="hbaastrup">Henrik Baastrup</reporter>
                        <labels>
                    </labels>
                <created>Fri, 9 Nov 2012 01:12:03 +0000</created>
                <updated>Sat, 6 Feb 2016 06:20:44 +0000</updated>
                            <resolved>Tue, 24 Feb 2015 14:45:28 +0000</resolved>
                                    <version>3.1.3</version>
                                    <fixVersion>3.2.6</fixVersion>
                    <fixVersion>4.0.0.RC2</fixVersion>
                                    <component>Web</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="85766" author="rwinch" created="Tue, 4 Dec 2012 08:39:48 +0000"  >&lt;p&gt;Rather than getting the name from the principal, we can just check to see if the Principals are equal. For example:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if ((principal instanceof String) &amp;amp;&amp;amp; currentUser.getName().equals(principal)) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  return false;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if(principal != null &amp;amp;&amp;amp; principal.equals(currentUser.getPrincipal())) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  return false;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;</comment>
                            <comment id="85772" author="rwinch" created="Tue, 4 Dec 2012 11:06:05 +0000"  >&lt;p&gt;Fixed as outlined in my previous comment.&lt;/p&gt;</comment>
                            <comment id="85788" author="hbaastrup" created="Wed, 5 Dec 2012 01:14:49 +0000"  >&lt;p&gt;I do not think calling the equals method direct on the Principal is a good idea, that should be last resort, using getName is more correct as it must be override, and as a programmer that is the method I would call to control a Principal.&lt;br/&gt;
So maybe the code should look like this:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if (principal==null) return true;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if (principal instanceof Principal) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  if (currentUser.getPrincipal()!=null) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    if (currentUser.getPrincipal().getName().equals(principal.getName()) return false;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    return !currentUser.getPrincipal().equals(principal);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  return !currentUser.getName().equals(((Principal)principal).toString());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;return !currentUser.getName().equals(principal.toString());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;This code allow the programmer to use three methods around the Principal: getName (that must be override as it is part of the interface), equals and toString. Also the principal can be any kind of Object now.&lt;/p&gt;


</comment>
                            <comment id="85804" author="rwinch" created="Wed, 5 Dec 2012 07:10:26 +0000"  >&lt;p&gt;I disagree that using getName() is more correct. Do you have any evidence or concrete examples of why you believe getName() is &quot;more correct&quot;?&lt;/p&gt;

&lt;p&gt;The only time that getName() should be used to determine equality is when you are trying to compare the Principal to a String representation (which is already accounted for). Otherwise, the equals method should be used. This is the definition of the &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html#equals%28java.lang.Object%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;equals&lt;/a&gt; method after all.&lt;/p&gt;</comment>
                            <comment id="85807" author="hbaastrup" created="Wed, 5 Dec 2012 07:58:19 +0000"  >&lt;p&gt;I could override toString if I want to compare two Principals as strings and then, if I follow your argumentation, the getName has no sense.&lt;/p&gt;

&lt;p&gt;The Principal interface has only one method (property); the getName, this has sense, after all the principal represent an entity, and as such has a name, two principals with the same name, are in this sense, equal they represent the same entity.&lt;br/&gt;
When you have two principals the only value you can be sure to compare is the name, because that is the only method the programmer is force to write, it is not given that the equals method is overwritten and for this reason your code will fail even if the two principals where thought equals, as they had the same name. A principal is not a string, as the original code expected, but is a principal.&lt;/p&gt;

&lt;p&gt;Last, it is not given you override the equals method, I believe, if you take a look at your own code, you have only a very little part of your objects, there actual override this method, even you compare properties within the objects. And what does it means that two instances of an object are equals? That depend of the programmer understanding of this. I strongly advice, that you use the getName method, as the code in question, is used as a framework by others and as such, you should write code, for what you could expect, and you can not expect that the equals method is overwritten.&lt;/p&gt;</comment>
                            <comment id="85809" author="rwinch" created="Wed, 5 Dec 2012 08:22:30 +0000"  >&lt;p&gt;In reply to comment #5:&lt;br/&gt;
&amp;gt; I could override toString if I want to compare two Principals as strings and&lt;br/&gt;
&amp;gt; then, if I follow your argumentation, the getName has no sense.&lt;/p&gt;

&lt;p&gt;Overriding toString() has nothing to do with the equality of the two objects. This is just one way a human would visualize the Object.&lt;/p&gt;

&lt;p&gt;&amp;gt; The Principal interface has only one method (property); the getName, this has&lt;br/&gt;
&amp;gt; sense, after all the principal represent an entity, and as such has a name, two&lt;br/&gt;
&amp;gt; principals with the same name, are in this sense, equal they represent the same&lt;br/&gt;
&amp;gt; entity.&lt;br/&gt;
&amp;gt; When you have two principals the only value you can be sure to compare is the&lt;br/&gt;
&amp;gt; name, because that is the only method the programmer is force to write, it is&lt;br/&gt;
&amp;gt; not given that the equals method is overwritten and for this reason your code&lt;br/&gt;
&amp;gt; will fail even if the two principals where thought equals, as they had the same&lt;br/&gt;
&amp;gt; name. A principal is not a string, as the original code expected, but is a&lt;br/&gt;
&amp;gt; principal.&lt;/p&gt;

&lt;p&gt;Actually the getPreAuthenticatedPrincipal method allows for Object to be returned (not just Principal). Additionally, the User object accepts an Object as the principal that is injected into it. Since everything is an Object and Object defines the equals method, then everything (despite if it is a Princpal or not) will have an equals method.&lt;/p&gt;

&lt;p&gt;&amp;gt; Last, it is not given you override the equals method, I believe, if you take a&lt;br/&gt;
&amp;gt; look at your own code, you have only a very little part of your objects, there&lt;br/&gt;
&amp;gt; actual override this method, even you compare properties within the objects.&lt;/p&gt;

&lt;p&gt;It is very frequent that I override the equals (and hashCode) methods. You must override the equals method if you are using standard Java Collections, an ORM like Hibernate, etc. This is a very common requirement.&lt;/p&gt;

&lt;p&gt;&amp;gt; And what does it means that two instances of an object are equals? That depend of&lt;br/&gt;
&amp;gt; the programmer understanding of this. &lt;/p&gt;

&lt;p&gt;Precisely why the equals method should be used. If it is not used, then the behavior cannot be changed by developers.&lt;/p&gt;

&lt;p&gt;&amp;gt; I strongly advice, that you use the&lt;br/&gt;
&amp;gt; getName method, as the code in question, is used as a framework by others and as&lt;br/&gt;
&amp;gt; such, you should write code, for what you could expect, and you can not expect&lt;br/&gt;
&amp;gt; that the equals method is overwritten.&lt;/p&gt;

&lt;p&gt;As mentioned previously, there are many other reasons that you must override the equals method. The equals method is a standard Java method that must be overridden if you want to determine equality (this is documented on the equals method as well).&lt;/p&gt;</comment>
                            <comment id="85818" author="hbaastrup" created="Wed, 5 Dec 2012 09:07:16 +0000"  >&lt;p&gt;I do follow your way of thinking, and I do agree with you, that you have the equals and hasCode methods to override when needed. The problem is; that object is not just objects, they are thought to have behaviors, and the Principal class has a behavior around its name, see the &quot;JAAS Reference Guide&quot; and &quot;JAAS and Java GSS-API Tutorials&quot; authorization in Java, as I understand it, is based on Principal names and personal I have only seen the name property used when two Principals are compared.&lt;/p&gt;

&lt;p&gt;I advice you again to use the name property to compare the two Principals, as that is, as I understand it, the natural behavior of the Principal object.&lt;/p&gt;

&lt;p&gt;If you look at the code I suggest, it takes into account that the Principal might have a special behavior around its name and for this reason use the equals method. It also takes into account that the object has overwritten the toString method such as the String object. I do believe this code will be more useful for the framework than yours, but I cannot, and do not want to, force you to change your code, so I will start to override the equals method, even I think it is not a natural behavior, on my Principals when use the SPRING framework. You should document this someplace too.&lt;/p&gt;

&lt;p&gt;The &quot;Single Sign-on Using Kerberos in Java&quot; is an other very interesting paper on the subject&lt;/p&gt;</comment>
                            <comment id="85820" author="rwinch" created="Wed, 5 Dec 2012 09:34:19 +0000"  >&lt;p&gt;Resolving as fixed. In summary, the fix will use the equals method for the following reasons:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The getName() method should only be used to compare the principal against a String&lt;/li&gt;
	&lt;li&gt;The return type of getPreAuthenticatedPrincipal is an Object. Similarly the principal argument for User is an Object. This means we should support types other than Principal. The equals method will work on Objects that do not implement Principal.&lt;/li&gt;
	&lt;li&gt;The equals method gives us greater flexibility than using getName()&lt;/li&gt;
	&lt;li&gt;It is documented by the JDK that this is the purpose of the equals method. Furthermore, the equals method must be overridden for many other reasons (i.e. to support using the Collections framework, ORM&apos;s like Hibernate, etc).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="85832" author="hbaastrup" created="Thu, 6 Dec 2012 02:31:11 +0000"  >&lt;p&gt;Having taken a look of the Spring code again, I think it comes down to what you want to trig the re-authentication on: Do you want to trig on difference in objects, from the getPreAuthenticatedPrincipal method and what the currentUser object contains, then use equals, or do you want trig on change in entity, then use getName. Please see at my code below&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class SimplePrincipal implements Principal {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	String name;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	public SimplePrincipal(String name) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		this.name = name;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	@Override&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	public String getName() {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		return name;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class ComplexPrincipal implements Principal {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	String person;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	int age;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	ComplexPrincipal(String person, int age) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		this.person = person;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		this.age = age;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	@Override&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	public String getName() {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		return person;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	@Override&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	public boolean equals(Object obj) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		if (!(obj instanceof ComplexPrincipal)) return false;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		if (!((ComplexPrincipal)obj).person.equals(this.person)) return false;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		if (((ComplexPrincipal)obj).age!=this.age) return false;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		return true;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;SimplePrincipal sp = new SimplePrincipal(&quot;Henrik Baastrup&quot;);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;ComplexPrincipal cp = new ComplexPrincipal(&quot;Henrik Baastrup&quot;, 28); //That is not my age ;-)&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if (sp.getName().equals(cp.getName())) System.out.println(&quot;The two principals present the same entity but Spring does not understand that!&quot;);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if (sp.equals(cp)) System.out.println(&quot;This should not be possibly as the two principals are of different types&quot;);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;else System.out.println(&quot;Sping has failed to detect that the two principals contain the same entity as they are of different type&quot;);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;Do not forget that it might be very likely that the objects are different as they come from different part of the code, and for this reason you should trig on change in entity.&lt;br/&gt;
My opinion is that you have not solved the bug, but only added complexity to the code, as it does not handle components from the java.security package correct.&lt;/p&gt;</comment>
                            <comment id="85843" author="rwinch" created="Thu, 6 Dec 2012 07:05:54 +0000"  >&lt;p&gt;If ComplexPrincipal and Principal are not equal, then it should trigger re-authentication. The detection determines if the Principal has changed, it is not intended to determine if the Principal name has changed or not (although this may be reflected in the equals of your Principal Object in which case it has the same effect as detecting changes in getName). If you want the two to be treated as equal, then you need to make your equals methods reflect that for both objects. Again this is no different than if you were using Java Collections, Hibernate, etc.&lt;/p&gt;</comment>
                            <comment id="85847" author="hbaastrup" created="Thu, 6 Dec 2012 09:08:11 +0000"  >&lt;p&gt;I don&apos;t feel you understand the idea behind principals. They are objects there present entities and can be of different types, even they present the same entity. This is especial valid in the current case, as it is not the same code there set the principals for the current user, as that there is use for pri-authentication, so you risk different principal types presenting the same entity and you can not use equals. If I want to use Authenticator A (could be one of the Authenticators there comes with Spring) and have my pri-authentication object B (written by me), then A might use one type of principals and B an other, and your code is not able to deistic if the entity has changed.&lt;br/&gt;
Equals is normal used on the same type of objects: here is a good article on the subject: &lt;a href=&quot;http://www.a2ztechguide.com/2011/12/java-how-to-override-equals-and.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.a2ztechguide.com/2011/12/java-how-to-override-equals-and.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="85858" author="rwinch" created="Thu, 6 Dec 2012 13:30:49 +0000"  >&lt;p&gt;I do see your points, but I am hesitant to use the proposed solution because I am concerned when another user logs a JIRA stating they have two different Principal objects that return the same value for getName() but are different Principals. Going back to your JAAS reference, consider the Subject API which allows for multiple Principal objects to be placed on it. One Principal may represent the username and a second Principal may represent a Group. In this instance, the two Principals may have the same result for getName(), but not be equal. This is only one scenario where it makes sense to have getName() return the same value but represent different Principals, but I am sure there are others that I am missing.&lt;/p&gt;

&lt;p&gt;Using the equals method solves this issue because the user can determine what it means to be equal. However, as I mentioned I still see your points. With that said, I propose that we provide a method that can be overridden in AbstractPreAuthenticatedProcessingFilter that allows users to customize when the principal changed. The default behavior of this method will be the original implementation. The method would look like:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;protected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    Object principal = getPreAuthenticatedPrincipal(request);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    if (currentAuthentication.getName().equals(principal)) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        return false;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    logger.debug(&quot;Pre-authenticated principal has changed to &quot; + principal + &quot; and will be reauthenticated&quot;);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    return true;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;This would allow you to solve your situation with very minimal effort without making any assumptions. It would also account for the future use case.&lt;/p&gt;</comment>
                            <comment id="85873" author="hbaastrup" created="Fri, 7 Dec 2012 03:09:48 +0000"  >&lt;p&gt;I think this is an acceptable solution.&lt;br/&gt;
Making the principalChanged protected and this way let the programmer choses an alternative solution for trigging re-authentication can also help in other situations. We could even begin to discuss if it should be abstract, but that would properly brake the architecture around pre-authentication.&lt;br/&gt;
In the favor of using equals can be said; Sprint does no implement JAAS at pre-authentication level, so if you want to use the javax.security package, override principalChanged.&lt;/p&gt;</comment>
                            <comment id="85881" author="hbaastrup" created="Fri, 7 Dec 2012 09:48:52 +0000"  >&lt;p&gt;I now see (again) that the currentUser in the requiresAuthentication method implementing the java.security.Principal interface for this reason the right solution is something like my first proposal:&lt;/p&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if (principal instanceof Principal) { &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  return !currentUser.getName().equals(((Principal)principal).getName());+&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;else {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  return !currentUser.getName().equals(principal.toString()); &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;
&lt;p&gt;The output from the getName method is always a String, and as the String only can compare other String objects, you can not use the equals method, but must use the toString method on not java.security.Principal objects and should use the getName on java.security.Principal objects.&lt;br/&gt;
Sorry that I did not noticed this before, I think I forgot it a long the long discussion we had.&lt;/p&gt;</comment>
                            <comment id="85882" author="rwinch" created="Fri, 7 Dec 2012 10:56:23 +0000"  >&lt;p&gt;The toString() method may allow you to compare the two objects but it is not intended for checking equality. If you wish to modify the default behavior, then you will be able to override the principalChanged method that is to be added.&lt;/p&gt;</comment>
                            <comment id="85908" author="hbaastrup" created="Mon, 10 Dec 2012 01:11:32 +0000"  >&lt;p&gt;The problem is that the code you have put in the principalChanged method is useless, or has the same bug as the original code. It expect the pre-authentication principal to be a String object, while the currentAuthentication must be a Principal (Authentication) object, you are comparing pears with apples. You main problem is that the getPreAuthenticatedPrincipal method is allowed to return everything (Object), but you want to compare it with a Principal in String representation (currentAuthentication.getName()). The only method there present an Object as a String is the toString method.&lt;/p&gt;

&lt;p&gt;After my opinion you have tow possibilities: Either you trow in the towel, and declare the principalChanged method abstract, this way you export the full responsibility to the programmer, I think this is a good idea. Or you try to do something intelligent, where you take into account that you might have some programmers there use Principals (like me), other using String (like the Spring examples) and maybe some programmers would like to use something else and would like to override the principalChanged method.&lt;br/&gt;
The minimum change is to compare like this:&lt;/p&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;currentUser.getName().equals(principal.toString())&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;
&lt;p&gt;as the output from getName is a String and it is in noway given that the principal is a String.&lt;br/&gt;
As Spring do use the java.security.Principal such as the Authentication interface, you should also take that into account and we are back to my code.&lt;/p&gt;

&lt;p&gt;In short do an intelligent hack or be abstract.&lt;/p&gt;</comment>
                            <comment id="85909" author="hbaastrup" created="Mon, 10 Dec 2012 01:16:29 +0000"  >&lt;p&gt;There also exist the possibility to re-declare the getPreAuthenticatedPrincipal methods like this:&lt;/p&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;protected abstract Principal getPreAuthenticatedPrincipal(HttpServletRequest request);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt; 
&lt;p&gt;I use Principal and not String as we want to compare the output with an Principal currentAuthentication, and we want to do it as the java.security framework expect us to do it like this:&lt;/p&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if (currentAuthentication.getName().equals(principal.getName())...&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;</comment>
                            <comment id="85915" author="rwinch" created="Mon, 10 Dec 2012 06:36:38 +0000"  >&lt;p&gt;We cannot make th proposed changes to the signature because they would be non-passive&lt;/p&gt;</comment>
                            <comment id="85916" author="hbaastrup" created="Mon, 10 Dec 2012 06:44:30 +0000"  >&lt;p&gt;I believe that the problem is to change the return type for the getPreAuthenticatedPrincipal method and declare the principalChanged method abstract.&lt;br/&gt;
Then try to do something intelligent, as I wrote in my note &quot;10/Dec/12 1:11 AM&quot;, you solution does not hold and you have not fixed the bug after my opinion.&lt;/p&gt;</comment>
                            <comment id="85918" author="rwinch" created="Mon, 10 Dec 2012 06:57:57 +0000"  >&lt;p&gt;For passivity reasons, we cannot:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Change the return type of getPreAuthenticatedPrincipal&lt;/li&gt;
	&lt;li&gt;Make a new abstract method named principalChanged&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The problem with your proposed solution is that it does not take into account a user that wants to support a more complex scenario where the getName() does not determine equality.&lt;/p&gt;

&lt;p&gt;Spring Security will not ever solve every problem. Instead it should support scenarios with little to no effort. Overriding a single method to support (what I consider to be an edge case) is a very simple change. I consider this an edge case as the code has been around for quite some time and there have not been other reports. Therefore, it is unlikely many have the same requirements you do.&lt;/p&gt;

&lt;p&gt;Again the changes I proposed allow for overriding a single method and still allow for more complex comparisons. Therefore I think it is a very reasonable solution.&lt;/p&gt;</comment>
                            <comment id="85925" author="hbaastrup" created="Mon, 10 Dec 2012 07:41:03 +0000"  >&lt;p&gt;I do understand Spring can&apos;t solve any case, and I&apos;m very aware of the code change is in a marginal part of the Spring code, it seems that the pre-authentication feature is not much in use, but it is a nice feature in a SSo scenario, and the possibility to do re-authentication make the whole idea very useful. &lt;/p&gt;

&lt;p&gt;But what I do not understand is; when you change the bit of code, at least change it, so it is going to be useful. The core of the piece of code is that you want to compare something against a java.secure.Principal, so at least change the code in the way Java tells you to do, I think that have been my argument trough this whole discussion. This is equal to &quot;scenarios with little to no effort&quot;, what you suggest will neither support simple nor complex scenario, as it does not respect the excepted behavior of a java.secure.Principal that is the base object for the re-authentication decision.&lt;br/&gt;
It is a good idea to allow programmers to override the principalChanged method, but if he decides not to do so, it should at least do the right stuff. As is, it can only handle String from the getPreAuthenticatedPrincipal method and that is, after my opinion a non expected limitation.&lt;/p&gt;

&lt;p&gt;If this code is marginal, at least listen to a user there actual use it, if you think it should be changed.&lt;/p&gt;</comment>
                            <comment id="85978" author="rwinch" created="Tue, 11 Dec 2012 15:37:11 +0000"  >&lt;p&gt;In reply to comment #21:&lt;br/&gt;
&amp;gt; I do understand Spring can&apos;t solve any case, and I&apos;m very aware of the code&lt;br/&gt;
&amp;gt; change is in a marginal part of the Spring code, it seems that the&lt;br/&gt;
&amp;gt; pre-authentication feature is not much in use, but it is a nice feature in a SSo&lt;/p&gt;

&lt;p&gt;Pre Authentication is fairly common. One of the main use cases is to support  SiteMinder integration (and other similar solutions)&lt;/p&gt;

&lt;p&gt;&amp;gt; But what I do not understand is; when you change the bit of code, at least&lt;br/&gt;
&amp;gt; change it, so it is going to be useful. &lt;/p&gt;

&lt;p&gt;The enhancement seems very useful for the situation you are in. You can now easily override the method to customize detecting when a principal changes. Beforehand you had to rewrite the entire Filter.&lt;/p&gt;

&lt;p&gt;&amp;gt; The core of the piece of code is that&lt;br/&gt;
&amp;gt; you want to compare something against a java.secure.Principal, so at least&lt;br/&gt;
&amp;gt; change the code in the way Java tells you to do, I think that have been my&lt;br/&gt;
&amp;gt; argument trough this whole discussion. &lt;/p&gt;

&lt;p&gt;I disagree that the core piece of code is to compare something against a Principal. The code has been in place for years with no complaints. Additionally, all four concrete implementations of AbstractPreAuthenticatedProcessingFilter#getPreAuthenticatedPrincipal that are included with Spring Security return a String.&lt;/p&gt;

&lt;p&gt;Perhaps you can help me understand why you are using a Principal instead of a String (i.e. principal.getName())?&lt;/p&gt;

&lt;p&gt;&amp;gt; It is a good idea to allow programmers to override the principalChanged method,&lt;br/&gt;
&amp;gt; but if he decides not to do so, it should at least do the right stuff.&lt;/p&gt;

&lt;p&gt;I agree, but the concern is that you are not the only one that uses the framework. So what happens when someone returns two different Principals that are different types (similar to my example in one of my previous comments)? Users may not want to treat getName() comparison as equality between the two types. In fact, I think not wanting to use getName() for determination of equality an excellent reason to return a richer object like a Principal making this a very real use case. If we use your proposed changes, then we may have made an invalid assumption for the aforementioned use case.&lt;/p&gt;

&lt;p&gt;&amp;gt; If this code is marginal, at least listen to a user there actual use it, if you&lt;br/&gt;
&amp;gt; think it should be changed.&lt;/p&gt;

&lt;p&gt;There are other users we must consider. If I make the proposed changes, there is just as likely a chance that I have made a bad assumption for users who do not want to treat getName() as equal. For this reason, it is best to allow users who have a more unique situation to customize the strategy themselves.&lt;/p&gt;</comment>
                            <comment id="86008" author="hbaastrup" created="Wed, 12 Dec 2012 02:49:26 +0000"  >&lt;p&gt;I believe that my case is marginal because, this bug would have be found before if not. The system function perfectly as long you do not use the  &quot;check for principal change&quot; flag, and even so, you might not notice that you do re-authentication when not necessary or your getPreAuthenticatedPrincipa might return a String object. Also not everybody might be so hard headed as me &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The core of the code compare against the currentAuthentication there is a Principal, and for that reason use the getName to extract its value to check if the entity, it present, is different from something there should present an entity.&lt;/p&gt;

&lt;p&gt;I use principals because I use the same objects in my Authentication Provider and my pre-authentication code and this way re-use my code. I could of cause just return the getName in my getPreAuthenticatedPrincipal method, but that is not logic because it expect an Object not a String. In general I&apos;m using the java.security package in my code, my code also implement JAAS and respect the expected behavior of the classes here, a Principal is the object there present an entity here.&lt;br/&gt;
If you want to compare two principals (entities) you should use the getName method, this way you can compare tow different type of principals there might present the same entity, remember you want to do re-authentication when the entity has changed not when the object has changed. E.g. I want to do re-authentication when the entity change from Bob to Alise not when the object change from type A to type B but the entity remain Bob, am I right?&lt;/p&gt;

&lt;p&gt;Why I object so strongly to your suggesting is; you have just move the bug down in some code I can override, not solved the bug. As long you compare (use equals) with a String object you can only return Strings from the getPreAuthenticatedPrincipal  method. If that is what you want, you should change the return type for the method to String.&lt;/p&gt;

&lt;p&gt;My sensation is, I might be wrong, that you like to use String to present entities, this is not necessary wrong, but Java tells us to use Principals, and compare them at String level using the getName method, we can always discuss if this is a good solution, but after all that is what Java use and also what Spring use for the Authentication interface, so why not continue to do that?&lt;br/&gt;
I think it is a good idea to allow people to override your method, if they do not use Strings or Principals. But as is, you can only use Strings for principals, so all existing code so fare must have returned Strings, if they pass this piece of code. That is to pure, especial when Java tell us the right thing is to use Principals, and the abstract method allow Objects.&lt;/p&gt;

&lt;p&gt;Last: What I suggest in comment &quot;07/Dec/12 9:48 AM&quot; (I can&apos;t see the number) will function with all existing code, plus Principal and non String objects, not too bad I think.&lt;br/&gt;
Put it in in you new method and people can then override if necessary, but the code now have expected behavior.&lt;/p&gt;</comment>
                            <comment id="89613" author="rwinch" created="Wed, 24 Apr 2013 14:37:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;If you want to compare two principals (entities) you should use the getName method, this way you can compare tow different type of principals there might present the same entity, remember you want to do re-authentication when the entity has changed not when the object has changed. E.g. I want to do re-authentication when the entity change from Bob to Alise not when the object change from type A to type B but the entity remain Bob, am I right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This may be true in some systems, but Spring Security does not know the semantics of your Principal. As I outlined previously, a Principal could represent a Group and a User. We do not want to treat these as the same. Another example is that the Principal may have changed its strength (i.e. perhaps it only used on factor to authenticate and then changed to two factors). We want to ensure that triggers authentication too. In short, allowing a system to use getName() for comparison can be dangerous in a system that we are not familiar with. However, equals can accommodate both problems.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; As long you compare (use equals) with a String object you can only return Strings from the getPreAuthenticatedPrincipal method. If that is what you want, you should change the return type for the method to String.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Again we cannot change the method signature as this is non-passive. The &lt;a href=&quot;https://github.com/SpringSource/spring-security/commit/5fa252b848110fe6f1fdbee15a954a9627847a76#L0R158&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;originally proposed code&lt;/a&gt; will allow returning any Object and the comparison would be done using equals.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My sensation is, I might be wrong, that you like to use String to present entities, this is not necessary wrong, but Java tells us to use Principals, and compare them at String level using the getName method, we can always discuss if this is a good solution, but after all that is what Java use and also what Spring use for the Authentication interface, so why not continue to do that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The method signature is Object, so we must abide by that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Last: What I suggest in comment &quot;07/Dec/12 9:48 AM&quot; (I can&apos;t see the number) will function with all existing code, plus Principal and non String objects, not too bad I think.&lt;br/&gt;
Put it in in you new method and people can then override if necessary, but the code now have expected behavior.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It will function as expected for you. Again we don&apos;t know others use-cases and I would rather error on the side of making the method return not equals (require re-authentication) than let something slip by accidentally. Worst case scenario for your proposal is a Security breach...worst case scenario for my proposals is a performance issue.&lt;/p&gt;</comment>
                            <comment id="110709" author="kathryn.spinks" created="Tue, 16 Dec 2014 08:34:02 +0000"  >&lt;p&gt;Hi Rob, your proposal to provide a method which subclasses can override will work perfectly for me, without compromising other subclasses that already rely on this behaviour (like J2eePreAuthenticatedProcessingFilter which returns a String and NOT a principal when getPreAuthenticatedPrincipal(request) is called).&lt;/p&gt;</comment>
                            <comment id="112385" author="kathryn.spinks" created="Mon, 9 Feb 2015 07:14:26 +0000"  >&lt;p&gt;Hi Rob, are you able to provide me an idea of which, ir any,  release this change might be added to please? The solution that you have proposed would be ideal for the situation that I am facing. Thanks Kathryn&lt;/p&gt;</comment>
                            <comment id="112388" author="hbaastrup" created="Mon, 9 Feb 2015 07:51:48 +0000"  >&lt;p&gt;Hi Kathryn&lt;br/&gt;
I don&apos;t know which of Rob&apos;s changes you looking for, but as Rob and me did not agree I thought the bug was suspended in some way, and I did a workaround. I don&apos;t know if you could do the same, but the main idea is to overwrite the equals method in the principal, so the Spring pre-authentication comes out right, below is my equals method, the principal the userId property is a String:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class IdP4JAuthenticationPrincipal implements Principal,Serializable {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	@Override&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	public boolean equals(Object obj) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		if (userId!=null) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;			if (obj instanceof String) return userId.equals(obj);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;			else if (obj instanceof IdP4JAuthenticationPrincipal) return userId.equals(((IdP4JAuthenticationPrincipal)obj).getUserId());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;			else return userId.equals(obj.toString());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		else return super.equals(obj);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;*&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt; </comment>
                            <comment id="112389" author="kathryn.spinks" created="Mon, 9 Feb 2015 08:18:12 +0000"  >&lt;p&gt;Hi Henrik, &lt;br/&gt;
The change of Rob&apos;s that I was referring to was &lt;/p&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;protected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    Object principal = getPreAuthenticatedPrincipal(request);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    if (currentAuthentication.getName().equals(principal)) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;         return false;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;     }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;     logger.debug(&quot;Pre-authenticated principal has changed to &quot; + principal + &quot; and will be reauthenticated&quot;);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;     return true;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;This change will enable existing implementation of the abstract class to work, whilst enabling me to override the default behaviour. I use both the J2eePreAuthenticatedProcessingFilter which relies on the existing behaviour, and I need to implement something else with different behaviour, and this change suits both.&lt;/p&gt;

&lt;p&gt;With regards to your example above with the equals method, whilst I can see why this might seem an ideal solution, it just isn&apos;t practical for me as the principal is supplied via Tomcat and not my application and so I do not have easy (or any?) access to amend the equals method.&lt;/p&gt;

&lt;p&gt;The workaround I have implemented is to add Rob&apos;s method to the class - and it is working perfectly for me in both situations.&lt;/p&gt;</comment>
                            <comment id="112391" author="hbaastrup" created="Mon, 9 Feb 2015 09:01:20 +0000"  >&lt;p&gt;Hi Kathryn,&lt;/p&gt;

&lt;p&gt;Sorry the above example was not my workaround, it so long time I did this stuff, but by digging a bit, I found my real workaround.&lt;br/&gt;
My setup is that I have a Tomcat application there use an external authentication provider. This provider pass a token to my application that I later can use to verify the validation of a session.&lt;br/&gt;
To workaround the problem described in this issue, I let the pre-authentication fails in AbstractPreAuthenticatedProcessingFilter as my overriding class getPreAuthenticatedPrincipal method always returns a Principal not a String, then I handle this in my AuthenticationProvider authenticate method. There I check the type of Authentication there is passed as parameter, if it is of the same type I returned from getPreAuthenticatedPrincipal and contains valid values, I accept it as a valid Authentication and create a new Authentication of a different type than was passed and return this.&lt;br/&gt;
The problem with this solution is, you always run your authentication, with all the cost this has, and the whole idea with preauthentication seems a bit empty.&lt;/p&gt;

&lt;p&gt;NOTE: The Spring Authentication class implements java.security.Principal and for this reason the existing code is so absurd that it only can accept Strings and for the same reason I can not agree with Rob&apos;s solution.&lt;/p&gt;

&lt;p&gt;I don&apos;t know is this can help you but for me it function.&lt;/p&gt;</comment>
                            <comment id="112392" author="kathryn.spinks" created="Mon, 9 Feb 2015 09:34:11 +0000"  >&lt;p&gt;Hi Henrik, &lt;br/&gt;
I agree that the current implementation doesn&apos;t make much sense, however I believe that your equals method would not work for me even if I was able to implement it. This is because the Object returned by SecurityContextHolder.getContext().getAuthentication().getPrincipal(); isn&apos;t a &apos;Principal&apos; in my application - its an Object that&apos;s an implementation of the UserDetails interface. &lt;br/&gt;
The solution that Rob suggests is a pragmatic solution that allows existing implementations to work, and allows for different &apos;Objects&apos; to be returned by the getPrincipal() method (perhaps this method should be renamed as its quite misleading!).&lt;/p&gt;</comment>
                            <comment id="112785" author="rwinch" created="Tue, 24 Feb 2015 14:45:21 +0000"  >&lt;p&gt;Thanks for the feedback. I have reapplied the changes I made to allow overriding the method in 3.2.6 and 4.0.0.RC2 which will be available later this week.&lt;/p&gt;</comment>
                            <comment id="125049" author="issuemaster" created="Sat, 6 Feb 2016 06:20:44 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/2302&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/2302&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="55859">SEC-2497</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="60332">SEC-2751</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="61225">SEC-2794</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="64896">SEC-3051</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 4 Dec 2012 08:39:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32942</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i05yav:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34763</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32644</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>