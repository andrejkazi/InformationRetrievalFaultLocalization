<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 10:33:02 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-933/SEC-933.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-933] global-method-security and aop:aspectj-autoproxy throws NullPointerException in some situations</title>
                <link>https://jira.spring.io/browse/SEC-933</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;Hello, &lt;/p&gt;

&lt;p&gt;there is an situation where the combination of global-method-security and aop:aspectj-autoproxy throws a NullPointerException.&lt;br/&gt;
This happens if you have a custom UserDetailsService implementation which itself uses an secured collaborator class (DAO/Repository) to load &lt;br/&gt;
user objects from the database.&lt;/p&gt;

&lt;p&gt;I.e. You have a UserRepository with finder/update methods, and you want to secure the full repository except one finder method to load the user &lt;br/&gt;
objects from the database. The UserDetailsService implementation will use that repository to load the objects.&lt;/p&gt;

&lt;p&gt;If you don&apos;t use the aop:aspectj-autoproxy functionality the scenario above works without any error. But if you add aop-aspectj-autoproxy to &lt;br/&gt;
the configuration (without any aspect!) you will get an nullpointerexception.&lt;/p&gt;

&lt;p&gt;Here is the stacktrace &lt;br/&gt;
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;org.springframework.security.providers.dao.DaoAuthenticationProvider#0&apos;: Cannot resolve reference to bean &apos;userDetailsService&apos; while setting bean property &apos;userDetailsService&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userDetailsService&apos; defined in class path resource &lt;span class=&quot;error&quot;&gt;&amp;#91;security-config.xml&amp;#93;&lt;/span&gt;: Initialization of bean failed; nested exception is java.lang.NullPointerException&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1244)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1008)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)&lt;br/&gt;
	... 69 more&lt;br/&gt;
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userDetailsService&apos; defined in class path resource &lt;span class=&quot;error&quot;&gt;&amp;#91;security-config.xml&amp;#93;&lt;/span&gt;: Initialization of bean failed; nested exception is java.lang.NullPointerException&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)&lt;br/&gt;
	... 82 more&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
	at org.springframework.security.intercept.method.aopalliance.MethodDefinitionSourceAdvisor$MethodDefinitionSourcePointcut.matches(MethodDefinitionSourceAdvisor.java:120)&lt;br/&gt;
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:214)&lt;br/&gt;
	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:253)&lt;br/&gt;
	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:287)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:113)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:85)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:345)&lt;br/&gt;
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:309)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:361)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1342)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:471)&lt;br/&gt;
	... 91 more&lt;/p&gt;

&lt;p&gt;This should be fixed, or at least the should be a better error message in this situations.&lt;/p&gt;

&lt;p&gt;Rgds&lt;br/&gt;
Agim&lt;/p&gt;
</description>
                <environment>Java 1.6, Spring 2.5.4</environment>
        <key id="23257">SEC-933</key>
            <summary>global-method-security and aop:aspectj-autoproxy throws NullPointerException in some situations</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="luke">Luke Taylor</assignee>
                                    <reporter username="agim">Agim Emruli</reporter>
                        <labels>
                    </labels>
                <created>Wed, 23 Jul 2008 00:31:57 +0000</created>
                <updated>Sat, 6 Feb 2016 06:38:12 +0000</updated>
                            <resolved>Tue, 5 Aug 2008 22:11:14 +0000</resolved>
                                    <version>2.0.2</version>
                    <version>2.0.3</version>
                                    <fixVersion>2.0.4</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="37834" author="agim" created="Wed, 23 Jul 2008 00:32:28 +0000"  >&lt;p&gt;Sample project with the exception.&lt;/p&gt;</comment>
                            <comment id="37977" author="luke" created="Mon, 28 Jul 2008 23:15:53 +0000"  >&lt;p&gt;Thanks, Agim. I&apos;ve managed to get rid of the NPE, but instead I now get:&lt;/p&gt;

&lt;p&gt;Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &apos;userRepository&apos;: Bean with name &apos;userRepository&apos; has been injected into other beans &lt;span class=&quot;error&quot;&gt;&amp;#91;userDetailsService&amp;#93;&lt;/span&gt; in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:500)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)&lt;/p&gt;

&lt;p&gt;I&apos;m not sure how we can get round this at the moment. We may just have to document the fact that beans that are part of the security infrastructure can&apos;t be secured in this way.&lt;/p&gt;</comment>
                            <comment id="37979" author="agim" created="Mon, 28 Jul 2008 23:19:35 +0000"  >&lt;p&gt;Luke, &lt;/p&gt;

&lt;p&gt;thanks for your investigation. Maybe we add to the documentation that you can solve this issue with any LazyInitTargetSource for the UserDetailsService.&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;userDetailsService&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;targetSource&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;bean class=&quot;org.springframework.aop.target.LazyInitTargetSource&quot;&amp;gt;&lt;br/&gt;
				&amp;lt;property name=&quot;targetBeanName&quot; value=&quot;targetUserDetailsService&quot;/&amp;gt;&lt;br/&gt;
			&amp;lt;/bean&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;targetUserDetailsService&quot;&lt;br/&gt;
		class=&quot;MyCustomUserService&quot; lazy-init=&quot;true&quot;&amp;gt;&lt;br/&gt;
	....&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;Rgds&lt;br/&gt;
Agim&lt;/p&gt;</comment>
                            <comment id="38011" author="luke" created="Tue, 29 Jul 2008 22:17:42 +0000"  >&lt;p&gt;I think I&apos;ve managed to solve the issue by deferring the initialization of the authentication providers list in the ProviderManager till it is first used. The namespace now uses a customized AuthenticationManager implementation which extends ProviderManager. The (second) problem was again that the AuthenticationManager was being eagerly instantiated (and hence the UserDetailsService), as in &lt;a href=&quot;https://jira.spring.io/browse/SEC-773&quot; title=&quot;global-method-security fails with JPA&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SEC-773&quot;&gt;&lt;del&gt;SEC-773&lt;/del&gt;&lt;/a&gt;. A call to getAdvice() from AspectJProxyUtils.isAspectJAdvice was causing the interceptor and dependent objects to be instantiated.&lt;/p&gt;

&lt;p&gt;I can probably roll back the change for &lt;a href=&quot;https://jira.spring.io/browse/SEC-773&quot; title=&quot;global-method-security fails with JPA&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SEC-773&quot;&gt;&lt;del&gt;SEC-773&lt;/del&gt;&lt;/a&gt; now as should prevent this kind of problem in all its forms. &lt;/p&gt;</comment>
                            <comment id="38173" author="luke" created="Tue, 5 Aug 2008 22:11:14 +0000"  >&lt;p&gt;No further input (either here or from &lt;a href=&quot;http://forum.springframework.org/showthread.php?t=57769&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/showthread.php?t=57769&lt;/a&gt;), so marking as resolved.&lt;/p&gt;</comment>
                            <comment id="126956" author="issuemaster" created="Sat, 6 Feb 2016 06:38:12 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/1188&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/1188&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="14418" name="security-sample.zip" size="3796" author="agim" created="Wed, 23 Jul 2008 00:32:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 28 Jul 2008 23:15:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12662</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i03zlj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23309</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19795</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>