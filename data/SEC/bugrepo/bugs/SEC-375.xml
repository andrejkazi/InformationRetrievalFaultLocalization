<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 11:10:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-375/SEC-375.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-375] AuthorizedEvent published by before filter but not by after filter</title>
                <link>https://jira.spring.io/browse/SEC-375</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;All of the interceptors (filter, method, aspectj) do a before pass and an after pass on the request. &lt;/p&gt;

&lt;p&gt;The before and after filtering methods are shared among the filtere and are implemented in the base class AbstractSecurityInterceptor.&lt;/p&gt;

&lt;p&gt;The method AbstractSecurityInterceptor.before publishes an AuthorizedEvent if the authorization is successful.&lt;/p&gt;

&lt;p&gt;The method AbstractSecurityInterceptor.after &lt;br/&gt;
    delegates to the afterInvocationManager&lt;br/&gt;
    if you use the AfterInfocationProviderManager, that invokes a List of Providers in turn.&lt;/p&gt;

&lt;p&gt;There is no AuthorizedEvent published if the authorization succeeds.   To be consistent, the AuthorizedEvent should be published whenever the authorization succeeds. &lt;/p&gt;</description>
                <environment></environment>
        <key id="15193">SEC-375</key>
            <summary>AuthorizedEvent published by before filter but not by after filter</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="balex">Ben Alex</assignee>
                                    <reporter username="rblumen">Robert Blumen</reporter>
                        <labels>
                    </labels>
                <created>Wed, 11 Oct 2006 05:33:20 +0000</created>
                <updated>Sat, 6 Feb 2016 06:32:04 +0000</updated>
                            <resolved>Sun, 12 Nov 2006 08:05:56 +0000</resolved>
                                    <version>1.0.2</version>
                                    <fixVersion>1.0.3</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="20190" author="rblumen" created="Wed, 11 Oct 2006 05:45:47 +0000"  >&lt;p&gt;One difficulty in figuring out how to do this is that the AfterInvocationProviderManager is completely agnostic about what the providers are doing.  It does not know that the providers are authorizing the request.  Each provider could be doing any kind of checking whatever.   The individual after invocation providers know that they are doing authorization, but each after invocation provider has no way of knowing when a request has been authorized because authorization only occurs when all of the after invocation providers agree.&lt;/p&gt;

&lt;p&gt;The framework does not have a distinct notion of authorizing a request after invocation.  The after invocation providers could do a mixture of things including authorization and other checks, such as logging, charging an account for viewing certain data, sending out alters when certain data are obtained, etc. &lt;/p&gt;

&lt;p&gt;To determine when authorization occurred would require a bit of refactoring then...to separate authorization from other things that might occur after invocation.   Perhaps separate the after invocation provider into two, an after invocation authorization manager and an &quot;other&quot; after invocation provider.   &lt;/p&gt;</comment>
                            <comment id="20192" author="rblumen" created="Wed, 11 Oct 2006 06:36:54 +0000"  >&lt;p&gt;The same problem exists with respect to the AuthorizationFailureEvent not being published on an AccessDenied Exception that originates in the after part of the filtering.  The before does publish such an event. &lt;/p&gt;</comment>
                            <comment id="20754" author="balex" created="Sun, 12 Nov 2006 08:05:06 +0000"  >&lt;p&gt;AuthorizedEvent&apos;s JavaDocs are quite specific in stating, &quot;Published just before the secure object attempts to proceed&quot;. Thus, message consumers interested in AuthorizedEvent should understand an AfterInvocationManager might subsequently decline the request for whatever reason.&lt;/p&gt;

&lt;p&gt;An AccessDeniedException will result in an AuthorizationFailureEvent, which, from its JavaDocs, &quot;indicates a secure object invocation failed because the principal could not be authorized for the request&quot;. I&apos;ve added a comment to the JavaDocs, &quot;This event might be thrown as a result of either an &lt;/p&gt;
{@link AccessDecisionManager}
&lt;p&gt; or an &lt;/p&gt;
{@link AfterInvocationManager}
&lt;p&gt;.&quot;.&lt;/p&gt;

&lt;p&gt;Any AccessDeniedException now detected by an AfterInvocationManager will cause the AuthorizationFailureEvent to be published. I&apos;ve checked this change into SVN.&lt;/p&gt;

&lt;p&gt;There is no elegant way of detecting object modification by the AfterInvocationManager and publishing an event accordingly. You could do it with hashCode(), but that depends on correct implementation. Given we offer no &quot;ObjectChangeEvent&quot; and it is largely up to individual AfterInvocationProviders (or AfterInvocationManager) to provide such capabilities, adding this new feature is out of scope for Acegi Security.&lt;/p&gt;</comment>
                            <comment id="20755" author="balex" created="Sun, 12 Nov 2006 08:05:56 +0000"  >&lt;p&gt;Fixed in SVN, tests pass.&lt;/p&gt;</comment>
                            <comment id="126344" author="issuemaster" created="Sat, 6 Feb 2016 06:32:04 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/636&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/636&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 12 Nov 2006 08:05:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10675</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01w5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11085</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11064</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>