<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SEC">
	<bug id="1838" opendate="2011-10-12 06:23:28" fixdate="2011-10-13 07:39:01" resolution="Duplicate">
		<buginformation>
			<summary>FirewalledRequest.reset() is not called if there are no matching filters</summary>
			<description>FilterChainProxy.doFilter() determines the list of filters that have to be applied to a request. If there are filters, this method delegates to VirtualFilterChain.doFilter(), which will reset the firewall request wrapper at the end of the chain.
The problem occurs, if there are no filters: FilterChainProxy.doFilter() is creating an instance of FirewalledRequest nevertheless, which it passes on to the original chain. But it does not call the "reset" method this FirewalledRequest object.
This situation occurs, if you map "/" in web.xml to the Spring Security Filter Chain, but the Spring Security Filter Chain only handles "/some/" and "/thing/*". With this mapping, there are URLs like "/status" which are passed to the security chain proxy, but which are not covered by a filter list. The effect is bug is, that the servlet which is mapped to "/status" will get an invalid pathInfo and servletPath.
The resolution should be quite simple: If FilterChainProxy.doFilter() has an empty filter list for a given URL, it must not pass the firewalled request to the original chain but the original request. The line "chain.doFilter(fwRequest, response);" should be changed into "chain.doFilter(servletRequest, response);".
I don&amp;amp;apos;t know if Spring Security 3 is affected too, because we are using 2.0.x.</description>
			<version>2.0.7</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.web.FilterChainProxyTests.java</file>
			<file type="M">org.springframework.security.web.FilterChainProxy.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">1608</link>
		</links>
	</bug>
	<bug id="2056" opendate="2012-09-19 10:06:02" fixdate="2014-05-22 07:28:40" resolution="Complete">
		<buginformation>
			<summary>CVE-2012-5055 DaoAuthenticationProvider can reveal which usernames are valid</summary>
			<description>Description:
Spring Security&amp;amp;apos;s DaoAuthenticationProvider authenticates users by utilizing the PasswordEncoder interface to compare the submitted password with the actual password. If a user is not found, the comparison is skipped which, depending on the PasswordEncoder implementation, can result in a significant difference in the amount of time required to attempt to authenticate an actual user versus a user that does not exist. This opens up the possibility of a side channel attack that would enable a malicious user to determine if a username is valid.
Example:
The DaoAuthenticationProvider allows setting of the PasswordEncoder for password validation:






DaoAuthenticationProvider provider = new DaoAuthenticationProvider();




provider.setPasswordEncoder(new BCryptPasswordEncoder());









// Authentication or failure to authenticate an actual user takes ~84ms




Authentication existingUser = new UsernamePasswordAuthenticationToken("existingUser", "password");




provider.authentication(existingUser);









// Failure to authenticate a user that does not exist takes ~0ms




Authentication missingUser = new UsernamePasswordAuthenticationToken("missingUser", "password");




provider.authentication(missingUser);






The difference between the amount of time it takes to authenticate an existing user and a user that does not exist can reveal if a username is valid or not.
Mitigation:
Applications which use DaoAuthenticationProvider and a PasswordEncoder other than PlainTextEncoder are likely to be vulnerable.
All users may mitigate this issue by upgrading to Spring Security 3.1.3+, 3.0.8+, or 2.0.8+.
Fix:
DaoAuthenticationProvider now performs PasswordEncoder.isPasswordValid when a user is not found.
Credit:
The issue was discovered by Nicholas Goodwin.</description>
			<version>2.0.7</version>
			<fixedVersion>2.0.8, 3.0.8, 3.1.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.authentication.dao.DaoAuthenticationProvider.java</file>
			<file type="M">org.springframework.security.authentication.dao.DaoAuthenticationProviderTests.java</file>
		</fixedFiles>
	</bug>
</bugrepository>