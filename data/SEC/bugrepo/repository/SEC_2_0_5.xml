<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SEC">
	<bug id="1151" opendate="2009-05-04 01:35:05" fixdate="2009-05-07 14:19:24" resolution="Fixed">
		<buginformation>
			<summary>Check on acl bounds not correct</summary>
			<description>On line 130 of AclImpl.java in trunk (line number is different in other releases) a check is performed on the upper bound of the list of access control entries.
Code is:
        if (aceIndex &amp;gt; this.aces.size()) {
should be:
        if (aceIndex &amp;gt;= this.aces.size()) {
Result is that exception out of underlying list impl is thrown.  Minor.</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.0 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.acls.domain.AclImpl.java</file>
			<file type="M">org.springframework.security.acls.domain.AclImplTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">1300</link>
		</links>
	</bug>
	<bug id="1199" opendate="2009-07-16 20:17:11" fixdate="2009-08-23 00:12:54" resolution="Duplicate">
		<buginformation>
			<summary>JdbcMutableAclService can&amp;apos;t create acl_object_identity entry in PostgreSQL</summary>
			<description>The JdbcMutableAclService fails to create acl_object_identity entry in Postgresql, because it passes string as the object_id_identity where an integer (long) type is expected (in method JdbcMutableAclService.createObjectIdentity() ). 
The result is:
org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [insert into acl_object_identity (object_id_class, object_id_identity, owner_sid, entries_inheriting) values (?, ?, ?, ?)]; nested exception is org.postgresql.util.PSQLException: ERROR: column "object_id_identity" is of type bigint but expression is of type character varying
  Hint: You will need to rewrite or cast the expression.
  Position: 51
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:276)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:607)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:792)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:850)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:858)
	at org.springframework.security.acls.jdbc.JdbcMutableAclService.createObjectIdentity(JdbcMutableAclService.java:157)
	at org.springframework.security.acls.jdbc.JdbcMutableAclService.createAcl(JdbcMutableAclService.java:108)
</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.0 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.security.acls.jdbc.AclPermissionInheritanceTests.java</file>
			<file type="M">org.springframework.security.acls.jdbc.JdbcMutableAclServiceTests.java</file>
			<file type="M">org.springframework.security.acls.jdbc.JdbcMutableAclService.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">1038</link>
		</links>
	</bug>
	<bug id="1239" opendate="2009-09-06 22:44:55" fixdate="2009-09-09 05:56:00" resolution="Fixed">
		<buginformation>
			<summary>Special characters in JAAS config file location</summary>
			<description>Given a JaasAuthenticationProvider declared like this:
    &amp;lt;bean id="krb5AuthenticationProvider"
        class="org.springframework.security.providers.jaas.JaasAuthenticationProvider"&amp;gt;
        &amp;lt;property name="loginConfig" value="classpath:/jaas.config"/&amp;gt;
        &amp;lt;property name="loginContextName" value="Krb5LoginModule"/&amp;gt;
        &amp;lt;property name="callbackHandlers"&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;bean class="org.springframework.security.providers.jaas.JaasNameCallbackHandler"/&amp;gt;
                &amp;lt;bean class="org.springframework.security.providers.jaas.PasswordCallbackHandler"/&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
I get the folowing exception:
java.lang.SecurityException: D:\Tomcat%205.5.23\webapps\myapp\WEB-INF\classes\jaas.config (The system cannot find the path specified) 
The problem stems from 

the fact that there is a special character (%20 is "space") in my Tomcat location.
the way Resouce is converted to String in method private void configureJaasUsingLoop():
    String loginConfigUrl = loginConfig.getURL().toString();

</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.0 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.authentication.jaas.JaasAuthenticationProvider.java</file>
			<file type="M">org.springframework.security.authentication.jaas.JaasAuthenticationProviderTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1300" opendate="2009-11-19 12:15:41" fixdate="2009-11-29 22:53:47" resolution="Duplicate">
		<buginformation>
			<summary>ArrayIndex out of bounds in AclImpl</summary>
			<description>In AclImpl#verifyAceIndexExists(...)
I think this is an "off by one" bug. I may be wrong but shouldn&amp;amp;apos;t 
this:
        if (aceIndex &amp;gt; this.aces.size()) 
{
        	throw new NotFoundException("aceIndex must correctly refer to an index of the AccessControlEntry collection");
        }

be this:

        if (aceIndex &amp;gt; this.aces.size() - 1) {        	throw new NotFoundException("aceIndex must correctly refer to an index of the AccessControlEntry collection");        }

Since I&amp;amp;apos;m getting the exception but wondered how it passed verifyAceIndexExists?:
eption Handler execution resulted in exception - forwarding to resolved error view
                                 java.lang.IndexOutOfBoundsException: Index: 2, Size: 2
        at java.util.ArrayList.RangeCheck(ArrayList.java:572)
        at java.util.ArrayList.remove(ArrayList.java:415)
        at org.springframework.security.acls.domain.AclImpl.deleteAce(AclImpl.java:131)
        at com.acme.app.springframework.security.AclSecurityServiceImpl.replaceUserPermissions(AclSecurityServiceImpl.jav</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.0.RC2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.acls.domain.AclImpl.java</file>
			<file type="M">org.springframework.security.acls.domain.AclImplTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">1151</link>
		</links>
	</bug>
	<bug id="1308" opendate="2009-11-24 08:14:37" fixdate="2009-11-30 08:11:03" resolution="Duplicate">
		<buginformation>
			<summary>Jdbc[Mutable]AclService  can allow (all) sql statements to be configured</summary>
			<description>I&amp;amp;apos;m providing a candidate patch for consideration. It&amp;amp;apos;s an enhancement to jdbc acl service that allows all sql statement strings to be configured by via spring. Please review and incorporate if desired.
The attached patch contains:
1) Interface for AclSQLSource (not sure if setters should really be part of this or not. I decided to include them.)
2) DefaultAclSQLSource - contains the usual Postgres SQL statements and setters for Spring configuration. Additional constructor takes a map with property and sql map entries.
3) Changes to JdbcAclService and JdbcMutableAclService to read statements from the AclSQLSource.
===
Sample configuration:
	&amp;lt;bean id="sqlSource"
		class="org.springframework.security.acls.jdbc.DefaultAclSQLSource"&amp;gt;
		&amp;lt;constructor-arg&amp;gt;
			&amp;lt;map&amp;gt;
				&amp;lt;entry key="classIdentityQuery" value="SELECT ACL_CLASS_ID_SEQ.CURRVAL FROM DUAL" /&amp;gt;
				&amp;lt;entry key="sidIdentityQuery" value="SELECT ACL_SID_ID_SEQ.CURRVAL FROM DUAL" /&amp;gt;
				&amp;lt;entry key="selectSidPrimaryKey"
					value="select id from acl_sid where principal=DECODE(?,&amp;amp;apos;TRUE&amp;amp;apos;,&amp;amp;apos;1&amp;amp;apos;,&amp;amp;apos;Y&amp;amp;apos;,&amp;amp;apos;1&amp;amp;apos;,&amp;amp;apos;1&amp;amp;apos;,&amp;amp;apos;1&amp;amp;apos;,&amp;amp;apos;FALSE&amp;amp;apos;,&amp;amp;apos;0&amp;amp;apos;,&amp;amp;apos;N&amp;amp;apos;,&amp;amp;apos;0&amp;amp;apos;,&amp;amp;apos;0&amp;amp;apos;,&amp;amp;apos;0&amp;amp;apos;) and sid=?" /&amp;gt;
				&amp;lt;entry key="insertSid"
					value="insert into acl_sid (principal, sid) values (DECODE(?,&amp;amp;apos;TRUE&amp;amp;apos;,&amp;amp;apos;1&amp;amp;apos;,&amp;amp;apos;Y&amp;amp;apos;,&amp;amp;apos;1&amp;amp;apos;,&amp;amp;apos;1&amp;amp;apos;,&amp;amp;apos;1&amp;amp;apos;,&amp;amp;apos;FALSE&amp;amp;apos;,&amp;amp;apos;0&amp;amp;apos;,&amp;amp;apos;N&amp;amp;apos;,&amp;amp;apos;0&amp;amp;apos;,&amp;amp;apos;0&amp;amp;apos;,&amp;amp;apos;0&amp;amp;apos;), ?)" /&amp;gt;
			&amp;lt;/map&amp;gt;
		&amp;lt;/constructor-arg&amp;gt;
	&amp;lt;/bean&amp;gt;
	&amp;lt;bean id="aclService"
		class="org.springframework.security.acls.jdbc.JdbcMutableAclService"&amp;gt;
		&amp;lt;constructor-arg ref="secDataSource" index="0"/&amp;gt;
		&amp;lt;constructor-arg ref="lookupStrategy" index="1"/&amp;gt;
		&amp;lt;constructor-arg ref="aclCache" index="2"/&amp;gt;
		&amp;lt;constructor-arg ref="sqlSource" index="3"/&amp;gt;
	&amp;lt;/bean&amp;gt;
===</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.0.RC2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.acls.jdbc.JdbcAclService.java</file>
			<file type="M">org.springframework.security.acls.jdbc.JdbcMutableAclService.java</file>
			<file type="M">org.springframework.security.acls.jdbc.BasicLookupStrategy.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">925</link>
		</links>
	</bug>
	<bug id="1328" opendate="2009-12-15 04:53:47" fixdate="2009-12-18 04:05:20" resolution="Fixed">
		<buginformation>
			<summary>RedirectUtils/DefaultRedirectStrategy contextRelative redirect doesn&amp;apos;t account for url like http://context.xyz.com/context</summary>
			<description>Unfortunately in our production URL the hostname starts with same string as the context so the code that searches for the context in order to strip off everything before it finds the first occurance and leaves a chunk of URL (since the slash from the protocol helps match the slash in the context).
The current code does this:
            int len = request.getContextPath().length();
            int index = url.indexOf(request.getContextPath()) + len;
            finalUrl = url.substring(index);
I fixed it by doing: 
            url = url.replaceFirst(".*://", ""); // strip off protocol
	    int len = request.getContextPath().length();
	    int index = url.indexOf(request.getContextPath()) + len;
	    finalUrl = url.substring(index);
Since I am using spring-security-2.0.5 the only way I can fix is by copying the class and modifying it in my project to override the one in the jar. I suppose in Spring 3.0 I will be able to create my own RedirectStrategy. I know this probably will only ever impact me but I hope it is worth fixing.
Thanks.</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.web.DefaultRedirectStrategy.java</file>
		</fixedFiles>
	</bug>
	<bug id="1396" opendate="2010-02-01 09:54:42" fixdate="2010-02-11 04:53:16" resolution="Fixed">
		<buginformation>
			<summary>Race condition between HttpSessionContextIntegrationFilter and SessionFixationProtectionFilter</summary>
			<description>There seems to be a race condition between processing in the HttpSessionContextIntegrationFilter and the SessionFixationProtectionFilter.
Here is our problem.
We have a web application with a fairly heavy home page that can be served quite slowly depending on the size of certain attributes associated with the user.  We are currently using Jetty 6.1.21 which supports HTTP 1.1 chunked responses.
If a user opens their browser and goes directly to the home page URL using a RememberMe token, this initial web request executes down through the filter stack and into the Spring MVC framework.  Steps 1a - 1d describe the processing of this initial request:
1a. The HttpSessionContextIntegration filter creates a new HttpSession and puts a default SecurityContext into the ThreadLocal handler.
1b. The RememberMeProcessingFilter authenticates the token and sets the user&amp;amp;apos;s Authentication object into the ThreadLocal handler.
1c. The SessionFixationProtectionFilter detects a new authentication, invalidates the existing HttpSession, and creates a new HttpSession (migrating the attributes).  It does not set the user&amp;amp;apos;s Authentication into the HttpSession  this is supposed to be done by the HttpSessionContextIntegration after all request processing is complete.
1d. The request goes into the Spring MVC framework, causing a response to start to be sent to the client using HTTP chunking.  This response includes the session id of the newly created session (created by the SessionFixationProtectionFilter).
The client begins receiving the markup, which includes various &amp;lt;script&amp;gt; elements to script files served by the web app.  Steps 2a - 2c describe the processing of this second request.  This processing takes place while the initial request is still being processed.  This second request sends over the session id created by the SessionFixationProtectionFilter for the first request.
2a. The HttpSessionContextIntegration puts a default SecurityContext into the ThreadLocal handler (since one has not yet been set into the HttpSession).
2b. The RememberMeProcessingFilter authenticates the token and sets the user&amp;amp;apos;s Authentication object into the ThreadLocal handler.
2c. The SessionFixationProtectionFilter detects another new authentication, invalidates the existing HttpSession, and creates a new HttpSession (migrating the attributes).
Processing of the initial web request is continuing through the Spring MVC framework.  We happen to use JSP for our view technology.
1e. Continued processing of a JSP page (or import) for the initial request causes an attempt to deference a variable, causing a IllegalStateException in Jetty&amp;amp;apos;s AbstractSessionManager.Session class.
I can "fix" this by extending the SessionFixationProtectionFilter and overriding 
protected void startNewSessionIfRequired(
        HttpServletRequest request, HttpServletResponse response)
{
    super.startNewSessionIfRequired(request, response);
    request.getSession().setAttribute(
            HttpSessionContextIntegrationFilter.SPRING_SECURITY_CONTEXT_KEY,
            SecurityContextHolder.getContext().getAuthentication());
}
so that the user&amp;amp;apos;s Authentication object is stored into the HttpSession before processing enters the Spring MVC framework, causing the execution of filters on the second request to not be considered a new authentication, thus preserving the validity of the session created during the initial request.
Is this the right way to do this?  It seems to keep session fixation protection working the way it is supposed to, but I&amp;amp;apos;m a little worried about what will happen with the OnRedirectUpdateSessionResponseWrapper created by the HttpSessionContextIntegrationFilter if the request processing results in a sendError() or sendRedirect().  My casual reading of HttpSessionContextIntegrationFilter seems to indicate it would still work correctly.
Any thoughts or advice would be appreciated.</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.web.session.SessionManagementFilter.java</file>
			<file type="M">org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper.java</file>
			<file type="M">org.springframework.security.web.context.HttpSessionSecurityContextRepository.java</file>
			<file type="M">org.springframework.security.config.http.HttpSecurityBeanDefinitionParserTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1450" opendate="2010-03-24 03:46:20" fixdate="2010-03-24 09:46:49" resolution="Fixed">
		<buginformation>
			<summary>Pointcuts are incorrectly evaluated in case of generic methods</summary>
			<description>Pointcut definitions are incorrectly evaluated if generic methods are used.
For example consider the following types:
interface IActionHandler&amp;lt;T extends AbstractAction&amp;gt; {
    int foo(T action);
}
class ConcreteActionHandler implements IActionHandler&amp;lt;ConcreteAction&amp;gt;  {
    public int foo(ConcreteAction action) 
{...}
}
The following pointcut definition used in "protect-pointcut" configuration will not match the ConcreteActionHandler#foo(...) call:
execution(* IActionHandler.foo(..))
The reason is the inappropriate resolving of "most specific method" in AbstractFallbackMethodDefinitionSource. The "most specific method" is resolved by the org.springframework.util.ClassUtils#getMostSpecificMethod(...) call, which does not resolve the Java 5 bridge methods! Bridge methods should not be considered at all when ConfigAttributeDefinition-s are figured out. The org.springframework.aop.support.AopUtils#getMostSpecificMethod(...) should be used instead of ClassUtils as it resolves bridge methods correctly.
The AopUtils should be used instead of ClassUtils in the following places:
Version 2.0.5 of SpringSecurity: org.springframework.security.intercept.method.AbstractFallbackMethodDefinitionSource line 116
Version 3.0.2 of SpringSecurity: org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource line 32
I have tested the version 2.0.5 - it works, when AopUtils is used instead of ClassUtils.
I have not tested the version 3.0.2 - the mentioned fix is just an assumption.</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.3, 3.1.0.M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource.java</file>
			<file type="M">org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParserTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1520" opendate="2010-07-20 04:47:16" fixdate="2010-07-22 22:41:27" resolution="Fixed">
		<buginformation>
			<summary>Enumerator not closed or fully-enumerated</summary>
			<description>1- SpringSecurityLdapTemplate.java, in compare (called by the LDAP password authenticator)
NamingEnumeration&amp;lt;SearchResult&amp;gt; results = ctx.search(dn, comparisonFilter, new Object[] 
{value}, ctls);
return Boolean.valueOf(results.hasMore());

should be more like this
NamingEnumeration&amp;lt;SearchResult&amp;gt; results = ctx.search(dn, comparisonFilter, new Object[] {value}
, ctls);
boolean rtn = Boolean.valueOf(results.hasMore());
try {
  results.close();
} catch (NamingException ignored) {
  // Ignore naming exception on close.
}
return rtn;
2- DefaultDirContextValidator.validateDirContext has a similar problem, but I think that class has been refactored or eliminated.</description>
			<version>2.0.5</version>
			<fixedVersion>3.1.0.M1, 3.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.ldap.SpringSecurityLdapTemplate.java</file>
			<file type="M">org.springframework.security.ldap.LdapUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="1532" opendate="2010-08-06 06:28:52" fixdate="2010-08-11 10:34:45" resolution="Complete">
		<buginformation>
			<summary>ProtectPointcutPostProcessor should not re-attempt to match the pointcuts against methods when used with prototype beans</summary>
			<description>In our web application we use spring security combining url security as well as method security using XML configuration only.
The webapp is being deployed on a stock Tomcat 6.0.29 using JDK6.

URL-security is configured using &amp;lt;sec:intercept-url /&amp;gt; tags only.


Method-security is configured using &amp;lt;sec:protect-pointcut /&amp;gt; tags only referencing a central Pointcuts-class. The pointcut class implements dummy methods being referenced in the method security XML configuration. The reason for doing so is to have descriptive names for the pointcut expressions. The pointcut expressions are being configured using @Pointcut annotations.

The URL- and method-security XML configuration files are seperate. We don&amp;amp;apos;t use any annotation based security configuration. We recognized a very slow bootstrap performance as well as a very poor runtime performance being caused by spring security. When disabling method-security performance is as expected.
The performance difference at bootstrap is about 30 sec with method-security enabled and about 6 sec with method-security disabled.
During runtime opening pages takes a couple seconds when method-security is enabled and only a fraction of a second with method-security disabled.
The performance difference is so huge and evident that we did not even make concrete performance measurements in order to quantize the difference.
During bootstrap we made random thread dumps recognizing the same pattern over and over where the main-Threads is stuck:
"main" prio=10 tid=0x080e1800 nid=0xbcc waiting on condition [0xb73e6000]
   java.lang.Thread.State: RUNNABLE
        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)

locked &amp;lt;0xa4000500&amp;gt; (a sun.misc.Launcher$AppClassLoader)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
locked &amp;lt;0xa4000500&amp;gt; (a sun.misc.Launcher$AppClassLoader)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1560)
locked &amp;lt;0xa4149438&amp;gt; (a org.apache.catalina.loader.WebappClassLoader)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1491)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)
        at org.aspectj.weaver.World.resolveToReferenceType(World.java:388)
        at org.aspectj.weaver.World.resolve(World.java:279)
        at org.aspectj.weaver.patterns.SimpleScope.lookupType(SimpleScope.java:57)
        at org.aspectj.weaver.bcel.AtAjAttributes$BindingScope.lookupType(AtAjAttributes.java:1680)
        at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInScope(WildTypePattern.java:716)
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName(WildTypePattern.java:703)
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:631)
        at org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:194)
        at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:131)
        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)
        at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:332)
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:310)
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:288)
        at org.springframework.security.intercept.method.ProtectPointcutPostProcessor.postProcessBeforeInitialization(ProtectPointcutPostProcessor.java:103)
        ...

During runtime load we also made thread dumps randomly recognized the same pattern where the request threads are being stuck. During runtime we have another problem that other http request are being blocked. This is a production no-go.
The blocking thread:
"http-8120-6" daemon prio=10 tid=0x08e1a000 nid=0x7912 waiting on condition [0x9a8ff000]
   java.lang.Thread.State: RUNNABLE
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)

locked &amp;lt;0xa3fab6c0&amp;gt; (a sun.misc.Launcher$ExtClassLoader)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:296)
locked &amp;lt;0xa3fab678&amp;gt; (a sun.misc.Launcher$AppClassLoader)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
locked &amp;lt;0xa3fab678&amp;gt; (a sun.misc.Launcher$AppClassLoader)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1560)
locked &amp;lt;0xa40cf610&amp;gt; (a org.apache.catalina.loader.WebappClassLoader)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1491)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)
        at org.aspectj.weaver.World.resolveToReferenceType(World.java:388)
        at org.aspectj.weaver.World.resolve(World.java:279)
        at org.aspectj.weaver.patterns.SimpleScope.lookupType(SimpleScope.java:57)
        at org.aspectj.weaver.bcel.AtAjAttributes$BindingScope.lookupType(AtAjAttributes.java:1680)
        at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInScope(WildTypePattern.java:716)
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName(WildTypePattern.java:703)
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:631)
        at org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:194)
        at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:131)
        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)
        at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:332)
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:310)
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:288)
        at org.springframework.security.intercept.method.ProtectPointcutPostProcessor.postProcessBeforeInitialization(ProtectPointcutPostProcessor.java:103)
        ...

The blocked threads:
"http-8120-5" daemon prio=10 tid=0x08e74c00 nid=0x7910 waiting for monitor entry [0x9a950000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)
        ...
"http-8120-4" daemon prio=10 tid=0x08e73000 nid=0x790f waiting for monitor entry [0x9a9a1000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        ...
"http-8120-3" daemon prio=10 tid=0x09325000 nid=0x790e waiting for monitor entry [0x9a9f2000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        ...
"http-8120-1" daemon prio=10 tid=0x093d8400 nid=0x3f18 waiting for monitor entry [0x9af95000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        ...
Please find attached a source code and configuration sample.
We found a couple places on the forums where the problem is being recognized but so far we did not find any JIRA issue.
Our current planned resolution is to avoid pointcut expressions for method-security at all. Instead we will use either annotations or the intercept-methods bean decorator and hope that performance increases. It would be nice though to use pointcut expressions.</description>
			<version>2.0.5</version>
			<fixedVersion>3.1.0.M1, 3.0.4</fixedVersion>
			<type>Defect</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.config.method.ProtectPointcutPostProcessor.java</file>
			<file type="M">org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.java</file>
		</fixedFiles>
	</bug>
	<bug id="1584" opendate="2010-10-04 04:33:41" fixdate="2010-10-27 09:41:22" resolution="Fixed">
		<buginformation>
			<summary>Path parameters should be stripped from pathInfo and servletPath before matching</summary>
			<description>RFC 2396 defines parameters which can occur in any of the path segments of a URL, after a semi-colon character. The servlet spec refers to these as "path parameters" and is not consistent on whether they should be removed from the decoded values returned by HttpServletRequest,getServletPath() and HttpServletRequest,getPathInfo(). As a result, different servlet containers treat the issue differently. Tomcat does not include path parameter values, but Websphere apparently does.
Path parameters should be removed before matching against a secured Ant path pattern (which uses the concatenated servletPath + pathInfo). They complicate the process of pattern matching and make it harder to account for all possible URL values which an attacker could submit. In practice they are rarely used within an application, though most users will be familiar with the addition of a jsessionid parameter to URLs. 
As an example, if an application defined a secured path as "/secure/*", then to account for the possibility of path parameters, the pattern would actually have to be "/secure/**", otherwise a path such as "/secure;x=y/file" could be used to bypass the match. In cases where a trailing wildcard is not used, it could be possible to add a parameter which caused a different match to take place. For example with this configuration:






&amp;lt;intercept-url path="*user.jsp" access="user" /&amp;gt;




&amp;lt;intercept-url path="/admin/**" access="admin" /&amp;gt; 






A user could potentially gain admin access by submitting a request to "/admin/securedFile.jsp;x=user.jsp".</description>
			<version>2.0.5</version>
			<fixedVersion>3.0.4, 2.0.6, 3.1.0.M2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.java</file>
			<file type="M">org.springframework.security.config.SecurityNamespaceHandler.java</file>
			<file type="M">org.springframework.security.config.Elements.java</file>
			<file type="M">org.springframework.security.config.debug.DebugFilter.java</file>
			<file type="M">org.springframework.security.config.FilterChainProxyConfigTests.java</file>
			<file type="M">org.springframework.security.web.FilterChainProxy.java</file>
		</fixedFiles>
	</bug>
	<bug id="2066" opendate="2012-10-16 14:40:46" fixdate="2012-11-09 12:41:10" resolution="Fixed">
		<buginformation>
			<summary>ConcurrentModificationException when intercepting method pointcut</summary>
			<description>A ConcurrentModificationException is thrown while intercepting a method pointcut. This seems to be on the same lines as the bug: https://jira.springsource.org/browse/SPR-5687






Stack trace:




java.util.ConcurrentModificationException




        at java.util.HashMap$AbstractMapIterator.checkConcurrentMod(HashMap.java:122)




        at java.util.HashMap$AbstractMapIterator.makeNext(HashMap.java:127)




        at java.util.HashMap$KeyIterator.next(HashMap.java:200)




        at org.aspectj.apache.bcel.util.NonCachingClassLoaderRepository$SoftHashMap.clear(NonCachingClassLoaderRepository.java:152)




        at org.aspectj.apache.bcel.util.NonCachingClassLoaderRepository.clear(NonCachingClassLoaderRepository.java:228)




        at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:223)




        at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations(ReflectionBasedResolvedMemberImpl.java:213)




        at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation(ReflectionBasedResolvedMemberImpl.java:169)




        at org.aspectj.weaver.JoinPointSignature.hasAnnotation(JoinPointSignature.java:82)




        at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:102)




        at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:96)




        at org.aspectj.weaver.patterns.SignaturePattern.matchesAnnotations(SignaturePattern.java:717)




        at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly(SignaturePattern.java:371)




        at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:319)




        at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:202)




        at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:134)




        at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch(PointcutExpressionImpl.java:239)




        at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:105)




        at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:96)




        at org.springframework.security.intercept.method.ProtectPointcutPostProcessor.attemptMatch(ProtectPointcutPostProcessor.java:118)




        at org.springframework.security.intercept.method.ProtectPointcutPostProcessor.postProcessBeforeInitialization(ProtectPointcutPostProcessor.java:106)




        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394)




        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1413)




        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.configureBean(AbstractAutowireCapableBeanFactory.java:315)




        at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:146)




        at org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect.configureBean(AnnotationBeanConfigurerAspect.aj:59)




        at org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect.ajc$before$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$1$e854fa65(AbstractDependencyInjectionAspect.aj:80)





</description>
			<version>2.0.5</version>
			<fixedVersion>3.2.0.M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.config.method.ProtectPointcutPostProcessor.java</file>
		</fixedFiles>
	</bug>
</bugrepository>