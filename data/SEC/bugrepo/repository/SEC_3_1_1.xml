<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SEC">
	<bug id="2020" opendate="2012-07-30 11:10:31" fixdate="2012-07-31 15:05:57" resolution="Fixed">
		<buginformation>
			<summary>Using http@authentication-manager-ref prevents authentication-manager@erase-credential from working</summary>
			<description>In






&amp;lt;sec:http realm="sample-realm" authentication-manager-ref="sampleAuthenticationManager"




      pattern="/sample"&amp;gt;




      &amp;lt;sec:intercept-url pattern="/sample/*" access="ROLE_ADMIN" /&amp;gt;




      &amp;lt;sec:http-basic /&amp;gt;




&amp;lt;/sec:http&amp;gt;









&amp;lt;sec:authentication-manager id="sampleAuthenticationManager" erase-credentials="false"&amp;gt;




    &amp;lt;sec:authentication-provider ref="sampleAuthenticationProvider" /&amp;gt;




&amp;lt;/sec:authentication-manager&amp;gt;






HttpSecurityBeanDefinitionParser wraps "sampleAuthenticationManager" inside a new instance but forgets to pass the value associated to "erase-credentials".






private BeanReference createAuthenticationManager(Element element, ParserContext pc,




            ManagedList&amp;lt;BeanReference&amp;gt; authenticationProviders) {




        String parentMgrRef = element.getAttribute(ATT_AUTHENTICATION_MANAGER_REF);




        BeanDefinitionBuilder authManager = BeanDefinitionBuilder.rootBeanDefinition(ProviderManager.class);




        authManager.addConstructorArgValue(authenticationProviders);









        if (StringUtils.hasText(parentMgrRef)) {




            authManager.addConstructorArgValue(new RuntimeBeanReference(parentMgrRef));




[...]






Credentials get always erased even with erase-credentials="false" in the parent.</description>
			<version>3.1.1</version>
			<fixedVersion>3.1.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="2016" opendate="2012-07-20 11:57:28" fixdate="2012-07-31 15:06:35" resolution="Fixed">
		<buginformation>
			<summary>LDAP-based unit tests for spring-security-config project fail</summary>
			<description>When I execute a Run As-&amp;gt;JUnit Test from the "spring-security-config" project off the master branch, 9 out of the 105 tests fail.  All of them fail in a similar manner; not able to find a DN in the embedded ApacheDS server.
When discussing on the forum, Rob W. added that "this is a problem that exists with the test setup in Eclipse. The issue has to do with having multiple *.ldif files available on the classpath."
Here&amp;amp;apos;s the stack trace:






org.springframework.ldap.NameNotFoundException: [LDAP: error code 32 - NO_SUCH_OBJECT: failed for SearchRequest




baseDn : &amp;amp;apos;0.9.2342.19200300.100.1.1=ben,2.5.4.11=people,0.9 .2342.19200300.100.1.25=springframework,0.9.2342.1 9200300.100.1.25=org&amp;amp;apos;




filter : &amp;amp;apos;(2.5.4.0=*)&amp;amp;apos;




scope : base object




typesOnly : false




Size Limit : no limit




Time Limit : no limit




Deref Aliases : deref Always




attributes :




: Attempt to search under non-existant entry: uid=ben,ou=people,dc=springframework,dc=org]; nested exception is javax.naming.NameNotFoundException: [LDAP: error code 32 - NO_SUCH_OBJECT: failed for SearchRequest




baseDn : &amp;amp;apos;0.9.2342.19200300.100.1.1=ben,2.5.4.11=people,0.9 .2342.19200300.100.1.25=springframework,0.9.2342.1 9200300.100.1.25=org&amp;amp;apos;




filter : &amp;amp;apos;(2.5.4.0=*)&amp;amp;apos;




scope : base object




typesOnly : false




Size Limit : no limit




Time Limit : no limit




Deref Aliases : deref Always




attributes :




: Attempt to search under non-existant entry: uid=ben,ou=people,dc=springframework,dc=org]; remaining name &amp;amp;apos;uid=ben,ou=people&amp;amp;apos;




at org.springframework.ldap.support.LdapUtils.convert LdapException(LdapUtils.java:174)




at org.springframework.ldap.core.LdapTemplate.execute WithContext(LdapTemplate.java:810)




at org.springframework.ldap.core.LdapTemplate.execute ReadOnly(LdapTemplate.java:793)




at org.springframework.ldap.core.LdapTemplate.lookup( LdapTemplate.java:834)




at org.springframework.security.config.ldap.LdapServe rBeanDefinitionParserTests.embeddedServerCreationC ontainsExpectedContextSourceAndData(LdapServerBean DefinitionParserTests.java:32)




at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method)




at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39)




at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25)




at java.lang.reflect.Method.invoke(Method.java:597)




at org.junit.runners.model.FrameworkMethod$1.runRefle ctiveCall(FrameworkMethod.java:44)




at org.junit.internal.runners.model.ReflectiveCallabl e.run(ReflectiveCallable.java:15)




at org.junit.runners.model.FrameworkMethod.invokeExpl osively(FrameworkMethod.java:41)




at org.junit.internal.runners.statements.InvokeMethod .evaluate(InvokeMethod.java:20)




at org.junit.internal.runners.statements.RunAfters.ev aluate(RunAfters.java:31)




at org.junit.runners.BlockJUnit4ClassRunner.runChild( BlockJUnit4ClassRunner.java:76)




at org.junit.runners.BlockJUnit4ClassRunner.runChild( BlockJUnit4ClassRunner.java:50)




at org.junit.runners.ParentRunner$3.run(ParentRunner. java:193)




at org.junit.runners.ParentRunner$1.schedule(ParentRu nner.java:52)




at org.junit.runners.ParentRunner.runChildren(ParentR unner.java:191)




at org.junit.runners.ParentRunner.access$000(ParentRu nner.java:42)




at org.junit.runners.ParentRunner$2.evaluate(ParentRu nner.java:184)




at org.junit.runners.ParentRunner.run(ParentRunner.ja va:236)




at org.eclipse.jdt.internal.junit4.runner.JUnit4TestR eference.run(JUnit4TestReference.java:50)




at org.eclipse.jdt.internal.junit.runner.TestExecutio n.run(TestExecution.java:38)




at org.eclipse.jdt.internal.junit.runner.RemoteTestRu nner.runTests(RemoteTestRunner.java:467)




at org.eclipse.jdt.internal.junit.runner.RemoteTestRu nner.runTests(RemoteTestRunner.java:683)




at org.eclipse.jdt.internal.junit.runner.RemoteTestRu nner.run(RemoteTestRunner.java:390)




at org.eclipse.jdt.internal.junit.runner.RemoteTestRu nner.main(RemoteTestRunner.java:197)




Caused by: javax.naming.NameNotFoundException: [LDAP: error code 32 - NO_SUCH_OBJECT: failed for SearchRequest




baseDn : &amp;amp;apos;0.9.2342.19200300.100.1.1=ben,2.5.4.11=people,0.9 .2342.19200300.100.1.25=springframework,0.9.2342.1 9200300.100.1.25=org&amp;amp;apos;




filter : &amp;amp;apos;(2.5.4.0=*)&amp;amp;apos;




scope : base object




typesOnly : false




Size Limit : no limit




Time Limit : no limit




Deref Aliases : deref Always




attributes :




: Attempt to search under non-existant entry: uid=ben,ou=people,dc=springframework,dc=org]; remaining name &amp;amp;apos;uid=ben,ou=people&amp;amp;apos;




at com.sun.jndi.ldap.LdapCtx.mapErrorCode(LdapCtx.jav a:3066)




at com.sun.jndi.ldap.LdapCtx.processReturnCode(LdapCt x.java:2987)




at com.sun.jndi.ldap.LdapCtx.processReturnCode(LdapCt x.java:2794)




at com.sun.jndi.ldap.LdapCtx.c_lookup(LdapCtx.java:10 11)




at com.sun.jndi.toolkit.ctx.ComponentContext.p_lookup (ComponentContext.java:526)




at com.sun.jndi.toolkit.ctx.PartialCompositeContext.l ookup(PartialCompositeContext.java:159)




at com.sun.jndi.toolkit.ctx.PartialCompositeContext.l ookup(PartialCompositeContext.java:148)




at javax.naming.InitialContext.lookup(InitialContext. java:392)




at org.springframework.ldap.core.LdapTemplate$10.exec uteWithContext(LdapTemplate.java:836)




at org.springframework.ldap.core.LdapTemplate.execute WithContext(LdapTemplate.java:807)




... 26 more 





</description>
			<version>3.1.1</version>
			<fixedVersion>3.1.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.config.ldap.LdapServerBeanDefinitionParserTests.java</file>
			<file type="M">org.springframework.security.config.ldap.LdapUserServiceBeanDefinitionParserTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="2017" opendate="2012-07-23 08:36:44" fixdate="2012-08-01 14:34:26" resolution="Fixed">
		<buginformation>
			<summary>ActiveDirectoryLdapAuthenticationProvider.doAuthentication() does not catch IncorrectResultSizeException</summary>
			<description>The mentioned method uses Spring LDAP Template to search for the given user in AD. However, if the given user does not exist at all in the directory, the template throws IncorrectResultSizeException and not NamingException, as expected.






Sample stack-trace in Tomcat:




org.springframework.dao.IncorrectResultSizeDataAccessException: Incorrect result size: expected 1, actual 0




	org.springframework.security.ldap.SpringSecurityLdapTemplate.searchForSingleEntryInternal(SpringSecurityLdapTemplate.java:239)




	org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProvider.searchForUser(ActiveDirectoryLdapAuthenticationProvider.java:258)




	org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProvider.doAuthentication(ActiveDirectoryLdapAuthenticationProvider.java:114)




	org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider.authenticate(AbstractLdapAuthenticationProvider.java:61)





</description>
			<version>3.1.1</version>
			<fixedVersion>3.1.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProviderTests.java</file>
			<file type="M">org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProvider.java</file>
		</fixedFiles>
	</bug>
	<bug id="2022" opendate="2012-08-01 15:29:48" fixdate="2012-08-02 07:55:21" resolution="Complete">
		<buginformation>
			<summary>sec:accesscontrollist hasPermission no longer supports list of values</summary>
			<description></description>
			<version>3.1.1</version>
			<fixedVersion>3.1.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.taglibs.authz.AccessControlListTagTests.java</file>
			<file type="M">org.springframework.security.taglibs.authz.AccessControlListTag.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">2023</link>
			<link type="Relate" description="is related to">1560</link>
		</links>
	</bug>
	<bug id="2023" opendate="2012-08-01 15:31:00" fixdate="2012-08-02 07:55:48" resolution="Fixed">
		<buginformation>
			<summary>sec:accesscontrollist hasPermission no longer supports integer bitmasks</summary>
			<description></description>
			<version>3.1.1</version>
			<fixedVersion>3.1.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.taglibs.authz.AccessControlListTagTests.java</file>
			<file type="M">org.springframework.security.taglibs.authz.AccessControlListTag.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">2022</link>
			<link type="Relate" description="is related to">1560</link>
		</links>
	</bug>
	<bug id="2027" opendate="2012-08-07 10:43:29" fixdate="2012-08-07 15:07:28" resolution="Complete">
		<buginformation>
			<summary>FilterChainProxy clearing context causes forwards to clear authentication from the session</summary>
			<description>SEC-1950 added a finally block to the FilterChainProxy doFilter method.
As a result, it seems that when attempting to render a model and view, the forward from tomcat (using 7.0.28) to get the JSP will be allowed.  However, when the SecurityContextPersistenceFilter calls saveContext from its doFilter method, the context is removed from the session as the context after chain execution now has a null authentication object.
With a second forward in place (using sitemesh) the attempt to get the decorator JSP is denied and the user is redirected back to the login page.
I debugged under eclipse, put a break point at the following:

doFilter in the security context persistence filter
wrapRequest (tomcat - ApplicationDispatcher) -&amp;gt; forward
save context (from the finally block of do filter of security context persistence filter)

Observed:

do filter is called, which then calls chain.doFilter to continue the chain after creating the session
wrap request is called (signalling the forward is occuring to get the jsp)
save context is then called which removes the context from the session as it now has a null authentication object

The next request is redirected back to the login page since no authentication attribute exists in the session.
Reverted to spring security 3.1.0 and things work fine.
I have a hard time believing that the change under SEC-1950 was implemented without attempting to render a single model and view, so this may be something funky about our application.  However, given that reverted to 3.1.0 allows everything to function correctly, I figured it was worth creating this issue.
Of note: our JSPs are located in our web application as opposed to statically served so they required authentication.  Perhaps this is abnormal configuration?</description>
			<version>3.1.1</version>
			<fixedVersion>3.1.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.security.web.FilterChainProxyTests.java</file>
			<file type="M">org.springframework.security.web.FilterChainProxy.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">1950</link>
		</links>
	</bug>
</bugrepository>