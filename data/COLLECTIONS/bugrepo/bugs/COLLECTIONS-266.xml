<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Nov 19 20:56:06 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/COLLECTIONS-266/COLLECTIONS-266.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[COLLECTIONS-266] Issue with MultiKey when serialized/deserialized via RMI</title>
                <link>https://issues.apache.org/jira/browse/COLLECTIONS-266</link>
                <project id="12310465" key="COLLECTIONS">Commons Collections</project>
                    <description>&lt;p&gt;This is because the hash code of MultiKey is calculated only once. &lt;/p&gt;

&lt;p&gt;So if the MultiKey is deserialized in an other jvm, and if one at least of the subkeys defines its hash code with System.identityHashCode() (for example all the enums does), then the hash code of the MultiKey is no longer valid, and you can&apos;t retreive the key in your Map.&lt;/p&gt;

&lt;p&gt;I fixed it by making the cached hash code field transient, and by recalculating the hash code during deserialization. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12378004">COLLECTIONS-266</key>
            <summary>Issue with MultiKey when serialized/deserialized via RMI</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jburet">Julien Buret</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Sep 2007 21:02:35 +0000</created>
                <updated>Sat, 7 Nov 2015 20:54:12 +0000</updated>
                            <resolved>Thu, 28 Feb 2013 19:57:14 +0000</resolved>
                                    <version>3.2</version>
                                    <fixVersion>3.2.2</fixVersion>
                    <fixVersion>4.0-alpha1</fixVersion>
                    <fixVersion>4.0</fixVersion>
                                    <component>KeyValue</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12526604" author="jburet" created="Tue, 11 Sep 2007 21:04:39 +0000"  >&lt;p&gt;Here is the updated source file.&lt;br/&gt;
Hope this help.&lt;/p&gt;</comment>
                            <comment id="12526860" author="bayard" created="Wed, 12 Sep 2007 17:21:09 +0000"  >&lt;p&gt;Julien&apos;s fix as a patch.&lt;/p&gt;</comment>
                            <comment id="12526862" author="bayard" created="Wed, 12 Sep 2007 17:24:02 +0000"  >&lt;p&gt;The patch seems good to me. Need to make a unit test and then apply.&lt;/p&gt;</comment>
                            <comment id="12526945" author="bayard" created="Wed, 12 Sep 2007 23:44:13 +0000"  >&lt;p&gt;While creating the test I realized that the use case that found this problem seems quite rare.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;MultiKey goes into Map.&lt;/li&gt;
	&lt;li&gt;Map gets sent through serialize/deserialize.&lt;/li&gt;
	&lt;li&gt;We have a new map, with a new multikey inside, with a new object inside that, and the multikey has based its hashCode on the old address of the object and not the new one.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you dig that object out of the map, and then use it to try and get itself back out of the map; then you&apos;ve got a problem. So definitely a bug of sorts.&lt;/p&gt;

&lt;p&gt;But how did you get access to the object in the first place? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In my unit test, I transfer the Map, then have to get the key back out of the map to then use in a get request. ie:&lt;/p&gt;

&lt;p&gt;        MultiKey mk2 = (MultiKey) map2.keySet().iterator().next();&lt;br/&gt;
        assertEquals(TWO, map2.get(mk2));&lt;/p&gt;

&lt;p&gt;I find that the test passes for both the old code and your new code. Any idea what I&apos;m doing differently?&lt;/p&gt;</comment>
                            <comment id="12526946" author="bayard" created="Wed, 12 Sep 2007 23:44:57 +0000"  >&lt;p&gt;Attaching the unit test.&lt;/p&gt;</comment>
                            <comment id="12527009" author="jburet" created="Thu, 13 Sep 2007 07:56:21 +0000"  >&lt;p&gt;I have updated the test and now it fails before the patch and is successful after.&lt;/p&gt;

&lt;p&gt;In the test, the hash code of KEY_266 depends of the current (simulated) JVM (like System.identityHashCode() ).  &lt;/p&gt;

&lt;p&gt;HTH&lt;/p&gt;</comment>
                            <comment id="12527307" author="bayard" created="Thu, 13 Sep 2007 23:15:35 +0000"  >&lt;p&gt;Thanks Julien.&lt;/p&gt;

&lt;p&gt;Digging into it, I was a bit confused by the isJVM1 flag as it makes both the deserialized object and the TEST_266 object have the same hashCode. Then I realized that&apos;s probably how enums work, so fits your use case above.&lt;/p&gt;

&lt;p&gt;I think this is a special case of a bigger and simpler unit test that uses the natural hashCode of the object (ie: same as System.identityHashCode). The current patch fails for that unit test. I&apos;ll attach the test for your thoughts.&lt;/p&gt;</comment>
                            <comment id="12527365" author="joehni" created="Fri, 14 Sep 2007 06:14:09 +0000"  >&lt;p&gt;IMHO the key simply violates the contract. Extract from Javadoc to Object.hashCode:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If two objects are equal according to the equals(Object)  method, then calling the hashCode method on each of the two objects must produce the same integer result&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It also states:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Without testing it, but if you use this key not as part of a MultiKey, but of a HashMap directly, you might get the same results.&lt;/p&gt;</comment>
                            <comment id="12527381" author="jburet" created="Fri, 14 Sep 2007 07:20:45 +0000"  >&lt;p&gt;For Joerg: Here is the code of equals() and hashCode() methods of class Enum in the sun 1.5 jvm:&lt;/p&gt;


&lt;p&gt;    public final boolean equals(Object other) &lt;/p&gt;
{ 
        return this==other;
    }

&lt;p&gt;    public final int hashCode() &lt;/p&gt;
{
        return System.identityHashCode(this);
    }

&lt;p&gt;I think (and I hope &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ) that the class Enum does not violate the hashCode contract - but you can see that the same enum will not have the same hashCode in two different jvms. The conclusion is : never serialize the hashCode (at least for a  modular class like MultiKey).&lt;/p&gt;

&lt;p&gt; And the HashMap will work fine in this case, because in its writeObject() and readObject() methods, the hashCode of each key is not serialized/deserialized: only the key, the value and the size of the map are serialized: It works, I have tested it.&lt;/p&gt;

&lt;p&gt;Sorry for the multiple edits, but what I would like is to underline this sentence of the hashCode contract :  &quot;This integer need not remain consistent from one execution of an application to another execution of the same application.&quot;&lt;/p&gt;
</comment>
                            <comment id="12527413" author="joehni" created="Fri, 14 Sep 2007 08:51:39 +0000"  >&lt;p&gt;Well, this problem with Enums has a history:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6421053&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6421053&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6373406&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6373406&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;However, in the end you&apos;re right and the hashCode should not have been stored in the MultiKey in this way. We might solve this by adding a readResolve method:&lt;/p&gt;

&lt;p&gt;  private Object readResolve() &lt;/p&gt;
{
      return new MultiKey(keys, false);
  }

&lt;p&gt;that way we create a new MultiKey with the correct hashCode. Your solution with the transient member will break the serialization compatibility, since you changed the binary layout. Therefore the hashCode member &lt;b&gt;must&lt;/b&gt; be serialized - otherwise you have to change also the serialVersionUID. But with a private calculateHashCode method and setting the hashCode member not to final, we can implement readResolve different:&lt;/p&gt;

&lt;p&gt;  private Object readResolve() &lt;/p&gt;
{
      calculateHashCode();
      return this;
  }

&lt;p&gt;But our clirr report may still choke about the final.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;J&#246;rg&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12527429" author="jburet" created="Fri, 14 Sep 2007 09:49:36 +0000"  >&lt;p&gt;If the final modifier is a problem, an other solution could be to add a transient field &quot;hashCode2&quot; and no longer use the old field &quot;hashCode &quot; in the class (just keep it for compatibility). &lt;/p&gt;

&lt;p&gt;There is no mention of the final keyword in the serialization spec about compatible or incompatible changes:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/platform/serialization/spec/version.html#5172&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/platform/serialization/spec/version.html#5172&lt;/a&gt; &lt;/p&gt;</comment>
                            <comment id="12527432" author="joehni" created="Fri, 14 Sep 2007 09:57:16 +0000"  >&lt;p&gt;Ah, well, the &quot;final&quot; modifier was meant as problem for binary compatibility itself, not for binary serialization compatibility &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12527440" author="jburet" created="Fri, 14 Sep 2007 10:12:51 +0000"  >&lt;p&gt;Ah ok &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Well then it should be ok: &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/binaryComp.doc.html#45154&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/docs/books/jls/second_edition/html/binaryComp.doc.html#45154&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12527984" author="scolebourne" created="Mon, 17 Sep 2007 08:30:42 +0000"  >&lt;p&gt;Serialization is actually quite clever. You can change a field to transient, and keep the same serialVersionUID without a problem IIRC. And in this case, it doesn&apos;t matter if the serialVersionUID is changed, as the current code is broken.&lt;/p&gt;</comment>
                            <comment id="12528508" author="bayard" created="Tue, 18 Sep 2007 18:56:00 +0000"  >&lt;p&gt;So... summarizing:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;We want it to remain broken for normal natural hashCodes, as not keeping those in line with the spec is broken.&lt;/li&gt;
	&lt;li&gt;We want to fix it for enums though, as they are special - and Julien&apos;s test case is good there because it models the specialness with the isJVM1 flag.&lt;/li&gt;
	&lt;li&gt;Use Julien&apos;s fix because the move to transient doesn&apos;t break compat.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Stephen/Joerg???&lt;/p&gt;</comment>
                            <comment id="12528687" author="joehni" created="Wed, 19 Sep 2007 08:10:05 +0000"  >&lt;p&gt;Patch to improve test case by simulating Enum behaviour.&lt;/p&gt;</comment>
                            <comment id="12528688" author="joehni" created="Wed, 19 Sep 2007 08:21:51 +0000"  >&lt;p&gt;1/ You cannot fix natural hash codes in general. It works for Enums since they use always the same instance in the same VM.&lt;br/&gt;
2/ I&apos;ve added a test case that does something similar ... I missed Julian&apos;s TC, but yes, that test would be sufficient also&lt;br/&gt;
3/ I had complaints against adding the &quot;transient&quot;. I can run the TestAllPackages suite though and I assume (although I did not find where) that it also contains compatibility tests for serialization, since there are such objects in the data/test directory. This would prove Stephen&apos;s comment right that Java serialization can deal with the situation  - at least in one direction. But I doubt it will work in the other direction i.e. an old version of CC can read such a serialized object. Therefore I&apos;d simply remove the final. And IMHO it matters if the serialVersionUID changes, since the current code is only broken for a special use case &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12596312" author="bayard" created="Tue, 13 May 2008 07:22:52 +0000"  >&lt;p&gt;Joerg - do you remember enough of this issue to put together a patch for your alternative fix?&lt;/p&gt;</comment>
                            <comment id="12596353" author="joehni" created="Tue, 13 May 2008 11:01:54 +0000"  >&lt;p&gt;I&apos;ve added a new patch that combines all changes for the main source and the test case.&lt;/p&gt;</comment>
                            <comment id="12601026" author="bayard" created="Fri, 30 May 2008 06:24:13 +0000"  >&lt;p&gt; svn ci -m &quot;Applying Joerg&apos;s final patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-266&quot; title=&quot;Issue with MultiKey when serialized/deserialized via RMI&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-266&quot;&gt;&lt;del&gt;COLLECTIONS-266&lt;/del&gt;&lt;/a&gt;, including the unit test that shows the problem and fixes the problem by making the hashcode transient, and moving the hashcode implementation such that it can be called from the deserialization as well as the hashcode method&quot; src&lt;/p&gt;

&lt;p&gt;Sending        src/java/org/apache/commons/collections/keyvalue/MultiKey.java&lt;br/&gt;
Sending        src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java&lt;br/&gt;
Transmitting file data ..&lt;br/&gt;
Committed revision 661577.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12861500">COLLECTIONS-576</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12381946" name="CC-266-final.patch" size="4495" author="joehni" created="Tue, 13 May 2008 11:01:54 +0000"/>
                            <attachment id="12365649" name="COLLECTIONS-266.patch" size="1910" author="bayard" created="Wed, 12 Sep 2007 17:21:09 +0000"/>
                            <attachment id="12365597" name="MultiKey.java" size="8952" author="jburet" created="Tue, 11 Sep 2007 21:04:39 +0000"/>
                            <attachment id="12365781" name="TestCollections266.java" size="2507" author="bayard" created="Thu, 13 Sep 2007 23:16:00 +0000"/>
                            <attachment id="12365700" name="TestCollections266.java" size="2842" author="jburet" created="Thu, 13 Sep 2007 07:56:21 +0000"/>
                            <attachment id="12365680" name="TestCollections266.java" size="2125" author="bayard" created="Wed, 12 Sep 2007 23:44:57 +0000"/>
                            <attachment id="12366160" name="collections-testcase-266.diff" size="2686" author="joehni" created="Wed, 19 Sep 2007 08:10:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 12 Sep 2007 17:21:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18734</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 26 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0sien:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164459</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>