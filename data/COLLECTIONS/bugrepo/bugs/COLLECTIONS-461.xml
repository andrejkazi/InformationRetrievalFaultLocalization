<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Nov 19 21:32:35 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/COLLECTIONS-461/COLLECTIONS-461.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[COLLECTIONS-461] splitmap.TransformedMap is not really a Map</title>
                <link>https://issues.apache.org/jira/browse/COLLECTIONS-461</link>
                <project id="12310465" key="COLLECTIONS">Commons Collections</project>
                    <description>&lt;p&gt;splitmap.TransformedMap is part of the Get/Put hierarchy, but it does not behave like a proper Java Map. &lt;/p&gt;

&lt;p&gt;In particular, java.util.Map.put(K, V) returns V.&lt;br/&gt;
However the collections Put interface returns Object.&lt;br/&gt;
As far as I can tell, this was done in order to be able to include TransformedMap in the hiearchy. But the side effect is to break the generics for all the non-transformer maps in the hierarchy.&lt;/p&gt;

&lt;p&gt;Maybe there should be a separate PutTransformed interface which has the appropriate generic types, i.e.&lt;/p&gt;

&lt;p&gt;public T put(K key, V value)&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12646188">COLLECTIONS-461</key>
            <summary>splitmap.TransformedMap is not really a Map</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sebb@apache.org">Sebb</reporter>
                        <labels>
                    </labels>
                <created>Mon, 6 May 2013 10:16:29 +0000</created>
                <updated>Sun, 9 Nov 2014 14:31:42 +0000</updated>
                            <resolved>Tue, 14 May 2013 20:02:40 +0000</resolved>
                                                    <fixVersion>4.0-alpha1</fixVersion>
                    <fixVersion>4.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13656472" author="mbenson" created="Mon, 13 May 2013 22:39:01 +0000"  >&lt;p&gt;What value would one return?&lt;/p&gt;</comment>
                            <comment id="13656484" author="tn" created="Mon, 13 May 2013 22:45:09 +0000"  >&lt;p&gt;I just tried it out myself, and it seems to work as expected:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        Map&amp;lt;Integer, String&amp;gt; map = new HashMap&amp;lt;Integer, String&amp;gt;();
        TransformedMap&amp;lt;Integer, Integer, String, String&amp;gt; mp = TransformedMap.transformingMap(map,
                new Transformer&amp;lt;Integer, Integer&amp;gt;() {

                    public Integer transform(Integer input) {
                        return input + 1;
                    }
            
                }, new Transformer&amp;lt;String, String&amp;gt;() {
                    
                    public String transform(String input) {
                        return &quot;value:&quot; + input;
                    }
                    
                });

        String old = mp.put(1, &quot;1&quot;);
        System.out.println(old);
        Put&amp;lt;Integer, String&amp;gt; put = mp;
        System.out.println(put);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13656488" author="mbenson" created="Mon, 13 May 2013 22:52:45 +0000"  >&lt;p&gt;Yes, but you didn&apos;t transform the keys and/or values to different &lt;b&gt;types&lt;/b&gt;.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13656497" author="tn" created="Mon, 13 May 2013 22:59:03 +0000"  >&lt;p&gt;well right, but this does not change anything:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        Map&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;String, String&amp;gt;();
        TransformedMap&amp;lt;Integer, String, Integer, String&amp;gt; mp = TransformedMap.transformingMap(map,
                new Transformer&amp;lt;Integer, String&amp;gt;() {

                    public String transform(Integer input) {
                        return String.valueOf(input + 1);
                    }
            
                }, new Transformer&amp;lt;Integer, String&amp;gt;() {
                    
                    public String transform(Integer input) {
                        return &quot;value:&quot; + input;
                    }
                    
                });

        String old = mp.put(1, 1);
        System.out.println(old);
        Put&amp;lt;Integer, Integer&amp;gt; put = mp;
        System.out.println(put);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I wanted to test is whether the put returns Object or the given type V, which it does &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13656508" author="mbenson" created="Mon, 13 May 2013 23:17:45 +0000"  >&lt;p&gt;Riight... I hadn&apos;t looked at this stuff in years.  &lt;tt&gt;TransformedMap&lt;/tt&gt; narrows the RT from &lt;tt&gt;Object&lt;/tt&gt; to return &lt;tt&gt;V&lt;/tt&gt; from &lt;tt&gt;#put(J, U)&lt;/tt&gt; and in that sense will never behave like a regular &lt;tt&gt;Map&lt;/tt&gt;--my point being that we don&apos;t know how to &quot;untransform&quot; the value back to the &lt;tt&gt;U&lt;/tt&gt; type.  Returning the value actually contained in the target map is the best we can do.  The proposed &lt;tt&gt;#putTransformed()&lt;/tt&gt; method would still suffer the same problem:  no way to get back to a &lt;tt&gt;U&lt;/tt&gt; type from the &lt;tt&gt;V&lt;/tt&gt; contained in the decorated &lt;tt&gt;Map&lt;/tt&gt;.  Is the issue that &lt;tt&gt;TransformedMap&lt;/tt&gt; is still named &amp;#42;Map?  It was my intent that placing it in the &lt;tt&gt;splitmap&lt;/tt&gt; subpackage would, along with &lt;a href=&quot;http://svn.apache.org/viewvc/commons/proper/collections/trunk/src/main/java/org/apache/commons/collections4/splitmap/package-info.java?view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/commons/proper/collections/trunk/src/main/java/org/apache/commons/collections4/splitmap/package-info.java?view=markup&lt;/a&gt;, make the intent clear: namely, that a &quot;split map&quot; is like a &quot;map&quot; but is really a combination of &lt;tt&gt;Get&lt;/tt&gt;/&lt;tt&gt;Put&lt;/tt&gt; with no guarantees as to the type assignability between the two.  This was the only approach I found at the time to allow the preservation of the functionality of &lt;tt&gt;TransformedMap&lt;/tt&gt; while also permitting it to be fully genericized.&lt;/p&gt;</comment>
                            <comment id="13656536" author="sebb@apache.org" created="Mon, 13 May 2013 23:42:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is the issue that TransformedMap is still named *Map?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, the problem here is that the &quot;real&quot; Map classes are compromised because Put#put(K, V) returns Object rather than V.&lt;br/&gt;
The Put interface is not exactly the same as the &quot;write&quot; subset of java.util.Map.&lt;/p&gt;</comment>
                            <comment id="13656547" author="mbenson" created="Mon, 13 May 2013 23:51:57 +0000"  >&lt;p&gt;I&apos;m still not connecting the dots as to how the &quot;real&quot; Maps are compromised.  &lt;tt&gt;TransformedMap&lt;/tt&gt; isn&apos;t a &lt;tt&gt;Map&lt;/tt&gt;.  It&apos;s not intended to be plugged in as one.  Rather, if you need to be agnostic to whether you have a &lt;tt&gt;Map&lt;/tt&gt; or a &lt;tt&gt;Put&lt;/tt&gt; and a &lt;tt&gt;Get&lt;/tt&gt;, you can program to the &lt;tt&gt;Put&lt;/tt&gt;/&lt;tt&gt;Get&lt;/tt&gt; APIs and use any of the &lt;tt&gt;IterableMap&lt;/tt&gt; impls provided by &lt;tt&gt;[collections]&lt;/tt&gt; to implement these as well.  By extending &lt;tt&gt;Map&lt;/tt&gt; and &lt;tt&gt;Put&lt;/tt&gt;, &lt;tt&gt;IterableMap&lt;/tt&gt; forces the RT of &lt;tt&gt;#put()&lt;/tt&gt; to be narrowed to &lt;tt&gt;V&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="13657116" author="sebb@apache.org" created="Tue, 14 May 2013 15:08:34 +0000"  >&lt;p&gt;Sorry, I cannot seem to find the problem myself either now. Not sure what triggered the original issue anymore.&lt;br/&gt;
As you write above, the fact that IterableMap extends Map as well as Put solves the problem of the return type (RT) from put().&lt;/p&gt;

&lt;p&gt;However, it is still the case that Put is not exactly a subset of Map. &lt;br/&gt;
Using Put rather than Map means that the RT of put() is Object and may have to be cast. &lt;br/&gt;
It would be better if this could be avoided.&lt;/p&gt;

&lt;p&gt;If Put cannot be fixed, then I think the Put#put() Javadoc needs to make this difference clear.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;Maybe the best would be to fix the Javadoc now, and adjust as necessary later.&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13657369" author="tn" created="Tue, 14 May 2013 18:49:23 +0000"  >&lt;p&gt;Ok to add the following note to the javadoc of Put:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; * NOTE: the &quot;write&quot; interface of a {@link Map} may have different types
 * compared to the &quot;read&quot; part, thus {@link #put(Object, Object)} must return
 * {@link Object} as the actual value type can not be determined.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13657403" author="mbenson" created="Tue, 14 May 2013 19:20:12 +0000"  >&lt;p&gt;Hrm... close, what about:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; * NOTE: in the original {@link Map} interface, {@link Map#put(Object, Object)} is known to have the same
 * return type as {@link Map#get(Object)}, namely {@code V}.  {@link Put} makes no assumptions in this
 * regard (there is no association with, nor even knowledge of, a &quot;reading&quot; interface) and thus defines
 * {@link #put(Object, Object)} as returning {@link Object}.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13657415" author="tn" created="Tue, 14 May 2013 19:38:43 +0000"  >&lt;p&gt;yes, much better, thanks!&lt;/p&gt;</comment>
                            <comment id="13657425" author="tn" created="Tue, 14 May 2013 20:02:40 +0000"  >&lt;p&gt;Applied in r1482544.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 13 May 2013 22:39:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>326546</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 27 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1kc3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>326891</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>