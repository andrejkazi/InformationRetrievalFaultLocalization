<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 17:51:54 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/COLLECTIONS-181/COLLECTIONS-181.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[COLLECTIONS-181] Provide maps with direct indexed access to the entries [PATCH]</title>
                <link>https://issues.apache.org/jira/browse/COLLECTIONS-181</link>
                <project id="12310465" key="COLLECTIONS">Commons Collections</project>
                    <description>&lt;p&gt;When I was implementing a new part of our large system I needed a sorted map,&lt;br/&gt;
where keys and corresponding values could also be accessed directly by index (as&lt;br/&gt;
in array or List). Both keyed and indexed access methods had to be efficient,&lt;br/&gt;
while insertions or removals needn&apos;t to be.&lt;br/&gt;
I was amazed to find absolutely no ready-to-use implementations, that&apos;s why I&lt;br/&gt;
decided to create my own.&lt;br/&gt;
I created a sorted map, which uses array as a backend storage. I borrowed some&lt;br/&gt;
internal implementation ideas from java.util.ArrayList, java.util.TreeMap and&lt;br/&gt;
org.apache.commons.collections.map.AbstractHashedMap and LinkedMap.&lt;br/&gt;
See attachment.&lt;br/&gt;
I hope you will find the idea useful.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: Windows XP&lt;br/&gt;
Platform: PC&lt;/p&gt;</environment>
        <key id="12341957">COLLECTIONS-181</key>
            <summary>Provide maps with direct indexed access to the entries [PATCH]</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="4" iconUrl="https://issues.apache.org/jira/images/icons/statuses/reopened.png" description="This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.">Reopened</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sergei_ivanov@vpost.ru">Sergei S. Ivanov</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Dec 2004 00:49:43 +0000</created>
                <updated>Mon, 8 Jun 2015 21:38:50 +0000</updated>
                                            <version>3.1</version>
                                    <fixVersion>4.x</fixVersion>
                                    <component>Map</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12408386" author="sergei_ivanov@vpost.ru" created="Thu, 23 Dec 2004 00:55:08 +0000"  >&lt;p&gt;Created an attachment (id=13827)&lt;br/&gt;
an archive of source and test files&lt;/p&gt;

&lt;p&gt;Attached are the java sources and test sources. I have already put the classes&lt;br/&gt;
into org.apache.commons.collections.** hierarchy. I also tried to follow code&lt;br/&gt;
conventions established in the collections package.&lt;/p&gt;

&lt;p&gt;Please also read implementation notes in README.TXT inside the archive.&lt;/p&gt;</comment>
                            <comment id="12408387" author="sergei_ivanov@vpost.ru" created="Thu, 23 Dec 2004 00:57:58 +0000"  >&lt;p&gt;For completeness, I also had in mind an implementation of SortedSet with indexed&lt;br/&gt;
access using the same technique (an array as a backend storage). If there&apos;s an&lt;br/&gt;
interest in this idea, I can spend some time in implementation.&lt;/p&gt;</comment>
                            <comment id="12408388" author="jwcarman" created="Thu, 19 May 2005 00:06:49 +0000"  >&lt;p&gt;Why doesn&apos;t ListOrderedMap fulfill your requirements?&lt;/p&gt;</comment>
                            <comment id="12408389" author="jwcarman" created="Thu, 19 May 2005 05:46:10 +0000"  >&lt;p&gt;I&apos;m going to go ahead and resolve this issue, since indexed access is provided&lt;br/&gt;
by the ListOrderedMap class.  If we want to add features to ListOrderedMap, we&lt;br/&gt;
can either re-open this issue to address those or create new issues.&lt;/p&gt;</comment>
                            <comment id="12408390" author="sergei_ivanov@vpost.ru" created="Thu, 19 May 2005 23:58:38 +0000"  >&lt;p&gt;Unfortunately, I cannot use ListOrderedMap in my application. ListOrderedMap&lt;br/&gt;
maintains the order, in which the keys were added, while SortedArrayMap provides&lt;br/&gt;
fast indexed access to the sorting order of the map (exactly what I need). Below&lt;br/&gt;
is an example that demonstrates the difference in behaviour:&lt;/p&gt;

&lt;p&gt;EXAMPLE CODE:&lt;/p&gt;

&lt;p&gt;        ListOrderedMap lom = new ListOrderedMap();&lt;br/&gt;
        lom.put(&quot;3&quot;, &quot;33&quot;);&lt;br/&gt;
        lom.put(&quot;1&quot;, &quot;11&quot;);&lt;br/&gt;
        lom.put(&quot;2&quot;, &quot;22&quot;);&lt;br/&gt;
        for (MapIterator iterator = lom.mapIterator(); iterator.hasNext()&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;
{
            iterator.next();
            System.out.println(&quot;Key: &quot; + iterator.getKey() + &quot;; Value: &quot; +
iterator.getValue());
        }
&lt;p&gt;        System.out.println(&quot;-----------------------&quot;);&lt;br/&gt;
        SortedArrayMap sam = new SortedArrayMap();&lt;br/&gt;
        sam.put(&quot;3&quot;, &quot;33&quot;);&lt;br/&gt;
        sam.put(&quot;1&quot;, &quot;11&quot;);&lt;br/&gt;
        sam.put(&quot;2&quot;, &quot;22&quot;);&lt;br/&gt;
        for (MapIterator iterator = sam.mapIterator(); iterator.hasNext()&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;
{
            iterator.next();
            System.out.println(&quot;Key: &quot; + iterator.getKey() + &quot;; Value: &quot; +
iterator.getValue());
        }

&lt;p&gt;EXAMPLE OUTPUT:&lt;/p&gt;

&lt;p&gt;Key: 3; Value: 33&lt;br/&gt;
Key: 1; Value: 11&lt;br/&gt;
Key: 2; Value: 22&lt;br/&gt;
-----------------------&lt;br/&gt;
Key: 1; Value: 11&lt;br/&gt;
Key: 2; Value: 22&lt;br/&gt;
Key: 3; Value: 33&lt;/p&gt;</comment>
                            <comment id="12408391" author="sergei_ivanov@vpost.ru" created="Fri, 20 May 2005 18:07:12 +0000"  >&lt;p&gt;A better example code would be:&lt;/p&gt;

&lt;p&gt;        ListOrderedMap lom = new ListOrderedMap();&lt;br/&gt;
        lom.put(&quot;3&quot;, &quot;33&quot;);&lt;br/&gt;
        lom.put(&quot;1&quot;, &quot;11&quot;);&lt;br/&gt;
        lom.put(&quot;2&quot;, &quot;22&quot;);&lt;br/&gt;
        for (int i = 0; i &amp;lt; lom.size(); i++) &lt;/p&gt;
{
            System.out.println(&quot;Key: &quot; + lom.get(i) + &quot;; Value: &quot; + lom
.getValue(i));
        }
&lt;p&gt;        System.out.println(&quot;-----------------------&quot;);&lt;br/&gt;
        SortedArrayMap sam = new SortedArrayMap();&lt;br/&gt;
        sam.put(&quot;3&quot;, &quot;33&quot;);&lt;br/&gt;
        sam.put(&quot;1&quot;, &quot;11&quot;);&lt;br/&gt;
        sam.put(&quot;2&quot;, &quot;22&quot;);&lt;br/&gt;
        for (int i = 0; i &amp;lt; sam.size(); i++) &lt;/p&gt;
{
            System.out.println(&quot;Key: &quot; + sam.getKey(i) + &quot;; Value: &quot; + sam
.getValue(i));
        }

&lt;p&gt;The output is the same as in the example above.&lt;/p&gt;</comment>
                            <comment id="12408392" author="sergei_ivanov@vpost.ru" created="Mon, 21 Nov 2005 07:54:43 +0000"  >&lt;p&gt;Created an attachment (id=17006)&lt;br/&gt;
an archive of revised source and test files&lt;/p&gt;

&lt;p&gt;I found time to clean up the implementation of the SortedArrayMap and also&lt;br/&gt;
implement additional features, like unmodifiable views and submap views.&lt;br/&gt;
With this submission, the implementation of the map becomes feature-complete,&lt;br/&gt;
no more inimplemented operations remain.&lt;br/&gt;
I invested a lot of efforts in proper unit testing, which also led to some&lt;br/&gt;
modifications of the original testing framework. Please find the modified&lt;br/&gt;
classes in a separate directory inside the archive and review them against the&lt;br/&gt;
base revision (3.1).&lt;br/&gt;
There are some additional notes in README.TXT file.&lt;/p&gt;</comment>
                            <comment id="12408393" author="gudnabrsam@yahoo.com" created="Tue, 14 Feb 2006 07:48:55 +0000"  >&lt;p&gt;(In reply to comment #0)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;SNIP&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; I created a sorted map, which uses array as a backend storage. I borrowed some&lt;br/&gt;
&amp;gt; internal implementation ideas from java.util.ArrayList, java.util.TreeMap and&lt;br/&gt;
&amp;gt; org.apache.commons.collections.map.AbstractHashedMap and LinkedMap.&lt;br/&gt;
&amp;gt; See attachment.&lt;br/&gt;
&amp;gt; I hope you will find the idea useful.&lt;/p&gt;

&lt;p&gt;ugh... borrowing from java.util reads like IP issues to me.  I can see that this&lt;br/&gt;
might be useful to implement from scratch.  Probably not too hard to clone&lt;br/&gt;
ListOrderedMap -&amp;gt; IndexedSortedMap (probably not extend as things like put(int,&lt;br/&gt;
Object, Object) would violate the SortedMap contract); search for proper index&lt;br/&gt;
on insertion...&lt;/p&gt;</comment>
                            <comment id="12408394" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 04:36:58 +0000"  >&lt;p&gt;Created an attachment (id=17693)&lt;br/&gt;
IndexedSortedMap cloned from ListOrderedMap&lt;/p&gt;</comment>
                            <comment id="12408395" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 04:38:01 +0000"  >&lt;p&gt;Created an attachment (id=17694)&lt;br/&gt;
IndexedSortedMap testcase&lt;/p&gt;

&lt;p&gt;Includes createOnDisk() method for canonical blah&lt;/p&gt;</comment>
                            <comment id="12408396" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 04:53:23 +0000"  >&lt;p&gt;Created an attachment (id=17695)&lt;br/&gt;
canonical empty&lt;/p&gt;</comment>
                            <comment id="12408397" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 04:53:50 +0000"  >&lt;p&gt;Created an attachment (id=17696)&lt;br/&gt;
canonical full&lt;/p&gt;</comment>
                            <comment id="12408398" author="sergei_ivanov@vpost.ru" created="Wed, 15 Feb 2006 09:56:58 +0000"  >&lt;p&gt;(In reply to comment #8)&lt;br/&gt;
&amp;gt; (In reply to comment #0)&lt;br/&gt;
&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;SNIP&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; &amp;gt; I created a sorted map, which uses array as a backend storage. I borrowed &lt;br/&gt;
some&lt;br/&gt;
&amp;gt; &amp;gt; internal implementation ideas from java.util.ArrayList, java.util.TreeMap &lt;br/&gt;
and&lt;br/&gt;
&amp;gt; &amp;gt; org.apache.commons.collections.map.AbstractHashedMap and LinkedMap.&lt;br/&gt;
&amp;gt; ugh... borrowing from java.util reads like IP issues to me.&lt;/p&gt;

&lt;p&gt;Well, I only borrowed some general ideas from JDK and tried to follow their &lt;br/&gt;
conventions for the method names in the collection interfaces (adapted methods &lt;br/&gt;
from interfaces List and ListIterator to the map implementation). I tried to &lt;br/&gt;
achieve name compatibility and consistency, which is hopefully not prosecuted &lt;br/&gt;
by IP law. The implementation is partly based on AbstractHashedMap and &lt;br/&gt;
HashedMap and the rest is created from scratch.&lt;/p&gt;

&lt;p&gt;&amp;gt; I can see that this&lt;br/&gt;
&amp;gt; might be useful to implement from scratch.  Probably not too hard to clone&lt;br/&gt;
&amp;gt; ListOrderedMap -&amp;gt; IndexedSortedMap (probably not extend as things like put&lt;br/&gt;
(int,&lt;br/&gt;
&amp;gt; Object, Object) would violate the SortedMap contract); search for proper &lt;br/&gt;
index&lt;br/&gt;
&amp;gt; on insertion...&lt;/p&gt;

&lt;p&gt;I can see the two implementations perfectly co-existing, like ListOrderedMap &lt;br/&gt;
and LinkedMap, where the former is a complete optimised implementation, while &lt;br/&gt;
the latter is a decorator, operating on the encapsulated List and SortedMap.&lt;/p&gt;</comment>
                            <comment id="12408399" author="sergei_ivanov@vpost.ru" created="Wed, 15 Feb 2006 09:58:53 +0000"  >&lt;p&gt;(From update of attachment 17006)&lt;br/&gt;
It would be a pity if all my effort goes to trash.&lt;/p&gt;</comment>
                            <comment id="12408400" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 23:38:01 +0000"  >&lt;p&gt;(In reply to comment #14)&lt;br/&gt;
&amp;gt; (From update of attachment 17006 &lt;span class=&quot;error&quot;&gt;&amp;#91;edit&amp;#93;&lt;/span&gt;)&lt;br/&gt;
&amp;gt; It would be a pity if all my effort goes to trash.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I interpreted your original statement to mean that you had looked at Sun source&lt;br/&gt;
in writing your original implementation, and so avoided even looking at your&lt;br/&gt;
code to avoid &quot;tainting myself&quot; any further than I am, having looked at the&lt;br/&gt;
occasional piece of Sun&apos;s API myself.  If your only contact with the Sun APIs&lt;br/&gt;
was the API itself, i.e. the javadoc, then there is obviously no IP issue.&lt;/p&gt;</comment>
                            <comment id="12408401" author="sergei_ivanov@vpost.ru" created="Thu, 16 Feb 2006 02:19:35 +0000"  >&lt;p&gt;Feel free to have a look at it. Please tell me if you suspect any copyright &lt;br/&gt;
issues after having read the code. I admit that the code may seem complicated, &lt;br/&gt;
but it is a complete, clean implementation, quite well optimised for compact &lt;br/&gt;
storage and fast lookups.&lt;/p&gt;</comment>
                            <comment id="12408402" author="gudnabrsam@yahoo.com" created="Thu, 16 Feb 2006 02:42:57 +0000"  >&lt;p&gt;(In reply to comment #16)&lt;br/&gt;
&amp;gt; Feel free to have a look at it. Please tell me if you suspect any copyright &lt;br/&gt;
&amp;gt; issues after having read the code. I admit that the code may seem complicated, &lt;br/&gt;
&amp;gt; but it is a complete, clean implementation, quite well optimised for compact &lt;br/&gt;
&amp;gt; storage and fast lookups.&lt;/p&gt;

&lt;p&gt;Without comparing your code against anything else, I couldn&apos;t suspect any&lt;br/&gt;
copyright issues in any event--except for the fact that I interpreted your&lt;br/&gt;
statement &quot;I borrowed some internal implementation ideas from&lt;br/&gt;
java.util.ArrayList, java.util.TreeMap...&quot; literally; i.e. to mean you had been&lt;br/&gt;
in Sun source files.&lt;/p&gt;</comment>
                            <comment id="12413906" author="sergei_ivanov" created="Wed, 31 May 2006 04:13:24 +0000"  >&lt;p&gt;The original version of the patch was developed against commons-collections 3.1.&lt;br/&gt;
Now 3.2 is the latest stable release and I updated the patched files accordingly.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12632983">COLLECTIONS-443</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12657774">COLLECTIONS-479</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12333298" name="ASF.LICENSE.NOT.GRANTED--IndexedSortedMap.emptyCollection.version3.2.obj" size="238" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 04:53:23 +0000"/>
                            <attachment id="12333299" name="ASF.LICENSE.NOT.GRANTED--IndexedSortedMap.fullCollection.version3.2.obj" size="591" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 04:53:50 +0000"/>
                            <attachment id="12333296" name="ASF.LICENSE.NOT.GRANTED--IndexedSortedMap.java" size="15482" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 04:36:58 +0000"/>
                            <attachment id="12333297" name="ASF.LICENSE.NOT.GRANTED--TestIndexedSortedMap.java" size="8412" author="gudnabrsam@yahoo.com" created="Wed, 15 Feb 2006 04:38:01 +0000"/>
                            <attachment id="12333295" name="ASF.LICENSE.NOT.GRANTED--indexed_map-1_1.zip" size="68109" author="sergei_ivanov@vpost.ru" created="Mon, 21 Nov 2005 07:54:43 +0000"/>
                            <attachment id="12333294" name="ASF.LICENSE.NOT.GRANTED--indexed_map.zip" size="19903" author="sergei_ivanov@vpost.ru" created="Thu, 23 Dec 2004 00:55:08 +0000"/>
                            <attachment id="12334800" name="indexed_map-1_1_1.zip" size="68325" author="sergei_ivanov" created="Wed, 31 May 2006 04:13:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32801</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 19 May 2005 00:06:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18818</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            10 years, 28 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0ftlb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>90392</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>