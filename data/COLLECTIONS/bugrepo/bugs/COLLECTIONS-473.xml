<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Nov 20 00:54:30 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/COLLECTIONS-473/COLLECTIONS-473.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[COLLECTIONS-473] AbstractCollectionDecorator.decorated() should not be used internally</title>
                <link>https://issues.apache.org/jira/browse/COLLECTIONS-473</link>
                <project id="12310465" key="COLLECTIONS">Commons Collections</project>
                    <description>&lt;p&gt;AbstractCollectionDecorator.decorated() is used internally to access the collection.&lt;br/&gt;
However, the method is not final, so subclasses could override it.&lt;/p&gt;

&lt;p&gt;Yet the field is also exposed (protected).&lt;/p&gt;

&lt;p&gt;This is inconsistent.&lt;/p&gt;

&lt;p&gt;Is there any use-case for overriding the collection to use a different one?&lt;br/&gt;
If so, having direct access as well is likely to cause problems.&lt;/p&gt;

&lt;p&gt;I think it would be better to use the field directly internally.&lt;br/&gt;
The class Javadoc says the calls are forwarded to the underlying collection, but that is not strictly true if decorated() is overridden.&lt;/p&gt;

&lt;p&gt;If it is intended to allow this to be overridden, then the field needs to be protected against arbitrary read/write access.&lt;/p&gt;

&lt;p&gt;The field should probably be made private with a setter for use by deserialization only.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12653286">COLLECTIONS-473</key>
            <summary>AbstractCollectionDecorator.decorated() should not be used internally</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sebb@apache.org">Sebb</reporter>
                        <labels>
                    </labels>
                <created>Mon, 17 Jun 2013 22:17:22 +0000</created>
                <updated>Sun, 9 Nov 2014 14:31:25 +0000</updated>
                            <resolved>Tue, 18 Jun 2013 20:29:17 +0000</resolved>
                                                    <fixVersion>4.0-alpha1</fixVersion>
                    <fixVersion>4.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13686497" author="tn" created="Tue, 18 Jun 2013 08:28:30 +0000"  >&lt;p&gt;Subclasses do override it to return the actual collection type they are decorating, look at AbstractBagDecorator for example, it returns a Bag instead of a Collection. Otherwise you would have to cast every result of decorated().&lt;/p&gt;

&lt;p&gt;Also I do not think this classifies as a bug, the purpose of the abstract classes is to simplify the implementation of various decorators and not to safe-guard for anything another developer could do with them. In fact somebody could also alter the fields via reflection.&lt;/p&gt;</comment>
                            <comment id="13686544" author="sebb@apache.org" created="Tue, 18 Jun 2013 10:04:40 +0000"  >&lt;p&gt;Replacing &quot;collection&quot; with &quot;decorated()&quot; in sub-classes does not affect the casting issue as they are both of type Collection&amp;lt;E&amp;gt;.&lt;/p&gt;

&lt;p&gt;The problem with allowing direct access is that a grand-child sub-class can accidentally subvert a child sub-class.&lt;/p&gt;

&lt;p&gt;For example, if one wanted to create a logging layer, it could not guarantee that all sub-class accesses were logged.&lt;/p&gt;

&lt;p&gt;It would also potentially allow the field to be made final later, by suitable changes to the deserialisation.&lt;/p&gt;

&lt;p&gt;Exposing the field now means it &lt;b&gt;cannot later be hidden&lt;/b&gt; whilst maintaining compatibility.&lt;/p&gt;

&lt;p&gt;Hiding the field provides several benefits; any down-sides seem to me to be very minor in comparison.&lt;/p&gt;

&lt;p&gt;It will still be possible to deliberately subvert the class via reflection, but at least casual misuse is avoided.&lt;/p&gt;</comment>
                            <comment id="13687042" author="tn" created="Tue, 18 Jun 2013 18:30:17 +0000"  >&lt;p&gt;As decorated() is not final, sub-classes can alter the return type as in AbstractBagDecorator, thus avoiding the necessity to cast. Changing this does not make sense imho.&lt;/p&gt;

&lt;p&gt;Hiding the collection field and creating a protected setter for de-serialization support would be ok, but would require the effort to change of course.&lt;/p&gt;</comment>
                            <comment id="13687124" author="sebb@apache.org" created="Tue, 18 Jun 2013 20:05:13 +0000"  >&lt;p&gt;Yes, classes could override decorated() to change the return type; that&apos;s exactly what the AbstractBagDecorator and AbstractSortedBagDecorator sub-classes do; they don&apos;t access collection directly at all. I&apos;m just suggesting that the rest of the classes behave the same way, at least as far as not accessing collections directly.&lt;/p&gt;

&lt;p&gt;Since the overload decorated() method should make it easier for subclasses, that seems like a good idea.&lt;/p&gt;

&lt;p&gt;I&apos;m happy to make the changes, but I don&apos;t want to do it if they will then need to be reverted.&lt;/p&gt;

&lt;p&gt;==&lt;/p&gt;

&lt;p&gt;What about the main point of this JIRA, i.e. using collection internally rather than decorated()?&lt;br/&gt;
Is that OK to change?&lt;/p&gt;</comment>
                            <comment id="13687135" author="tn" created="Tue, 18 Jun 2013 20:11:57 +0000"  >&lt;p&gt;I have already done the changes in r1494280:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;made the collection field private&lt;/li&gt;
	&lt;li&gt;added a protected setter with javadoc stating that it should only be used for de-serialization&lt;/li&gt;
	&lt;li&gt;updated all other decorators to the the getters/setters instead of the plain field.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Is it ok like that?&lt;/p&gt;</comment>
                            <comment id="13687141" author="sebb@apache.org" created="Tue, 18 Jun 2013 20:22:36 +0000"  >&lt;p&gt;Yes, thanks; that makes it more future proof.&lt;/p&gt;

&lt;p&gt;I think it&apos;s odd that the class uses decorated() internally, but the Javadoc does say so, so I guess it needs to remain the way it is.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 18 Jun 2013 08:28:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>333609</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 22 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ljsn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>333937</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>