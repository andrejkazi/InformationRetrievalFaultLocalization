<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 15:01:17 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATAMONGO-218/DATAMONGO-218.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATAMONGO-218] Adding of custom simple types is not easy</title>
                <link>https://jira.spring.io/browse/DATAMONGO-218</link>
                <project id="10701" key="DATAMONGO">Spring Data MongoDB</project>
                    <description>&lt;p&gt;I would like to use some Objects as simple property (a DateTime from joda time for example).&lt;/p&gt;

&lt;p&gt;If used as is, the DateTime object is serialized to DBObject with a ISOChronology and millis, but this one cannot be deserialized as the ISOChronology has no public constructor and must be used through statifc factory methods.&lt;/p&gt;

&lt;p&gt;Then I add some custom converters (one from DateTime to Date and the revert one for deserialization)&lt;/p&gt;

&lt;p&gt;When I add the Date to DateTime for deserialization, some strange behaviour happens as DateTime object seems to be given directly to mongodb driver (or perharps DateTime object is converted to Date the converted to DateTime)&lt;/p&gt;

&lt;p&gt;java.lang.IllegalArgumentException: can&apos;t serialize class org.joda.time.DateTime&lt;br/&gt;
	at org.bson.BSONEncoder._putObjectField(BSONEncoder.java:213)&lt;br/&gt;
	at org.bson.BSONEncoder.putObject(BSONEncoder.java:123)&lt;br/&gt;
	at org.bson.BSONEncoder._putObjectField(BSONEncoder.java:173)&lt;br/&gt;
	at org.bson.BSONEncoder.putObject(BSONEncoder.java:137)&lt;br/&gt;
	at org.bson.BSONEncoder._putObjectField(BSONEncoder.java:173)&lt;br/&gt;
	at org.bson.BSONEncoder.putObject(BSONEncoder.java:123)&lt;br/&gt;
	at org.bson.BSONEncoder.putObject(BSONEncoder.java:69)&lt;br/&gt;
	at com.mongodb.OutMessage.putObject(OutMessage.java:189)&lt;br/&gt;
	at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:246)&lt;br/&gt;
	at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:210)&lt;br/&gt;
	at com.mongodb.DBCollection.insert(DBCollection.java:64)&lt;br/&gt;
	at com.mongodb.DBCollection.save(DBCollection.java:622)&lt;br/&gt;
	at com.mongodb.DBCollection.save(DBCollection.java:597)&lt;br/&gt;
	at org.springframework.data.document.mongodb.MongoTemplate$11.doInCollection(MongoTemplate.java:891)&lt;br/&gt;
	at org.springframework.data.document.mongodb.MongoTemplate.execute(MongoTemplate.java:363)&lt;br/&gt;
	at org.springframework.data.document.mongodb.MongoTemplate.saveDBObject(MongoTemplate.java:886)&lt;br/&gt;
	at org.springframework.data.document.mongodb.MongoTemplate.doSave(MongoTemplate.java:819)&lt;br/&gt;
	at org.springframework.data.document.mongodb.MongoTemplate.save(MongoTemplate.java:808)&lt;br/&gt;
	at org.springframework.data.document.mongodb.MongoTemplate.save(MongoTemplate.java:797)&lt;/p&gt;


&lt;p&gt;Adding a custom simple type to MongoMappingContext does not change this behaviour.&lt;/p&gt;

&lt;p&gt;As I can see, when a simple property is serialized, no targetType is defined, so the first converter found with the source type is used.&lt;/p&gt;

&lt;p&gt;I think this algorithm should be refined.&lt;/p&gt;

&lt;p&gt;In the getCustomTarget(Class&amp;lt;?&amp;gt;, Class&amp;lt;?&amp;gt;) of AbstractMongoConverter,&lt;/p&gt;

&lt;p&gt;when no targetType is defined, you should see first if a custom converter from the source type to one of the MONGO_TYPE element is defined, as below&lt;/p&gt;

&lt;p&gt;            if (expectedTargetType != null) {&lt;br/&gt;
                for (ConvertiblePair typePair : customTypeMapping) {&lt;br/&gt;
                    if (typePair.getSourceType().isAssignableFrom(source)) {&lt;/p&gt;

&lt;p&gt;                        Class&amp;lt;?&amp;gt; targetType = typePair.getTargetType();&lt;/p&gt;

&lt;p&gt;                        if (targetType.equals(expectedTargetType)) &lt;/p&gt;
{ 
                            return targetType; 
                        }
&lt;p&gt;                    }&lt;br/&gt;
                }&lt;br/&gt;
            } else {&lt;br/&gt;
                for (Class&amp;lt;?&amp;gt; expectedType : MONGO_TYPES) {&lt;br/&gt;
                    for (ConvertiblePair typePair : customTypeMapping) {&lt;br/&gt;
                        if (typePair.getSourceType().isAssignableFrom(source)) {&lt;/p&gt;

&lt;p&gt;                            Class&amp;lt;?&amp;gt; targetType = typePair.getTargetType();&lt;/p&gt;

&lt;p&gt;                            if (targetType.equals(expectedType)) &lt;/p&gt;
{ 
                                return targetType; 
                            }
&lt;p&gt;                        }&lt;br/&gt;
                    }&lt;br/&gt;
                }&lt;br/&gt;
            }&lt;/p&gt;</description>
                <environment>Windows 6.1 SP1&lt;br/&gt;
java 1.6.0_25</environment>
        <key id="40507">DATAMONGO-218</key>
            <summary>Adding of custom simple types is not easy</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="olivergierke">Oliver Gierke</assignee>
                                    <reporter username="amahier">Alain Mahier</reporter>
                        <labels>
                    </labels>
                <created>Mon, 25 Jul 2011 09:30:22 +0000</created>
                <updated>Mon, 25 Mar 2013 09:31:17 +0000</updated>
                            <resolved>Mon, 22 Aug 2011 09:39:59 +0000</resolved>
                                    <version>1.0 M3</version>
                                    <fixVersion>1.0 M4</fixVersion>
                                    <component>Mapping</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                    <timeoriginalestimate seconds="0">0d</timeoriginalestimate>
                            <timeestimate seconds="0">0d</timeestimate>
                                        <comments>
                            <comment id="71816" author="olivergierke" created="Thu, 28 Jul 2011 06:52:52 +0000"  >&lt;p&gt;I&apos;d argue the same way as for &lt;a href=&quot;https://jira.spring.io/browse/DATAMONGO-223&quot; title=&quot;Registering of customSimpleTypes should be available through the mongo namespace of spring-data-mongodb&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DATAMONGO-223&quot;&gt;&lt;del&gt;DATAMONGO-223&lt;/del&gt;&lt;/a&gt;. You shouldn&apos;t really bother with custom simple types at all (unless we find some compelling reason to do so but lets discuss this in the referenced ticket). The primary API for you developers should be the &lt;tt&gt;Converter&lt;/tt&gt; API. If there&apos;s something not working with it, we should fix it on that level I think.&lt;/p&gt;

&lt;p&gt;Please try a current snapshot version. All the conversion stuff has been under major overhaul since M3 release.&lt;/p&gt;</comment>
                            <comment id="71880" author="amahier" created="Mon, 22 Aug 2011 04:51:45 +0000"  >&lt;p&gt;In the current build, the simple custom types are managed without any specific configuration. It&apos;s clearly what I need&lt;/p&gt;

&lt;p&gt;This ticket can be close.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="40491">DATAMONGO-223</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 28 Jul 2011 06:52:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29768</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04zkv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29138</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24078</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>