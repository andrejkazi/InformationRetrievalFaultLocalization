<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 15:24:39 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATAMONGO-1287/DATAMONGO-1287.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATAMONGO-1287] MappingMongoConverter eagerly fetches and converts lazy DbRef to change them afterwards by proxies</title>
                <link>https://jira.spring.io/browse/DATAMONGO-1287</link>
                <project id="10701" key="DATAMONGO">Spring Data MongoDB</project>
                    <description>&lt;p&gt;The problem occurs whenever an association against a document contains an annotation &lt;tt&gt;@DBRef(lazy=true)&lt;/tt&gt; , AND this association is defined as a parameter in the constructor of the parent document.&lt;br/&gt;
If the association is not defined as a parameter in the constructor everything works fine because &lt;tt&gt;MappingMongoConverter&lt;/tt&gt; will use an instance of &lt;tt&gt;ConvertingPropertyAccessor&lt;/tt&gt; to inject those proxies where needed later, in the &quot;associations&quot; phase.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;MappingMongoConverter.read(MongoPersistentEntity&amp;lt;S&amp;gt;, DBObject, ObjectPath)&lt;/tt&gt; creates a &lt;tt&gt;MongoDbPropertyValueProvider&lt;/tt&gt; which is passed as a parameter to the &lt;tt&gt;EntityInstantiator&lt;/tt&gt; in order to load and convert the constructor parameters of each document. These constructor parameters are retrieved in the &lt;tt&gt;EntityInstantiator&lt;/tt&gt; one by one through &lt;tt&gt;MongoDbPropertyValueProvider&lt;/tt&gt;&apos;s method &lt;tt&gt;getParameterValue(Parameter)&lt;/tt&gt;, if the parameter does not have any SpEL expression the call flow  goes down to &lt;tt&gt;MongoDbPropertyValueProvider.getPropertyValue(MongoPersistentProperty)&lt;/tt&gt; which will use &lt;tt&gt;MappingMongoConverter.readValue(Object, TypeInformation&amp;lt;?&amp;gt;, ObjectPath)&lt;/tt&gt; to retrieve the value of the parameter, BUT this method ALWAYS resolves the DBRef (no matter if it&apos;s lazy or not).&lt;/p&gt;

&lt;p&gt;The issue is not visible by inspecting the returned object because the &quot;association phase&quot; in &lt;tt&gt;MappingMongoConverter.read(MongoPersistentEntity&amp;lt;S&amp;gt;, DBObject, ObjectPath)&lt;/tt&gt; does not skip association properties already set before, and thus it fetches and converts AGAIN DBRef and sets proxies to lazy DBRef properties already resolved making the bug &quot;invisible&quot;.&lt;/p&gt;</description>
                <environment></environment>
        <key id="65875">DATAMONGO-1287</key>
            <summary>MappingMongoConverter eagerly fetches and converts lazy DbRef to change them afterwards by proxies</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cstrobl">Christoph Strobl</assignee>
                                    <reporter username="jllachf">Jordi Llach Fernandez</reporter>
                        <labels>
                            <label>performance</label>
                    </labels>
                <created>Wed, 16 Sep 2015 23:10:02 +0000</created>
                <updated>Fri, 18 Dec 2015 10:14:27 +0000</updated>
                            <resolved>Fri, 20 Nov 2015 12:39:47 +0000</resolved>
                                                    <fixVersion>1.8.2 (Gosling SR2)</fixVersion>
                    <fixVersion>1.9 M1 (Hopper)</fixVersion>
                    <fixVersion>1.7.3 (Fowler SR3)</fixVersion>
                                    <component>Mapping</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="119480" author="jllachf" created="Wed, 16 Sep 2015 23:11:41 +0000"  >&lt;p&gt;I found this issue when preparing the tests for &lt;a href=&quot;https://jira.spring.io/browse/DATAMONGO-1271&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://jira.spring.io/browse/DATAMONGO-1271&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="121724" author="cstrobl" created="Thu, 19 Nov 2015 12:46:11 +0000"  >&lt;p&gt;good catch &lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=jllachf&quot; class=&quot;user-hover&quot; rel=&quot;jllachf&quot;&gt;Jordi Llach Fernandez&lt;/a&gt;. Thanks!&lt;/p&gt;</comment>
                            <comment id="121747" author="jllachf" created="Fri, 20 Nov 2015 15:23:37 +0000"  >&lt;p&gt;Hi Christoph,&lt;br/&gt;
I could be wrong and haven&apos;t got much time to take a deeper look at &lt;a href=&quot;https://github.com/spring-projects/spring-data-mongodb/pull/335/commits&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-data-mongodb/pull/335/commits&lt;/a&gt;  but I think that ONLY one bug is solved, to me any DBRef(lazy=true)  in the constructor is still eagerly fetched/resolved. &lt;/p&gt;

&lt;p&gt;And by the way I think that this bug is the reason why in &lt;a href=&quot;https://jira.spring.io/browse/DATAMONGO-1332&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://jira.spring.io/browse/DATAMONGO-1332&lt;/a&gt; a stackoverflow error is thrown no matter if DBRefs are lazy or not because both are eagerly fetched.&lt;/p&gt;


&lt;p&gt;J&lt;/p&gt;</comment>
                            <comment id="121752" author="jllachf" created="Fri, 20 Nov 2015 17:13:09 +0000"  >&lt;p&gt;When DBRef(lazy=true) are resolved in &lt;tt&gt;ReflectionEntityInstantiator&lt;/tt&gt; NONE of the possible &lt;tt&gt;ParameterValueProvider&lt;/tt&gt; received knows how to deal with lazy DBRref.&lt;br/&gt;
In my case the call flow ends in &lt;tt&gt;PersistentEntityParameterValueProvider&lt;/tt&gt; which in turn uses &lt;tt&gt;MappingMongoConverter$MongoDbPropertyValueProvider&lt;/tt&gt;, which in turn delegates to &lt;tt&gt;MappingMongoConverter.readValue(Object value, TypeInformation&amp;lt;?&amp;gt; type, ObjectPath path)&lt;/tt&gt; whom by calling &lt;tt&gt;potentiallyReadOrResolveDbRef&lt;/tt&gt; eagerly resolves the &lt;tt&gt;DBRef&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The point is that &lt;tt&gt;DefaultDbRefResolver&lt;/tt&gt; class used in the association phase performed by &lt;tt&gt;MappingMongoConverter&lt;/tt&gt; is the only one who knows how to deal with DbRef(lazy=true)&lt;/p&gt;

&lt;p&gt;That&apos;s the reason why in my PR I modified how the &lt;tt&gt;ParameterValueProvider&lt;/tt&gt; is built in &lt;tt&gt;MappingMongoConverter&lt;/tt&gt;&apos;s method &lt;tt&gt;getParameterProvider(MongoPersistentEntity entity, DBObject source, DefaultSpELExpressionEvaluator evaluator, ObjectPath path)&lt;/tt&gt; in order to build a specialized &lt;tt&gt;MongoDbPropertyValueProvider&lt;/tt&gt; which by default does not deal with DBRef(lazy=true)&lt;/p&gt;</comment>
                            <comment id="121754" author="jllachf" created="Fri, 20 Nov 2015 18:34:01 +0000"  >&lt;p&gt;Another thing that is banging my head is how you avoid the double fetch of NON lazy DBRef &lt;/p&gt;

&lt;p&gt;   &lt;blockquote&gt;&lt;p&gt; if (value == null|| (entity.getPersistenceConstructor().hasParameters() &amp;amp;&amp;amp; entity.isConstructorArgument(property) &lt;br/&gt;
       &amp;amp;&amp;amp; accessor.getProperty(property) != null))  return&lt;/p&gt;&lt;/blockquote&gt;;&lt;/p&gt;


&lt;p&gt;Why are you checking if the property is there with the  object &lt;tt&gt;accessor&lt;/tt&gt; ? In the worst case the code will try to fetch again a DBRef pointing nowhere already dealt by the entity instantiator&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="121775" author="cstrobl" created="Mon, 23 Nov 2015 07:01:02 +0000"  >&lt;p&gt;thanks &lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=jllachf&quot; class=&quot;user-hover&quot; rel=&quot;jllachf&quot;&gt;Jordi Llach Fernandez&lt;/a&gt; true - totally overlooked the fact with the accessor - removing the accessor seems to be a good idea.&lt;br/&gt;
Concerning usage of lazy dbref as a constructor arg, I stronlgly think that those should be fetched eagerly in any case or just not be used within the constructor. I&apos;ll check &lt;a href=&quot;https://jira.spring.io/browse/DATAMONGO-1332&quot; title=&quot;StackOverflowError when two documents refer to each other&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DATAMONGO-1332&quot;&gt;DATAMONGO-1332&lt;/a&gt; as well to see what happens there. &lt;/p&gt;</comment>
                            <comment id="121777" author="jllachf" created="Mon, 23 Nov 2015 08:59:56 +0000"  >&lt;p&gt;About the usage of lazy dbref as a constructor arg, that decision is up to the SpringData team for sure, but I encourage you to add a side note about it to the docs.&lt;br/&gt;
I am quite sure that other devs like me assume that their usage in constructors is fine(do not involve eagerly fetching)&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10150">
                    <name>Depend</name>
                                                                <inwardlinks description="is depended on by">
                                        <issuelink>
            <issuekey id="65188">DATAMONGO-1271</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="66764">DATAMONGO-1319</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 19 Nov 2015 12:46:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>olivergierke</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10684" key="com.atlassian.jira.plugin.system.customfieldtypes:url">
                        <customfieldname>Pull Request URL</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[https://github.com/spring-projects/spring-data-mongodb/pull/335]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i08rnr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10480" key="com.pyxis.greenhopper.jira:gh-sprint">
                        <customfieldname>Sprint</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="105">Hopper M1</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>