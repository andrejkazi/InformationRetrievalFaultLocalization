<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATAMONGO">
	<bug id="458" opendate="2012-06-07 01:18:27" fixdate="2012-06-08 04:04:08" resolution="Fixed">
		<buginformation>
			<summary>When reading back empty collections unmodifiable instances of Collections.emptyList/Set is returned.</summary>
			<description>When reading back a document stored with an empty collection, e.g:
  private Set&amp;lt;ClusterId&amp;gt; clusters = new HashSet&amp;lt;ClusterId&amp;gt;();
The driver deserializes this into a instance of Collections.emptySet, thus causing UnsupportedOperation exception when modifying.
</description>
			<version>1.1 M1</version>
			<fixedVersion>1.1 M2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverter.java</file>
		</fixedFiles>
	</bug>
	<bug id="493" opendate="2012-07-24 09:58:49" fixdate="2012-07-24 11:46:11" resolution="Fixed">
		<buginformation>
			<summary>Criteria.ne() method converts all value into ObjectId</summary>
			<description>The QueryMapper.getMappedObject() converts all $ne criterion value into ObjectId.
Fix : Test for id key like $in criterion</description>
			<version>1.1 M2</version>
			<fixedVersion>1.0.4, 1.1 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapper.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="494" opendate="2012-07-25 11:55:03" fixdate="2012-07-27 07:37:32" resolution="Fixed">
		<buginformation>
			<summary>$or/$nor expressions do not consider entity class mapping</summary>
			<description>Use case example :






// The given entity




MyEntity {




@Id




String code;




}









// Querying using




Query(new Criteria().orOperator(new Criteria[]{




Criteria.where("code").regex(".*value.*", "i")




}))









// Produces




{ "$or" : [ { "code" : { "$regex" : ".*value.*" , "$options" : "i"}}}









// Instead of




{ "$or" : [ { "_id" : { "$regex" : ".*value.*" , "$options" : "i"}}}











The QueryMapper.getMappedObject set the entityClass as null for reentrant calls from the or/nor case, I don&amp;amp;apos;t anderstand why ?
Fix : Set the entityClass for reentrant calls (L91).</description>
			<version>1.1 M2</version>
			<fixedVersion>1.0.4, 1.1 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapper.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="497" opendate="2012-07-27 12:13:40" fixdate="2012-07-30 06:59:46" resolution="Fixed">
		<buginformation>
			<summary>Reading an empty List throws a MappingInstantiationException because it returns an HashSet instead of returning an ArrayList</summary>
			<description>When trying to switch to spring-data-mongo-1.1.M2 from 1.0.3, I had the following stacktrace :






org.springframework.data.mapping.model.MappingInstantiationException: Could not instantiate bean class [com.mycompany.catalog.Transaction]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch




	at org.springframework.data.convert.ReflectionEntityInstantiator.createInstance(ReflectionEntityInstantiator.java:77)




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:230)




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:210)




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:174)




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:170)




	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:73)




	at org.springframework.data.mongodb.core.MongoTemplate$ReadDbObjectCallback.doWith(MongoTemplate.java:1718)




	at org.springframework.data.mongodb.core.MongoTemplate.executeFindMultiInternal(MongoTemplate.java:1441)




	at org.springframework.data.mongodb.core.MongoTemplate.doFind(MongoTemplate.java:1244)




	at org.springframework.data.mongodb.core.MongoTemplate.doFind(MongoTemplate.java:1233)




	at org.springframework.data.mongodb.core.MongoTemplate.find(MongoTemplate.java:471)




	at org.springframework.data.mongodb.core.MongoTemplate.find(MongoTemplate.java:466)




	at com.mycompany.catalog.repositories.AbstractRepositoryCustomMongo.findByQueryPageable(AbstractRepositoryCustomMongo.java:35)




	at com.mycompany.catalog.repositories.TransactionRepositoryCustomMongo.findByProduct(TransactionRepositoryCustomMongo.java:64)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:334)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:309)




	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)




	at $Proxy26.findByProduct(Unknown Source)




	at com.mycompany.catalog.repositories.TransactionRepositoryTest.testFindByProduct(TransactionRepositoryTest.java:49)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)




	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)




	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)




	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)




	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)




	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)




	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)




	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)




	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)




	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)




	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)




	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)




	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)




	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)




	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)




	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)




	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)




	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)




	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:62)




Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [com.mycompany.catalog.Transaction]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch




	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:158)




	at org.springframework.data.convert.ReflectionEntityInstantiator.createInstance(ReflectionEntityInstantiator.java:75)




	... 50 more




Caused by: java.lang.IllegalArgumentException: argument type mismatch




	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)




	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)




	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)




	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)




	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147)




	... 51 more






After further investigation, I found that the problem come from the instanciation of my Transaction document which use @PersistenceConstructor on this constructor :






@PersistenceConstructor




public Transaction(




        ObjectId id,




        Product product,




        List&amp;lt;Operation&amp;gt; operations




)






Spring try to instantiate it with an HashSet instead of a List for the third constructor argument.
The HashSet is passed from the method org.springframework.data.mongodb.core.convert.MappingMongoConverter#readCollectionOrArray resulting in the a IllegalArgumentException: argument type mismatch
The readCollectionOrArray method should return an empty collection which matches the type of the constructor param at line https://github.com/SpringSource/spring-data-mongodb/blob/master/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/convert/MappingMongoConverter.java#L724
It may be related to :

issue DATAMONGO-458
commit https://github.com/SpringSource/spring-data-mongodb/commit/b3a891c69b38f5b53b5f6041c9af6aa3f89afe24

</description>
			<version>1.1 M2</version>
			<fixedVersion>1.1 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverter.java</file>
		</fixedFiles>
	</bug>
	<bug id="508" opendate="2012-08-15 07:33:43" fixdate="2012-08-15 09:31:51" resolution="Fixed">
		<buginformation>
			<summary>DBRef can accidentally get added as PersistentProperty</summary>
			<description>MappingMongoConverter.createDBRef() inspects the given object&amp;amp;apos;s metadata to extract id value and collection information of it. In case the given object is a DBRef already this is not necessary. Actually it will cause DBRef being added as PersistentEntity which should be avoided.</description>
			<version>1.1 M2</version>
			<fixedVersion>1.1 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverter.java</file>
		</fixedFiles>
	</bug>
	<bug id="505" opendate="2012-08-14 03:07:56" fixdate="2012-08-15 10:09:59" resolution="Fixed">
		<buginformation>
			<summary>Conversion of associations doesn&amp;apos;t work for collection values</summary>
			<description>Assume you have the following scenario:






class Entity {









  Long id;




  @DBRef




  Property property;




}









class Property {




  Long id;




}









interface EntityRepository extends Repository&amp;lt;Entity, Long&amp;gt; {









  Entity findByPropertyIn(Property... property);




}






The execution of findByProperty() will fail as the given array (or collection) is not correctly translated into a collection of DBRefs. The reason is that ConvertingIterator treats the value as is and wants to create a DBRef from it. We need to unwrap the elements and convert them into DBRef instances one by one.</description>
			<version>1.1 M2</version>
			<fixedVersion>1.1 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor.java</file>
		</fixedFiles>
	</bug>
	<bug id="517" opendate="2012-08-21 03:07:04" fixdate="2012-08-21 03:29:19" resolution="Fixed">
		<buginformation>
			<summary>QueryMapping incorrectly translates complex keywords</summary>
			<description>For queries with keywords having complex values (e.g. 
{ "$in" : [  ] }
) QueryMapper drops the keyword and makes the converted complex value the value of the actual property reference.</description>
			<version>1.1 M2</version>
			<fixedVersion>1.1 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapper.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="523" opendate="2012-09-01 03:39:51" fixdate="2012-09-03 06:26:10" resolution="Fixed">
		<buginformation>
			<summary>@TypeAlias annotation not used with AbstractMongoConfiguration </summary>
			<description>When using the AbstractMongoConfiguration without any further modifications regarding the converter (afterMappingMongoConverterCreation) the @TypeAlias annotation is not used when writing the _class property. Seems like it always uses the SimpleTypeInformationMapper. The documentation suggests that you just annotate your @Document classes with the @TypeAlias annotations and everything should be fine. </description>
			<version>1.0.4</version>
			<fixedVersion>1.1 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="depends on">226</link>
		</links>
	</bug>
	<bug id="527" opendate="2012-09-03 09:30:45" fixdate="2012-09-03 22:45:51" resolution="Fixed">
		<buginformation>
			<summary>Criteria.equals() broken for complex criterias</summary>
			<description></description>
			<version>1.0.4</version>
			<fixedVersion>1.1 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.query.Criteria.java</file>
			<file type="M">org.springframework.data.mongodb.core.query.CriteriaTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="532" opendate="2012-09-07 03:49:02" fixdate="2012-09-12 04:06:56" resolution="Fixed">
		<buginformation>
			<summary>Multithreading authentication issue</summary>
			<description>I have come across an issue which results in the following exception to be thrown.






java.lang.RuntimeException: org.springframework.data.mongodb.CannotGetMongoDbConnectionException: Failed to authenticate to database






This appears to be caused by multiple threads trying to authenticate a single DB instance. The bug appears to be in MongoDbUtils in the doGetDB() method. The method retrieves the DB object for a given name and checks if it is authenticated, if it is not authenticated then it will authenticate it with the given username and password. However, if two threads check the same DB object they will both attempt to authenticate which leads to the exception being thrown. I have checked the latest source code in the git repository and the bug still appears to be present. To solve this issue I have replaced lines 109 - 118 with:






if (credentialsGiven &amp;amp;&amp;amp; !db.isAuthenticated()) {




	String username = credentials.getUsername();




	String password = credentials.hasPassword() ? credentials.getPassword() : null;




	synchronized (db) {




		if (!db.isAuthenticated() &amp;amp;&amp;amp; !db.authenticate(username, password == null ? null : password.toCharArray())) {




			throw new CannotGetMongoDbConnectionException("Failed to authenticate to database [" + databaseName




					+ "], username = [" + username + "], password = [" + password + "]", databaseName, credentials);




		}	




	}




}






The synchronized block could be moved to include both if statements which would remove the need for the second call to isAuthenticated() but it would mean that each time the doGetDb() method is called the synchronized block will be entered. Whereas the above will only be synchronized on calls to doGetDb() when the db has not been authenticated, with the compromise that the isAuthenticated() method has to be called twice.
I have run the above fix (well the same fix based on the 1.0.4.RELEASE code) and it appears to solve the issue.
A second issue to be aware of is the pre version 2.9.0 of the java mongo driver has a multithreading bug described in the link below. I have had a look a the latest dev version of spring-mongo and it is still using 2.7.1 so it would be worth considering the upgrade.
https://jira.mongodb.org/browse/JAVA-582</description>
			<version>1.0.4</version>
			<fixedVersion>1.1 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoDbUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">484</link>
		</links>
	</bug>
	<bug id="530" opendate="2012-09-06 07:06:15" fixdate="2012-09-12 04:33:50" resolution="Fixed">
		<buginformation>
			<summary>MongoMappingContext.setApplicationContext() does not invoke superclass method</summary>
			<description>AbstractMappingContext.setApplicationContext() does not get invoked on invocations of MongoMappingContext.setApplicationContext(). This causes the entity initialization not being triggered correctly.</description>
			<version>1.1 RC1</version>
			<fixedVersion>1.1 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.mapping.MongoMappingContext.java</file>
		</fixedFiles>
	</bug>
	<bug id="535" opendate="2012-09-10 03:15:19" fixdate="2012-09-12 04:34:01" resolution="Fixed">
		<buginformation>
			<summary>Retrieve of existing Mongo DB from Transaction is not working</summary>
			<description>dbHolder.doesNotHoldNonDefaultDB() in MongoDbUtils.doGetDB() is always false, so the DbHolder is never used. 
MongoDbUtils.doGetDB() is also always registering synchronization for the same Mongo instance on every call. For two or more calls it fails to unbindResource() because resource is already unbounded.</description>
			<version>1.0.4</version>
			<fixedVersion>1.1 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoDbUtils.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoDbUtilsUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="549" opendate="2012-10-10 23:32:46" fixdate="2012-10-10 23:59:43" resolution="Fixed">
		<buginformation>
			<summary>MongoTemplate.save() suffers from potential NullPointException</summary>
			<description>MongoTemplate.save() runs into a NullPointerException in case the object handed in is a Mongo-primitive one (Map, Collection, Java-primitive). Also if the object handed into the method is null already we run into an NPE as well.</description>
			<version>1.1 GA</version>
			<fixedVersion>1.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
	</bug>
	<bug id="550" opendate="2012-10-11 07:52:36" fixdate="2012-10-15 09:01:57" resolution="Fixed">
		<buginformation>
			<summary>MongoTemplate.save(BasicDBObject, String) results in NPE (after upgrading to 1.1.0.RELEASE</summary>
			<description></description>
			<version>1.1 GA</version>
			<fixedVersion>1.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">2785</link>
		</links>
	</bug>
	<bug id="551" opendate="2012-10-11 08:00:10" fixdate="2012-10-15 09:02:10" resolution="Fixed">
		<buginformation>
			<summary>MongoTemplate.save(String, String) results in NPE (after upgrading to 1.1.0.RELEASE</summary>
			<description>In this case the String we are talking about is a JSON String. </description>
			<version>1.1 GA</version>
			<fixedVersion>1.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">2785</link>
		</links>
	</bug>
	<bug id="553" opendate="2012-10-12 06:36:38" fixdate="2012-10-17 14:49:48" resolution="Fixed">
		<buginformation>
			<summary>StackOverflowError when objects have cycles</summary>
			<description>The issue was first reported to Spring Integration project: https://jira.springsource.org/browse/INT-2778 and we narrowed down the problem to the fact that the persisted object had a cycle. In the reported case persisted object is Exception who&amp;amp;apos;s default &amp;amp;apos;cause&amp;amp;apos; is &amp;amp;apos;this&amp;amp;apos; thus creating a cycle.
I think classes of type Throwable needs to be treated in a special way where instead of using Reflection getCause() should be called.
However it would also help to have some cycle detection mechanism even for the purpose of throwing a more meaningful exception (e.g., Cycle detected)</description>
			<version>1.1 GA</version>
			<fixedVersion>1.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.mapping.SimpleMongoMappingContext.java</file>
			<file type="M">org.springframework.data.mongodb.core.mapping.BasicMongoPersistentPropertyUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty.java</file>
			<file type="M">org.springframework.data.mongodb.core.mapping.MongoPersistentProperty.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverter.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">2778</link>
		</links>
	</bug>
	<bug id="570" opendate="2012-11-08 13:40:06" fixdate="2012-11-13 09:34:13" resolution="Fixed">
		<buginformation>
			<summary>Query methods on @DBRef field with the qualifier isNull throws Exception</summary>
			<description>For the following repository query on @DBRef field with the qualifier isNull throws Exception
public class Tree {
  private String id;
  @DBRef
  private Tree parent;
  ...
}
@Repository
public interface TreeRepository extends CrudRepository&amp;lt;Tree, String&amp;gt; {
  List&amp;lt;Tree&amp;gt; findByParentIsNull();
}
Here is the stacktrace:
Caused by: java.lang.IllegalArgumentException: [Assertion failed] - this argument is required; it must not be null
	at org.springframework.util.Assert.notNull(Assert.java:112)
	at org.springframework.util.Assert.notNull(Assert.java:123)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.createDBRef(MappingMongoConverter.java:672)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.toDBRef(MappingMongoConverter.java:277)
	at org.springframework.data.mongodb.core.convert.QueryMapper.convertAssociation(QueryMapper.java:266)
	at org.springframework.data.mongodb.core.convert.QueryMapper.getMappedValue(QueryMapper.java:177)
	at org.springframework.data.mongodb.core.convert.QueryMapper.getMappedObject(QueryMapper.java:90)
	at org.springframework.data.mongodb.core.MongoTemplate.doFind(MongoTemplate.java:1332)
	at org.springframework.data.mongodb.core.MongoTemplate.doFind(MongoTemplate.java:1318)
	at org.springframework.data.mongodb.core.MongoTemplate.find(MongoTemplate.java:504)
	at org.springframework.data.mongodb.repository.query.AbstractMongoQuery$Execution.readCollection(AbstractMongoQuery.java:123)
	at org.springframework.data.mongodb.repository.query.AbstractMongoQuery$CollectionExecution.execute(AbstractMongoQuery.java:146)
	at org.springframework.data.mongodb.repository.query.AbstractMongoQuery.execute(AbstractMongoQuery.java:86)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:313)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at $Proxy39.findByParentIsNull(Unknown Source)</description>
			<version>1.1 GA</version>
			<fixedVersion>1.1.2, 1.2 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapper.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="585" opendate="2012-12-01 08:28:43" fixdate="2012-12-03 02:47:10" resolution="Fixed">
		<buginformation>
			<summary>Exception during authentication in multithreaded access</summary>
			<description>Bug &amp;amp; further details are here:
http://forum.springsource.org/showthread.php?132878-can-t-authenticate-twice-on-same-database
Specifically what can be used for a test case is use a ThreadPoolExecutor, set a minpool and maxpool value of 5, add 25 objects to be executed.  Those objects are a class which implements Runnable.  
Those objects each then perform a bunch of inserts into mongoDB using a DocumentDao which calls mongoOperations.insert.
thanks</description>
			<version>1.1 GA</version>
			<fixedVersion>1.1.2, 1.2 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoDbUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="534" opendate="2012-09-08 13:45:30" fixdate="2013-10-13 03:46:07" resolution="Fixed">
		<buginformation>
			<summary>The GridFs query execution does not return sorted resources, when the sorting fields are defined in the query definition</summary>
			<description>The sorting fields of a Query instance are disregarded during the query execution using an instance of GridFsOperations. The result sets of the found GridFS files are not sorted no matter of the existence of the sorting fields in the preceding query. I expected the resources to be sorted according to the instructions of the corresponding sorting fields.
Example (a dummy one):
Prerequisites:
1. At least 2 files have been stored using GridFs
2. We have certain meta-data fields, which are used as part of the criteria, but we will miss, since they are irrelevant to the example.






@Autowired




private GridFsOperations ops;









Query query = Query.query(Criteria.where(...));




query = query.sort().on("uploadDate", Order.DESCENDING);









final List&amp;lt;GridFSDBFile&amp;gt; files = ops.find(query);






The results in the list, named files, will not be sorted according to the standard GridFsDbFile attribute uploadDate. I believe that the reason lies into the default implementation of the GridFsOperations, more precisely in the class GridFsTemplate. There the method getMappedQuery(Query), which is used for a basic mapping facility from Query to DBObject is implemented like this:






private DBObject getMappedQuery(Query query) {




	return query == null ? null : queryMapper.getMappedObject(query.getQueryObject(), null);




}






I believe that this is the problematic call, since I debugged the DBObject returned from the invocation of the queryMapper.getMappedObject() and it never contained any sorting fields no matter that they were part of if the transformed Query instance. I think that if one goes through the MongoTemplate find-ers implementations, she / he may find the mapping implementation there way better than what is currently available with the GridFs implementation.</description>
			<version>1.1 RC1</version>
			<fixedVersion>1.4 M1 (Codd)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.gridfs.GridFsTemplate.java</file>
			<file type="M">org.springframework.data.mongodb.gridfs.GridFsTemplateIIntegrationTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="471" opendate="2012-06-27 06:32:03" fixdate="2014-03-31 06:26:52" resolution="Fixed">
		<buginformation>
			<summary>Update operation $addToSet does not support adding a list with $each</summary>
			<description>In MongoDB the $addToSet update operation can be provided either with a single value or a list of values. In order to add multiple values to the set the list is specified with the $each operator. Example:






{ $addToSet : { field : value } }




{ $addToSet : { a : { $each : [ 3 , 5 , 6 ] } } }






The method org.springframework.data.mongodb.core.query.Update.addToSet() only supports adding scalar values but should support adding a list of values. Otherwise there is no way of doing the needed operation within a single update with Spring Data Mongo. Calling the addToSet() method multiple times on a single attribute overwrites the value to be added. Providing a list insert a nested list into the set.</description>
			<version>1.1 M1</version>
			<fixedVersion>1.5 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.query.Update.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">812</link>
		</links>
	</bug>
</bugrepository>