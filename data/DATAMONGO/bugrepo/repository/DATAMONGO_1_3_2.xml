<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATAMONGO">
	<bug id="788" opendate="2013-10-29 02:09:11" fixdate="2013-10-31 07:50:33" resolution="Fixed">
		<buginformation>
			<summary>Projection operations do not render synthetic fields properly.</summary>
			<description>If a part "a" of a group id _id.a is referenced in a projection operation it should be rendered as 





"a":"$_id.a"





 while it is currently rendered as 





"a":1





.</description>
			<version>1.3.2 (Babbage SR1)</version>
			<fixedVersion>1.4 M1 (Codd), 1.3.3 (Babbage SR2)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.aggregation.ProjectionOperation.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.ProjectionOperationUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.Field.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.ExposedFields.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.AggregationUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.Fields.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.AggregationTests.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">757</link>
		</links>
	</bug>
	<bug id="806" opendate="2013-12-04 08:49:32" fixdate="2013-12-09 08:12:39" resolution="Fixed">
		<buginformation>
			<summary>Spring Data MongoDB - Aggregation Framework - No property _id found for type com.entity.User</summary>
			<description>In the mongo shell the command would be:
db.custom.aggregate([
{$project:{"msgs" : 1,"_id" : 1}},
{$unwind:"$msgs"},
{$match:{"msgs.createDate" :
{"$gt":ISODate( "2013-12-04T06:07:14.609Z")}
}}, 
{ "$group" : { "_id" : "$_id" }}])
=-----------
The Spring Code I use is:
public class User {
	private int id;
	private String name;
	private List&amp;lt;PushMessage&amp;gt; msgs;
};
Aggregation aggre = Aggregation.newAggregation(User.class,new AggregationOperation[]
{
		Aggregation.project("msgs","_id"),
		Aggregation.unwind("msgs"),
                Aggregation.match(Criteria.where("msgs.createDate").gt(date)),
     		Aggregation.group("_id").push("msgs").as("msgs")
		}
);
AggregationResults&amp;lt;User&amp;gt; r =dboper.aggregate(aggre, User.class,User.class);
I get the following error:
org.springframework.data.mapping.PropertyReferenceException: No property _id found for type com.entity.User
	at org.springframework.data.mapping.PropertyPath.&amp;lt;init&amp;gt;(PropertyPath.java:75)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:327)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:307)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:271)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:245)</description>
			<version>1.3.2 (Babbage SR1)</version>
			<fixedVersion>1.3.3 (Babbage SR2), 1.4 RC1 (Codd)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.aggregation.AggregationTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.ExposedFields.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.ProjectionOperation.java</file>
			<file type="M">org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="805" opendate="2013-12-02 06:34:36" fixdate="2014-01-14 05:35:09" resolution="Fixed">
		<buginformation>
			<summary>Excluding DBRef field in a query causes a MappingException</summary>
			<description>Excluding a field in a query where the field is a DBRef as below throws a MappingException.
Query query = new Query(Criteria.where("parentField").is("test"));
        query.fields().exclude("children");
        ParentClass parentClass = mongoOperations.findOne(query, ParentClass.class);
Exception trace:
org.springframework.data.mapping.model.MappingException: No mapping metadata found for class java.lang.Integer
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.createDBRef(MappingMongoConverter.java:729)
	at com.digitalshadows.collation.persistence.impl.CollectionNameProvidedMongoConverter.createDBRef(CollectionNameProvidedMongoConverter.java:28)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.toDBRef(MappingMongoConverter.java:288)
	at org.springframework.data.mongodb.core.convert.QueryMapper.convertAssociation(QueryMapper.java:273)
	at org.springframework.data.mongodb.core.convert.QueryMapper.getMappedValue(QueryMapper.java:204)
	at org.springframework.data.mongodb.core.convert.QueryMapper.getMappedObject(QueryMapper.java:113)
	at org.springframework.data.mongodb.core.MongoTemplate.doFindOne(MongoTemplate.java:1439)
	at org.springframework.data.mongodb.core.MongoTemplate.findOne(MongoTemplate.java:489)
	at org.springframework.data.mongodb.core.MongoTemplate.findOne(MongoTemplate.java:484)
	at ExcludeDBRefFieldTest.testExcludeChildren(ExcludeDBRefFieldTest.java:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
I&amp;amp;apos;ve attached a simple test case that throws the MappingException. The workaround for this I can currently see is to use include for all the other fields instead.</description>
			<version>1.3.2 (Babbage SR1)</version>
			<fixedVersion>1.4 RC1 (Codd), 1.3.4 (Babbage SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapper.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.mapping.MappingTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="807" opendate="2013-12-08 05:14:31" fixdate="2014-01-27 09:34:03" resolution="Fixed">
		<buginformation>
			<summary>using findAndModify removes the _class field of encapsulated classes, causing MappingInstantiationException</summary>
			<description>given the two classes:
public interface IUser{
}
public class User implements IUser{
    public int i;
}
public class UserWrapper{
    private IUser user;
}
when using findAndModify on a UserWrapper collection, 
the "_class" field from the User class is removed.
when trying to restore the UserWrapper class, 
a MappingInstantiationException is being thrown with "Failed to instantiate IUser using constructor NO_CONSTRUCTOR with arguments.</description>
			<version>1.3.2 (Babbage SR1)</version>
			<fixedVersion>1.4 RC1 (Codd), 1.3.4 (Babbage SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">407</link>
		</links>
	</bug>
</bugrepository>