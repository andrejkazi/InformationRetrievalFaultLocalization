<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATAMONGO">
	<bug id="562" opendate="2012-10-24 05:57:43" fixdate="2012-10-24 07:13:51" resolution="Fixed">
		<buginformation>
			<summary>Cannot create entity with OptimisticLocking (@Version) and initial id</summary>
			<description>Cannot store entities with @Version and id already set. Either a NullPointerException or OptimisticLockingFailureException
The following test case provokes a NullPointerException since person.version is null. However, if I change version to 0 I will get an OptimisticLockingFailureException.
	@Test
	public void optimisticLockingHandlingWithExistingId() 
{
		PersonWithVersionPropertyOfTypeInteger person = new PersonWithVersionPropertyOfTypeInteger();
		person.id = new ObjectId().toString();
		person.age = 29;
		person.firstName = "Patryk";
		template.save(person);
	}</description>
			<version>1.1.1</version>
			<fixedVersion>1.1.2, 2.0 M1 (Kay)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
	</bug>
	<bug id="588" opendate="2012-12-08 16:35:30" fixdate="2012-12-12 22:45:30" resolution="Fixed">
		<buginformation>
			<summary>MongoTemplate.insert does not initialize null versions to zero</summary>
			<description>When persisting an object with a null @version field, you get different results when calling MongoTemplate.insert(Object) versus MongoTemplate.save(Object):

MongoTemplate.insert ==&amp;gt; @version = null
MongoTemplate.save ==&amp;gt; @version = 0

I think the insert method should set @version to zero when it is null, like is done for the save method.</description>
			<version>1.1.1</version>
			<fixedVersion>1.1.2, 1.2 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
	</bug>
	<bug id="583" opendate="2012-11-29 07:08:25" fixdate="2012-12-12 22:46:58" resolution="Fixed">
		<buginformation>
			<summary>Check if you are using for loop with a DBCursor</summary>
			<description>The mongodb driver has a possible memory leak, when using a DBCursor with a for loop:






DBCursor cursor = c.find();




try {




    for (DBObject obj: cursor) {




        if (someCondition(obj)) {




            return obj;




        }




    }




} finally {




    cursor.close();




}






Please see here:
https://jira.mongodb.org/browse/JAVA-664
Please check this case is used and maybe switch to a while(cursor.hasNext())</description>
			<version>1.1.1</version>
			<fixedVersion>1.1.2, 1.2 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
	</bug>
	<bug id="592" opendate="2012-12-13 21:23:45" fixdate="2012-12-16 06:42:32" resolution="Fixed">
		<buginformation>
			<summary>Persisting Objects containing Objects with PersistenceConstructor causes MappingInstantiationException</summary>
			<description>I am able to persist an object and have SringSource re-create the object from the database if all the member variables are primitive types.  This holds true if the names of the @PersistenceConstructor arguments don&amp;amp;apos;t match exactly the names of the member variables - in this case they an be matched up by using the @Field("foo") and @Value("#root.foo") annotations.  However, I get a MappingInstantiationException when I try to persist objects that contain other objects using the @PersistenceConstructor.
See StackOverflow 13854753 and StackOverflow 13832188 for details.
According to Oliver Gierke:

You seem to have found a bug. The value resulting from the first Spel expression evaluation is a DBObject and not actually translated into the parameter type. I&amp;amp;apos;ve already have some code here locally that fixes that. Would you mind creating a ticket against Spring Data MongoDB to file this as a bug?</description>
			<version>1.1.1</version>
			<fixedVersion>1.2 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.MappingMongoConverter.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="depends on">260</link>
			<link type="Relate" description="is related to">593</link>
		</links>
	</bug>
	<bug id="601" opendate="2013-01-29 02:42:36" fixdate="2013-01-29 07:48:06" resolution="Fixed">
		<buginformation>
			<summary>CannotGetMongoDbConnectionException should not print password in logfile</summary>
			<description>When the provided password and / or user is wrong we receive the following exception:






Error creating bean with name &amp;amp;apos;sameCoolClassRepository&amp;amp;apos;: FactoryBean threw exception on object creation; nested exception is org.springframework.data.mongodb.CannotGetMongoDbConnectionException:




Failed to authenticate to database [mydbname], username = [myusername], password = [thecleartextpassword]






Spring Data should never print the password in the logiles.
Suggested solution: print first and last letter: &amp;amp;apos;mysecret&amp;amp;apos; gets &amp;amp;apos;m**************t&amp;amp;apos;</description>
			<version>1.1.1</version>
			<fixedVersion>1.1.2, 1.2 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoDbUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="603" opendate="2013-02-01 06:15:07" fixdate="2013-02-01 07:00:30" resolution="Fixed">
		<buginformation>
			<summary>Results of geo queries in repository dont&amp;apos;t get metrics of supplied distance applied</summary>
			<description>Assume you have a geo query in a repository:






interface PersonRepository implements Repository&amp;lt;Person, Long&amp;gt; {









  GeoResults&amp;lt;Person&amp;gt; findByLocationNear(Point point, Distance distance);




}






Handing in a Distance in a particular metric is not regarded in the Distance instance the GeoResults instance carries in .getAverageDistance().






Distance distance = new Distance(150, Metrics.KILOMETERS);




Point point = new Point(10.0, 20.0);









GeoResults&amp;lt;Person&amp;gt; result = repository.findByLocationNear(point, distance);









// fails




assertThat(result.getAverageDistance().getMetric(), is(Metrics.KILOMETERS));





</description>
			<version>1.1.1</version>
			<fixedVersion>1.2 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.config.AbstractMongoConfiguration.java</file>
			<file type="M">org.springframework.data.mongodb.core.query.NearQueryUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.geo.GeoSpatialTests.java</file>
			<file type="M">org.springframework.data.mongodb.repository.query.AbstractMongoQuery.java</file>
			<file type="M">org.springframework.data.mongodb.repository.AbstractPersonRepositoryIntegrationTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.query.NearQuery.java</file>
		</fixedFiles>
	</bug>
	<bug id="568" opendate="2012-11-07 14:16:47" fixdate="2013-02-06 06:24:38" resolution="Fixed">
		<buginformation>
			<summary>MongoTemplate.find(...)  method causes Nullpointer if query parameter is null</summary>
			<description>If the Query query parameter is null both find methods cause a NullPointer Exception.
If query is null an IllegalArgument should be thrown.
The Assert.notnull(query) is missing</description>
			<version>1.1.1</version>
			<fixedVersion>1.1.2, 1.2 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
	</bug>
	<bug id="629" opendate="2013-03-22 04:08:25" fixdate="2013-03-27 04:22:53" resolution="Fixed">
		<buginformation>
			<summary>Different results when using count and find with the same criteria with &amp;apos;id&amp;apos; field</summary>
			<description>Assume we have following query:






Query q = query(where(&amp;amp;apos;id&amp;amp;apos;).regex(&amp;amp;apos;zzz&amp;amp;apos;))






mongoTemplate.find(q,java.util.HashMap.class,&amp;amp;apos;test&amp;amp;apos;) gives following query (peeked in mongo console):






{ "ts" : ISODate("2013-03-22T10:00:51.685Z"),




  "op" : "query",




  "ns" : "test.test",




  "query" : {




		"id" : /zzz/




	},




	"nscanned" : 1,




	"responseLength" : 20,




	"millis" : 0,




	"client" : "127.0.0.1",




	"user" : ""




}






The same query, when used in count (mongoTemplate.count(q,&amp;amp;apos;test&amp;amp;apos;)) gives:






{




	"ts" : ISODate("2013-03-22T10:00:36.299Z"),




	"op" : "command",




	"ns" : "test.$cmd",




	"command" : {




		"count" : "test",




		"query" : {




			"_id" : /zzz/




		}




	},




	"ntoreturn" : 1,




	"responseLength" : 48,




	"millis" : 0,




	"client" : "127.0.0.1",




	"user" : ""




}






This is inconsistent since we could have records with field id and they will be retrieved properly from the db. Count on the other hand will give bad results since it uses _id field.
In org.springframework.data.mongodb.core.convert.QueryMapper the method determineKey, for some reason treats id and _id as the same field. This is probably the cause of the strange behaviour because find() method does not use QueryMapper and count() does.</description>
			<version>1.1.1</version>
			<fixedVersion>1.2.1, 1.3 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapper.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.mapping.MongoMappingContext.java</file>
		</fixedFiles>
	</bug>
	<bug id="642" opendate="2013-04-02 02:18:55" fixdate="2013-04-02 02:47:02" resolution="Fixed">
		<buginformation>
			<summary>MongoChangeSetPersister does not use mapped collection name</summary>
			<description></description>
			<version>1.1.1</version>
			<fixedVersion>1.2.1, 1.3 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.crossstore.CrossStoreMongoTests.java</file>
			<file type="M">org.springframework.data.mongodb.crossstore.MongoChangeSetPersister.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">594</link>
		</links>
	</bug>
	<bug id="594" opendate="2012-12-24 11:37:31" fixdate="2013-04-02 03:40:27" resolution="Fixed">
		<buginformation>
			<summary>cross-store=&gt; Define document name using annotation</summary>
			<description>In a cross-store configuration, the RelatedDocument is stored in a MongoDB collection using the container&amp;amp;apos;s Entity&amp;amp;apos;s package name.
It would be nice if the collection name would be either the name of the class (document, not entity) or as specified using annotations(@Document(collection="")).
This "issue" is caused by the class
org.springframework.data.mongodb.crossstore.MongoChangeSetPersister
which gets the name of the collection from the method getCollectionNameForEntity which does:
return ClassUtils.getQualifiedName(entityClass);</description>
			<version>1.1.1</version>
			<fixedVersion>1.2.1, 1.3 M1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.crossstore.CrossStoreMongoTests.java</file>
			<file type="M">org.springframework.data.mongodb.crossstore.MongoChangeSetPersister.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">642</link>
		</links>
	</bug>
	<bug id="571" opendate="2012-11-09 08:00:10" fixdate="2013-04-11 03:05:45" resolution="Fixed">
		<buginformation>
			<summary>Spring Data for MongoDb doesn&amp;apos;t save null values when @Version is added to domain class </summary>
			<description>Scenario:
1. Domain class is loaded from mongodb using CrudRepository.findOne() method.
2. The loaded instances any non id nor @Version annotated field is set to null. 
3. The loaded instance is saved to same mongodb using CrudRepository.save() method.
4. The field that has been set to null doesnt write to database, its unchanged.
Important: The problem doesnt occur when @Version annotation is not used in the domain class definition.</description>
			<version>1.1.1</version>
			<fixedVersion>1.2.1, 1.3 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.query.Update.java</file>
		</fixedFiles>
	</bug>
	<bug id="693" opendate="2013-06-12 06:04:14" fixdate="2013-07-02 07:40:16" resolution="Fixed">
		<buginformation>
			<summary>MongoFactoryBean should create a mongo instance with host/port if replicaset is null or empty</summary>
			<description>I&amp;amp;apos;m initializing mongo with a spring xml. I&amp;amp;apos;m using propertyPlaceHolderConfigurer to inject parameters that are coming from jndi.
I can configure my application with a replicatset or not (a simple host). 
The only workaround to distinct the two cases is to inject a empty string for replicaset when i&amp;amp;apos;m using a simple host. But MongoFactoryBean should ignore this property in this case.
</description>
			<version>1.1.1</version>
			<fixedVersion>1.2.2, 1.3 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoFactoryBeanIntegrationTest.java</file>
			<file type="M">org.springframework.data.mongodb.core.MongoFactoryBean.java</file>
			<file type="M">org.springframework.data.mongodb.config.ServerAddressPropertyEditor.java</file>
			<file type="M">org.springframework.data.mongodb.config.ServerAddressPropertyEditorUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="602" opendate="2013-01-30 02:22:53" fixdate="2013-08-07 10:11:51" resolution="Fixed">
		<buginformation>
			<summary>Querying with $in operator on the id field of type BigInteger returns zero results</summary>
			<description>There is a problem when trying to query for documents with id field is in a given list of BigInteger values. Id field is mapped as a BigInteger.
For example, these lines will work only if given id list contains only one item.






List&amp;lt;BigInteger&amp;gt; profileIds = findProfileIds();




Predicate predicate = QProfileDocument.profileDocument.id.in(profileIds);




Iterable&amp;lt;ProfileDocument&amp;gt; profiles = profileRepository.findAll(predicate);






The underlying MongodbQuery is different if there is only one item in profileIds. The query looks like this for a profileIds with multiple elements






{ "_id" : { "$in" : [ "25069473312490162649510603609" , "25045916045544535958655878835"]}}






and it looks like this when there is only one item in the list.






{ "_id" : { "$oid" : "5100fb776c67e7e092be6b59"}}






In the first case, query will return no results and in the second it will work and return an Iterable with one item.
As you can see, the problem is with the representation of the BigInteger. using decimal format will not work with MongoDB.</description>
			<version>1.1.1</version>
			<fixedVersion>1.3 GA, 1.2.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="746" opendate="2013-09-04 07:43:44" fixdate="2013-10-25 02:15:17" resolution="Fixed">
		<buginformation>
			<summary>IndexInfo cannot be read for indices created via mongo shell</summary>
			<description>As described in the stackoverflow post, spring mongo data cannot retrieve the index information for an index that has been created via the mongo shell.
Trisha from 10gen traced the root cause down to this:
"I would recommend reporting this to the guys at Spring, you will not be the only one who experiences this. I found the problem in DefaultIndexOperations lines 138 - 141 in version 1.1.1 of spring-data-mongodb."
I figure this issue also exists in later versions though I did not get around to test it myself.</description>
			<version>1.1.1</version>
			<fixedVersion>1.3.2 (Babbage SR1), 1.4 M1 (Codd)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplateTests.java</file>
			<file type="M">org.springframework.data.mongodb.core.DefaultIndexOperations.java</file>
		</fixedFiles>
	</bug>
	<bug id="647" opendate="2013-04-09 17:29:02" fixdate="2014-05-19 05:42:41" resolution="Fixed">
		<buginformation>
			<summary>Using "OrderBy" in "query by method name" ignores the @Field annotation for field alias.</summary>
			<description>I created a method using the "query by method name" approach:
Inside my Answer object, I have a field called "Score" that is annotated with
@Field("sr")
int Score
List&amp;lt;Answer&amp;gt; findByQuestionIdOrderByScoreDesc(String questionId)
When the query is run, the database attempts to sort the results by "score" rather than my "sr" field name.</description>
			<version>1.1.1</version>
			<fixedVersion>1.4.3 (Codd SR3), 1.5 GA (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">888</link>
		</links>
	</bug>
</bugrepository>