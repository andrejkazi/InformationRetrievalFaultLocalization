<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="DATAMONGO">
	<bug id="11" master="1232" duplicate="1368" opendate="2015-06-03 10:27:23" fixdate="2016-11-02 18:25:24" resolution="Fixed">
		<buginformation>
			<summary>IgnoreCase should escape queries findByIgnoreCase Not Escaping Parenthesis</summary>
			<description>The IgnoreCase query generator is subject to a sort of "regex injection" attack, because the query generator simply slaps ^..$ around the string and passes it directly to MongoDB. This fails when the string contains any sort of special characters. In my case, I&amp;amp;apos;m trying to perform a case-insensitive find on an e-mail address with the + sign, a legal character, but the regex interprets this as 1..*.
The query generator needs to properly escape regex-special characters. This was tested on 1.7.0.RELEASE.
I have a method in the interface like:
Object findOneByIdAndNameIgnoreCase(String id, String name);
I call the function like this:
dao.findOneByIdAndNameIgnoreCase("uid", "Engineer (TX)");
This causes the following query to be generated (as seen in the debug log):
(MongoTemplate.java:2066) - findOne using query: { "id" : "uid" , "name" : { "$regex" : "^Engineer (TX)$" , "$options" : "i"}} in db.collection
Which fails to find the record having:
{
"id" : "uid",
"name" : "Engineer (TX)"
}

Because the regex sees the parenthesis as part of the regex (as a group matcher) when it should see them as part of the plaintext.  i.e. they are not being escaped.
</description>
			<version>1.7.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Evans SR3), 1.7.1 (Fowler SR1), 1.5.6 (Dijkstra SR6), 1.8 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.repository.query.MongoQueryCreator.java</file>
			<file type="M">org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">1368</link>
			<link type="Duplicate" description="duplicates">1232</link>
		</links>
	</bug>
	<bug id="13" master="1276" duplicate="1295" opendate="2015-08-19 02:31:58" fixdate="2015-11-02 09:21:59" resolution="Fixed">
		<buginformation>
			<summary>MongoTemplate.CloseableIterableCursorAdapter does not null check return values from PersistenceExceptionTranslator. The MongoTemplate.CloseableIterableCusorAdapter runs into an NPE when a MappingException was raised</summary>
			<description>Using the Stream support in a MongoRepository I suddenly started getting exceptions like these:






java.lang.NullPointerException: null




	at org.springframework.data.mongodb.core.MongoTemplate$CloseableIterableCusorAdapter.next(MongoTemplate.java:2389)




	at java.util.Iterator.forEachRemaining(Iterator.java:116)




	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)




	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)




	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)




	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)




	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)




	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)




...






After a bit if investigation it turns out that due to some domain model changes I appear to be getting an org.springframework.data.mapping.model.MappingException in the data mapping and since MongoExceptionTranslator does not specifically know about it. So it just returns null.
That appears to be fine according to the PersistenceExceptionTranslator interface. But it appears that the Spring Data MongoDB code will often throw the result without any null checks. Provoking an NPE and hiding the actual reason for the exception. When a MappingException occurs, the MongoTemplate.CloseableIterableCusorAdapter will run into an NPE and swallow the source MappingException. That makes the stack trace unusable. CloseableIterableCursorAdapter is used for the new java.util.Stream support. The source of this issue here. The MongoExceptionTranslator.translateExceptionIfPossible(...)  returns null in case of mapping exceptions.
The stack trace (where the nice MappingException is swallowed):






Exception in thread "main" java.lang.IllegalStateException: Failed to execute CommandLineRunner




	at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:676)




	at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:691)




	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)




	at org.springframework.boot.SpringApplication.run(SpringApplication.java:967)




	at org.springframework.boot.SpringApplication.run(SpringApplication.java:956)




	at com....ExtractorApplication.main(ExtractorApplication.java:25)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




	at java.lang.reflect.Method.invoke(Method.java:483)




	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)




Caused by: java.lang.NullPointerException &amp;lt;---- That should be the Mapping Exception




	at org.springframework.data.mongodb.core.MongoTemplate$CloseableIterableCusorAdapter.next(MongoTemplate.java:2395)




	at java.util.Iterator.forEachRemaining(Iterator.java:116)




	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)




	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)




	at com......(XXX.java:48)




	at com.....ExtractorApplication.run(ExtractorApplication.java:37)




	at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:673)




	... 10 more





</description>
			<version>1.8 GA (Gosling)</version>
			<fixedVersion>1.8.1 (Gosling SR1), 1.9 M1 (Hopper), 1.7.3 (Fowler SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">1295</link>
			<link type="Duplicate" description="is duplicated by">1307</link>
			<link type="Duplicate" description="duplicates">1276</link>
		</links>
	</bug>
	<bug id="18" master="1276" duplicate="1307" opendate="2015-08-19 02:31:58" fixdate="2015-10-21 13:12:38" resolution="Fixed">
		<buginformation>
			<summary>MongoTemplate.CloseableIterableCursorAdapter does not null check return values from PersistenceExceptionTranslator. Stop converting user-defined runtime exceptions to NPEs</summary>
			<description>Using the Stream support in a MongoRepository I suddenly started getting exceptions like these:






java.lang.NullPointerException: null




	at org.springframework.data.mongodb.core.MongoTemplate$CloseableIterableCusorAdapter.next(MongoTemplate.java:2389)




	at java.util.Iterator.forEachRemaining(Iterator.java:116)




	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)




	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)




	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)




	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)




	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)




	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)




...






After a bit if investigation it turns out that due to some domain model changes I appear to be getting an org.springframework.data.mapping.model.MappingException in the data mapping and since MongoExceptionTranslator does not specifically know about it. So it just returns null.
That appears to be fine according to the PersistenceExceptionTranslator interface. But it appears that the Spring Data MongoDB code will often throw the result without any null checks. Provoking an NPE and hiding the actual reason for the exception. MongoTemplate has code like this in many places:
} catch (RuntimeException ex) {
	throw exceptionTranslator.translateExceptionIfPossible(ex);
MongoExceptionTranslator, however, often does NOT return an exception. If it encounters an unknown exception it does this:
// If we get here, we have an exception that resulted from user code,
// rather than the persistence provider, so we return null to indicate
// that translation should not occur.
return null;
MongoTemplate then "eats" the original exception and throws a null-pointer exception instead.
MongoTemplate should throw the original exception if it gets null back from the exception translator.</description>
			<version>1.7.2 (Fowler SR2)</version>
			<fixedVersion>1.8.1 (Gosling SR1), 1.9 M1 (Hopper), 1.7.3 (Fowler SR3)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.mongodb.core.MongoTemplate.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">1295</link>
			<link type="Duplicate" description="is duplicated by">1307</link>
			<link type="Duplicate" description="duplicates">1276</link>
		</links>
	</bug>
</bugrepository>